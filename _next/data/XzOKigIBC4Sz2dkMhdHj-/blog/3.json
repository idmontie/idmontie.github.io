{"pageProps":{"posts":[{"slug":"2015-01-03-seo","date":"2015-01-03","title":"SEO","frontmatter":{"title":"SEO"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into SEO considerations for web applications.\n\n## Use Search Engine Friendly URLs\n\nUse [semantic URLs](http://en.wikipedia.org/wiki/Semantic_URL).  Semantic URLs help improve usability and accessibility of a website.  The following table from the Wikipedia entry illistrates how to use semantic URLs:\n\n| Non-semantic URL                                                | Semantic URL                              |\n|-----------------------------------------------------------------|-------------------------------------------|\n| `http://example.com/index.php?page=name`                          | `http://example.com/name`                   |\n| `http://example.com/index.php?page=consulting/marketing`          | `http://example.com/consulting/marketing`   |\n| `http://example.com/products?category=2&pid=25`                   | `http://example.com/products/2/25`          |\n| `http://example.com/cgi-bin/feed.cgi?feed=news&frm=rss`           | `http://example.com/news.rss`               |\n| `http://example.com/services/index.jsp?category=legal&id=patents` | `http://example.com/services/legal/patents` |\n| `http://example.com/kb/index.php?cat=8&id=41`                     | `http://example.com/kb/8/41`                |\n| `http://example.com/index.php?mod=profiles&id=193`                | `http://example.com/profiles/193`           |\n\n## Use Hashbangs for Dynamic Content When You Normally Use Hashes\n\nIf you normally use the hash `#` character for dynamic content, change it to the hashbang `#!`.  This allows googlebot to use `#_REQUEST[\"_escaped_fragment_\"]` instead of `#!`.\n\n## Use Push State If You Can\n\nIf the user is using Firefox or Chromium, you can use `history.pushState( object, pageName, \"./?param=1\");` so that the address bar changes, but the page does not reload.  This allows you to use `?` instead of `#!` to keep dynamic content.\n\n## Use Descriptive Links\n\nWhen creating links, refrain from using \"this\" or \"click here\" or similar phrases for your links.  Link descriptions should be descriptive.\n\n## Have an XML Sitemap\n\n> Sitemaps are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling.\n\nHave a [sitemap](http://www.sitemaps.org/) at `/sitemap.xml` for search engines to crawl.\n\nHave a [image sitemap](https://support.google.com/webmasters/answer/178636) for your images!\n\nCreate a [mobile sitemap](https://support.google.com/webmasters/topic/2370586?rd=1)!\n\n## Use Canonical URLs For Duplicate Content\n\nUse `<link rel=\"canonical\" ... />` when you have duplicate content on multiple pages. Remember, multiple URLs that point to the same content coint as dusplicate content. Also remember that `?page=1&subject=my-subject` and `?subject=my-subject&page=1` are different pages to web crawlers!\n\n## Setup Webmaster Tools\n\nUse [Google Webmaster Tools](http://www.google.com/webmasters/) and [Bing Webmaster Tools](http://www.bing.com/toolbox/webmaster).\n\n## Setup Google Analytics\n\nHave [Google Analytics](http://www.google.com/analytics/) set up.  Or something like [Piwik](http://piwik.org/).\n\n## Have robots.txt Configured Properly\n\nSet your [robots.txt](http://en.wikipedia.org/wiki/Robots_exclusion_standard) file properly.  Each subdomain must have its own robots.txt file.\n\n## 301 Redirect for WWW Requests\n\n`www.example.com` or `example.com` should be your primary domain, not both. Have one 301 Redirect (Moved Permanently) to the other.\n\n## Read the Search Engine Optimization Starter Guide\n\nThe [starter guide is viewable here](http://static.googleusercontent.com/external_content/untrusted_dlcp/www.google.com/en/us/webmasters/docs/search-engine-optimization-starter-guide.pdf).\n\n### The Basics\n\n- Create unique, accurate page titles. These titles are displayed in the search results. Titles reflect what is on each individual page.\n- Use the description meta tag. Google will use them as snippets for your pages.\n- Use simple to understand (ie \"friendly\") URLs.  URLs should contain relevant words. `http://mysite.com/article/basket-ball-scores` is a friendly URL.\n- Navigation is very important for search engines.  Think of you website as folders that should be easy to navigate.  Use breadcrumbs!\n- Use [sitemaps](#have-an-xml-sitemap)!  Prepare one for users and one for search engines.\n- Use 404s when necessary.\n\n### Improving Site Structure\n\n- Create a naturally flowing hierarchy.\n- Avoid having all navigation based entirely on dropdown menus.  Your website should be accessible, pages should be conntected with normal text links.\n\n### Optimizing Content\n\n- Create compelling and useful content.\n- Offer unique and exclusive content.\n- Checkout the [Keyword Planner](https://adwords.google.com/KeywordPlanner) by Google AdWords.\n- Write easy-to-read text.  Don't embed text in images\n- Create fresh content.\n- Create content for users, not for search engines.\n- Write good anchor text: `<a href=\"...\">Top Ten Basketball Shots</a>` is a descriptive link.\n- Use `alt` tags on your images! This also helps with accessibility.\n- Use descriptive filenames for your images and assets!\n- Supply an [image sitemap file](https://support.google.com/webmasters/answer/178636)!\n- Use heading tags correctly!  `<h1>` is the most important. `<h6>` is the least important.\n\n### Dealing with Crawlers\n\n- Restrict crawling with robots.txt.\n- Use `rel=\"nofollow\"` when necessary for links. Normally, user generated links through comment systems should be tagged with nofollow.\n\n### SEO for Mobile Phones\n\n- Configure mobiles sites so that they can be indexed accurately.\n- Create a [mobile sitemap](https://support.google.com/webmasters/topic/2370586?rd=1)!\n- If you use User-agents to generate your mobile site, make sure to allow `Googlebot-Mobile`!\n- If you use a seperate domain for your mobile app, redirect them to the correct page!\n\n### Promotions and Analysis\n\n- Backlinks increase the value of your site ( backlinks are links that other people post to your site).\n- Know how to utilize your social media sites.\n- Utilize the Google Webmaster Tools.\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into SEO considerations for web applications.</p>\n<h2>Use Search Engine Friendly URLs</h2>\n<p>Use <a href=\"http://en.wikipedia.org/wiki/Semantic_URL\">semantic URLs</a>.  Semantic URLs help improve usability and accessibility of a website.  The following table from the Wikipedia entry illistrates how to use semantic URLs:</p>\n<table><thead><tr><th>Non-semantic URL</th><th>Semantic URL</th></tr></thead><tbody><tr><td><code>http://example.com/index.php?page=name</code></td><td><code>http://example.com/name</code></td></tr><tr><td><code>http://example.com/index.php?page=consulting/marketing</code></td><td><code>http://example.com/consulting/marketing</code></td></tr><tr><td><code>http://example.com/products?category=2&amp;pid=25</code></td><td><code>http://example.com/products/2/25</code></td></tr><tr><td><code>http://example.com/cgi-bin/feed.cgi?feed=news&amp;frm=rss</code></td><td><code>http://example.com/news.rss</code></td></tr><tr><td><code>http://example.com/services/index.jsp?category=legal&amp;id=patents</code></td><td><code>http://example.com/services/legal/patents</code></td></tr><tr><td><code>http://example.com/kb/index.php?cat=8&amp;id=41</code></td><td><code>http://example.com/kb/8/41</code></td></tr><tr><td><code>http://example.com/index.php?mod=profiles&amp;id=193</code></td><td><code>http://example.com/profiles/193</code></td></tr></tbody></table>\n<h2>Use Hashbangs for Dynamic Content When You Normally Use Hashes</h2>\n<p>If you normally use the hash <code>#</code> character for dynamic content, change it to the hashbang <code>#!</code>.  This allows googlebot to use <code>#_REQUEST[&quot;_escaped_fragment_&quot;]</code> instead of <code>#!</code>.</p>\n<h2>Use Push State If You Can</h2>\n<p>If the user is using Firefox or Chromium, you can use <code>history.pushState( object, pageName, &quot;./?param=1&quot;);</code> so that the address bar changes, but the page does not reload.  This allows you to use <code>?</code> instead of <code>#!</code> to keep dynamic content.</p>\n<h2>Use Descriptive Links</h2>\n<p>When creating links, refrain from using &quot;this&quot; or &quot;click here&quot; or similar phrases for your links.  Link descriptions should be descriptive.</p>\n<h2>Have an XML Sitemap</h2>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>Sitemaps are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling.</p>\n</blockquote>\n<p>Have a <a href=\"http://www.sitemaps.org/\">sitemap</a> at <code>/sitemap.xml</code> for search engines to crawl.</p>\n<p>Have a <a href=\"https://support.google.com/webmasters/answer/178636\">image sitemap</a> for your images!</p>\n<p>Create a <a href=\"https://support.google.com/webmasters/topic/2370586?rd=1\">mobile sitemap</a>!</p>\n<h2>Use Canonical URLs For Duplicate Content</h2>\n<p>Use <code>&lt;link rel=&quot;canonical&quot; ... /&gt;</code> when you have duplicate content on multiple pages. Remember, multiple URLs that point to the same content coint as dusplicate content. Also remember that <code>?page=1&amp;subject=my-subject</code> and <code>?subject=my-subject&amp;page=1</code> are different pages to web crawlers!</p>\n<h2>Setup Webmaster Tools</h2>\n<p>Use <a href=\"http://www.google.com/webmasters/\">Google Webmaster Tools</a> and <a href=\"http://www.bing.com/toolbox/webmaster\">Bing Webmaster Tools</a>.</p>\n<h2>Setup Google Analytics</h2>\n<p>Have <a href=\"http://www.google.com/analytics/\">Google Analytics</a> set up.  Or something like <a href=\"http://piwik.org/\">Piwik</a>.</p>\n<h2>Have robots.txt Configured Properly</h2>\n<p>Set your <a href=\"http://en.wikipedia.org/wiki/Robots_exclusion_standard\">robots.txt</a> file properly.  Each subdomain must have its own robots.txt file.</p>\n<h2>301 Redirect for WWW Requests</h2>\n<p><code>www.example.com</code> or <code>example.com</code> should be your primary domain, not both. Have one 301 Redirect (Moved Permanently) to the other.</p>\n<h2>Read the Search Engine Optimization Starter Guide</h2>\n<p>The <a href=\"http://static.googleusercontent.com/external_content/untrusted_dlcp/www.google.com/en/us/webmasters/docs/search-engine-optimization-starter-guide.pdf\">starter guide is viewable here</a>.</p>\n<h3>The Basics</h3>\n<ul>\n<li>Create unique, accurate page titles. These titles are displayed in the search results. Titles reflect what is on each individual page.</li>\n<li>Use the description meta tag. Google will use them as snippets for your pages.</li>\n<li>Use simple to understand (ie &quot;friendly&quot;) URLs.  URLs should contain relevant words. <code>http://mysite.com/article/basket-ball-scores</code> is a friendly URL.</li>\n<li>Navigation is very important for search engines.  Think of you website as folders that should be easy to navigate.  Use breadcrumbs!</li>\n<li>Use <a href=\"#have-an-xml-sitemap\">sitemaps</a>!  Prepare one for users and one for search engines.</li>\n<li>Use 404s when necessary.</li>\n</ul>\n<h3>Improving Site Structure</h3>\n<ul>\n<li>Create a naturally flowing hierarchy.</li>\n<li>Avoid having all navigation based entirely on dropdown menus.  Your website should be accessible, pages should be conntected with normal text links.</li>\n</ul>\n<h3>Optimizing Content</h3>\n<ul>\n<li>Create compelling and useful content.</li>\n<li>Offer unique and exclusive content.</li>\n<li>Checkout the <a href=\"https://adwords.google.com/KeywordPlanner\">Keyword Planner</a> by Google AdWords.</li>\n<li>Write easy-to-read text.  Don&#x27;t embed text in images</li>\n<li>Create fresh content.</li>\n<li>Create content for users, not for search engines.</li>\n<li>Write good anchor text: <code>&lt;a href=&quot;...&quot;&gt;Top Ten Basketball Shots&lt;/a&gt;</code> is a descriptive link.</li>\n<li>Use <code>alt</code> tags on your images! This also helps with accessibility.</li>\n<li>Use descriptive filenames for your images and assets!</li>\n<li>Supply an <a href=\"https://support.google.com/webmasters/answer/178636\">image sitemap file</a>!</li>\n<li>Use heading tags correctly!  <code>&lt;h1&gt;</code> is the most important. <code>&lt;h6&gt;</code> is the least important.</li>\n</ul>\n<h3>Dealing with Crawlers</h3>\n<ul>\n<li>Restrict crawling with robots.txt.</li>\n<li>Use <code>rel=&quot;nofollow&quot;</code> when necessary for links. Normally, user generated links through comment systems should be tagged with nofollow.</li>\n</ul>\n<h3>SEO for Mobile Phones</h3>\n<ul>\n<li>Configure mobiles sites so that they can be indexed accurately.</li>\n<li>Create a <a href=\"https://support.google.com/webmasters/topic/2370586?rd=1\">mobile sitemap</a>!</li>\n<li>If you use User-agents to generate your mobile site, make sure to allow <code>Googlebot-Mobile</code>!</li>\n<li>If you use a seperate domain for your mobile app, redirect them to the correct page!</li>\n</ul>\n<h3>Promotions and Analysis</h3>\n<ul>\n<li>Backlinks increase the value of your site ( backlinks are links that other people post to your site).</li>\n<li>Know how to utilize your social media sites.</li>\n<li>Utilize the Google Webmaster Tools.</li>\n</ul>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    table: \"table\",\n    thead: \"thead\",\n    tr: \"tr\",\n    th: \"th\",\n    tbody: \"tbody\",\n    td: \"td\",\n    code: \"code\",\n    blockquote: \"blockquote\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into SEO considerations for web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Search Engine Friendly URLs\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Semantic_URL\",\n        children: \"semantic URLs\"\n      }), \".  Semantic URLs help improve usability and accessibility of a website.  The following table from the Wikipedia entry illistrates how to use semantic URLs:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            children: \"Non-semantic URL\"\n          }), _jsx(_components.th, {\n            children: \"Semantic URL\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/index.php?page=name\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/name\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/index.php?page=consulting/marketing\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/consulting/marketing\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/products?category=2&pid=25\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/products/2/25\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/cgi-bin/feed.cgi?feed=news&frm=rss\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/news.rss\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/services/index.jsp?category=legal&id=patents\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/services/legal/patents\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/kb/index.php?cat=8&id=41\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/kb/8/41\"\n            })\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/index.php?mod=profiles&id=193\"\n            })\n          }), _jsx(_components.td, {\n            children: _jsx(_components.code, {\n              children: \"http://example.com/profiles/193\"\n            })\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Hashbangs for Dynamic Content When You Normally Use Hashes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you normally use the hash \", _jsx(_components.code, {\n        children: \"#\"\n      }), \" character for dynamic content, change it to the hashbang \", _jsx(_components.code, {\n        children: \"#!\"\n      }), \".  This allows googlebot to use \", _jsx(_components.code, {\n        children: \"#_REQUEST[\\\"_escaped_fragment_\\\"]\"\n      }), \" instead of \", _jsx(_components.code, {\n        children: \"#!\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Push State If You Can\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If the user is using Firefox or Chromium, you can use \", _jsx(_components.code, {\n        children: \"history.pushState( object, pageName, \\\"./?param=1\\\");\"\n      }), \" so that the address bar changes, but the page does not reload.  This allows you to use \", _jsx(_components.code, {\n        children: \"?\"\n      }), \" instead of \", _jsx(_components.code, {\n        children: \"#!\"\n      }), \" to keep dynamic content.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Descriptive Links\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When creating links, refrain from using \\\"this\\\" or \\\"click here\\\" or similar phrases for your links.  Link descriptions should be descriptive.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Have an XML Sitemap\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Sitemaps are an easy way for webmasters to inform search engines about pages on their sites that are available for crawling.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Have a \", _jsx(_components.a, {\n        href: \"http://www.sitemaps.org/\",\n        children: \"sitemap\"\n      }), \" at \", _jsx(_components.code, {\n        children: \"/sitemap.xml\"\n      }), \" for search engines to crawl.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Have a \", _jsx(_components.a, {\n        href: \"https://support.google.com/webmasters/answer/178636\",\n        children: \"image sitemap\"\n      }), \" for your images!\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Create a \", _jsx(_components.a, {\n        href: \"https://support.google.com/webmasters/topic/2370586?rd=1\",\n        children: \"mobile sitemap\"\n      }), \"!\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Canonical URLs For Duplicate Content\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.code, {\n        children: \"<link rel=\\\"canonical\\\" ... />\"\n      }), \" when you have duplicate content on multiple pages. Remember, multiple URLs that point to the same content coint as dusplicate content. Also remember that \", _jsx(_components.code, {\n        children: \"?page=1&subject=my-subject\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"?subject=my-subject&page=1\"\n      }), \" are different pages to web crawlers!\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup Webmaster Tools\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.a, {\n        href: \"http://www.google.com/webmasters/\",\n        children: \"Google Webmaster Tools\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"http://www.bing.com/toolbox/webmaster\",\n        children: \"Bing Webmaster Tools\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup Google Analytics\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Have \", _jsx(_components.a, {\n        href: \"http://www.google.com/analytics/\",\n        children: \"Google Analytics\"\n      }), \" set up.  Or something like \", _jsx(_components.a, {\n        href: \"http://piwik.org/\",\n        children: \"Piwik\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Have robots.txt Configured Properly\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set your \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Robots_exclusion_standard\",\n        children: \"robots.txt\"\n      }), \" file properly.  Each subdomain must have its own robots.txt file.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"301 Redirect for WWW Requests\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"www.example.com\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"example.com\"\n      }), \" should be your primary domain, not both. Have one 301 Redirect (Moved Permanently) to the other.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Read the Search Engine Optimization Starter Guide\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The \", _jsx(_components.a, {\n        href: \"http://static.googleusercontent.com/external_content/untrusted_dlcp/www.google.com/en/us/webmasters/docs/search-engine-optimization-starter-guide.pdf\",\n        children: \"starter guide is viewable here\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"The Basics\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create unique, accurate page titles. These titles are displayed in the search results. Titles reflect what is on each individual page.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use the description meta tag. Google will use them as snippets for your pages.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use simple to understand (ie \\\"friendly\\\") URLs.  URLs should contain relevant words. \", _jsx(_components.code, {\n          children: \"http://mysite.com/article/basket-ball-scores\"\n        }), \" is a friendly URL.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Navigation is very important for search engines.  Think of you website as folders that should be easy to navigate.  Use breadcrumbs!\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.a, {\n          href: \"#have-an-xml-sitemap\",\n          children: \"sitemaps\"\n        }), \"!  Prepare one for users and one for search engines.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use 404s when necessary.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Improving Site Structure\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create a naturally flowing hierarchy.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Avoid having all navigation based entirely on dropdown menus.  Your website should be accessible, pages should be conntected with normal text links.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Optimizing Content\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Create compelling and useful content.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Offer unique and exclusive content.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Checkout the \", _jsx(_components.a, {\n          href: \"https://adwords.google.com/KeywordPlanner\",\n          children: \"Keyword Planner\"\n        }), \" by Google AdWords.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Write easy-to-read text.  Don't embed text in images\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create fresh content.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create content for users, not for search engines.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Write good anchor text: \", _jsx(_components.code, {\n          children: \"<a href=\\\"...\\\">Top Ten Basketball Shots</a>\"\n        }), \" is a descriptive link.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"alt\"\n        }), \" tags on your images! This also helps with accessibility.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Use descriptive filenames for your images and assets!\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Supply an \", _jsx(_components.a, {\n          href: \"https://support.google.com/webmasters/answer/178636\",\n          children: \"image sitemap file\"\n        }), \"!\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use heading tags correctly!  \", _jsx(_components.code, {\n          children: \"<h1>\"\n        }), \" is the most important. \", _jsx(_components.code, {\n          children: \"<h6>\"\n        }), \" is the least important.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Dealing with Crawlers\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Restrict crawling with robots.txt.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use \", _jsx(_components.code, {\n          children: \"rel=\\\"nofollow\\\"\"\n        }), \" when necessary for links. Normally, user generated links through comment systems should be tagged with nofollow.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"SEO for Mobile Phones\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Configure mobiles sites so that they can be indexed accurately.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Create a \", _jsx(_components.a, {\n          href: \"https://support.google.com/webmasters/topic/2370586?rd=1\",\n          children: \"mobile sitemap\"\n        }), \"!\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"If you use User-agents to generate your mobile site, make sure to allow \", _jsx(_components.code, {\n          children: \"Googlebot-Mobile\"\n        }), \"!\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"If you use a seperate domain for your mobile app, redirect them to the correct page!\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Promotions and Analysis\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Backlinks increase the value of your site ( backlinks are links that other people post to your site).\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Know how to utilize your social media sites.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Utilize the Google Webmaster Tools.\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into SEO considerations for web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into SEO considerations for web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into SEO considerations for web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-02-accessibility","date":"2015-01-02","title":"Accessibility","frontmatter":{"title":"Accessibility"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into accessibility of web applications.\n\n## Is your site accessible via screen readers?\n\nCheck to make sure your website is navigable from screen readers.\n\nIf you are using [Twitter Bootstrap](http://getbootstrap.com/), look into the [Bootstrap accessibility plugin](http://paypal.github.io/bootstrap-accessibility-plugin/).\n\nIf you are using [Foundation](http://foundation.zurb.com/), look into how [Foundation is built around accessibility](http://zurb.com/article/1337/foundation-now-helps-you-build-accessible).\n\n## Do your Positive, Negative, and Neutral Buttons look different?\n\nImage from [UX Movement](http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/).\n\nHave your Positive Action buttons and your Neutral and Negative Action buttons look distinctly different.  Notice that in the above example, not only are the colors different, but one is bordered and ther other is filled in, making it accessible to those with color-blindness.\n\n## HTML Tags\n\n* `<i>` - *\"alternate voice\"*; transliterated foreign words, technical terms, and typographically italicized text.\n* `<em>` - *\"stress emphasis\"*; something you'd pronounce differently.\n* `<b>` - *\"stylistically offset\"*; keywords and typographically emboldened text.\n* `<strong>` - *\"strong importance\"*;\n\nSee [this HTML5 Doctor post](http://html5doctor.com/i-b-em-strong-element/) for more information.\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into accessibility of web applications.</p>\n<h2>Is your site accessible via screen readers?</h2>\n<p>Check to make sure your website is navigable from screen readers.</p>\n<p>If you are using <a href=\"http://getbootstrap.com/\">Twitter Bootstrap</a>, look into the <a href=\"http://paypal.github.io/bootstrap-accessibility-plugin/\">Bootstrap accessibility plugin</a>.</p>\n<p>If you are using <a href=\"http://foundation.zurb.com/\">Foundation</a>, look into how <a href=\"http://zurb.com/article/1337/foundation-now-helps-you-build-accessible\">Foundation is built around accessibility</a>.</p>\n<h2>Do your Positive, Negative, and Neutral Buttons look different?</h2>\n<p>Image from <a href=\"http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/\">UX Movement</a>.</p>\n<p>Have your Positive Action buttons and your Neutral and Negative Action buttons look distinctly different.  Notice that in the above example, not only are the colors different, but one is bordered and ther other is filled in, making it accessible to those with color-blindness.</p>\n<h2>HTML Tags</h2>\n<ul>\n<li><code>&lt;i&gt;</code> - <em>&quot;alternate voice&quot;</em>; transliterated foreign words, technical terms, and typographically italicized text.</li>\n<li><code>&lt;em&gt;</code> - <em>&quot;stress emphasis&quot;</em>; something you&#x27;d pronounce differently.</li>\n<li><code>&lt;b&gt;</code> - <em>&quot;stylistically offset&quot;</em>; keywords and typographically emboldened text.</li>\n<li><code>&lt;strong&gt;</code> - <em>&quot;strong importance&quot;</em>;</li>\n</ul>\n<p>See <a href=\"http://html5doctor.com/i-b-em-strong-element/\">this HTML5 Doctor post</a> for more information.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    em: \"em\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into accessibility of web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Is your site accessible via screen readers?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Check to make sure your website is navigable from screen readers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using \", _jsx(_components.a, {\n        href: \"http://getbootstrap.com/\",\n        children: \"Twitter Bootstrap\"\n      }), \", look into the \", _jsx(_components.a, {\n        href: \"http://paypal.github.io/bootstrap-accessibility-plugin/\",\n        children: \"Bootstrap accessibility plugin\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using \", _jsx(_components.a, {\n        href: \"http://foundation.zurb.com/\",\n        children: \"Foundation\"\n      }), \", look into how \", _jsx(_components.a, {\n        href: \"http://zurb.com/article/1337/foundation-now-helps-you-build-accessible\",\n        children: \"Foundation is built around accessibility\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do your Positive, Negative, and Neutral Buttons look different?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Image from \", _jsx(_components.a, {\n        href: \"http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/\",\n        children: \"UX Movement\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Have your Positive Action buttons and your Neutral and Negative Action buttons look distinctly different.  Notice that in the above example, not only are the colors different, but one is bordered and ther other is filled in, making it accessible to those with color-blindness.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"HTML Tags\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"<i>\"\n        }), \" - \", _jsx(_components.em, {\n          children: \"\\\"alternate voice\\\"\"\n        }), \"; transliterated foreign words, technical terms, and typographically italicized text.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"<em>\"\n        }), \" - \", _jsx(_components.em, {\n          children: \"\\\"stress emphasis\\\"\"\n        }), \"; something you'd pronounce differently.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"<b>\"\n        }), \" - \", _jsx(_components.em, {\n          children: \"\\\"stylistically offset\\\"\"\n        }), \"; keywords and typographically emboldened text.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"<strong>\"\n        }), \" - \", _jsx(_components.em, {\n          children: \"\\\"strong importance\\\"\"\n        }), \";\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"http://html5doctor.com/i-b-em-strong-element/\",\n        children: \"this HTML5 Doctor post\"\n      }), \" for more information.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into accessibility of web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into accessibility of web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into accessibility of web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-02-performance","date":"2015-01-02","title":"Performance","frontmatter":{"title":"Performance"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into performance of web applications.\n\n## Cache Pages\n\nDynamic pages should be cached in order to improve performance.  Understand how [Web Caching](https://www.mnot.net/cache_docs/) works.\n\n## Use Cache Manifest for Offline Performance\n\nIf you would like your page to be accessible offline after a user has already visited it, look into the [Cache Manifest](http://www.w3.org/TR/2011/WD-html5-20110525/offline.html).\n\n## Optimize Images\n\nCompress and crop images for best performance.\n\n## Gzip Content\n\nMost web servers can be configured to automatically do this for you.  Look into [Yahoo's Developer Network discussion](https://developer.yahoo.com/performance/rules.html#gzip) for more information.\n\n## Concatenate Stylesheets and Script Files\n\nBefore deploying to production, concatenate Stylesheets and Script files to reduce the number of brwoser connections and improve gzip compression.  There are many solutions to concatinating and compressing CSS and JavaScript files.  You can look into [Grunt](http://gruntjs.com/) for a Node.js solution.\n\n## Use CSS Image Sprites When Possible\n\nUse [CSS Image Sprites](http://alistapart.com/article/sprites) when possible for small related images like toolbars.  The helps minimize HTTP requess and improves gzip compression.\n\n## Split Static Content to Its Own Domain\n\nStatic content like images, CSS, JavaScript, and other content should go in a separate domain that *does not use cookies*.  Cookies are sent with every request to the domain and all of its subdomains.  Use a Content Delivery Network (CDN) if possible.\n\n## Minify JavasScript\n\nMinify your JavaScript if possible.  Use the [Google Closure Compiler](https://developers.google.com/closure/compiler/) or look into [this Stackoverflow question for concatenating and minifying JavaScript files in Node](http://stackoverflow.com/questions/6539837/concat-and-minify-js-files-in-node).\n\n## Make a Favicon.ico File\n\nMake sure there’s a `favicon.ico` file in the root of the site, i.e. `/favicon.ico`. [Browsers will automatically request it](https://mathiasbynens.be/notes/rel-shortcut-icon), even if the icon isn’t mentioned in the HTML at all. If you don’t have a `/favicon.ico`, this will result in a lot of 404s, draining your server’s bandwidth.\n\nCheck your Favicon against [The Real Favicon Generator](http://realfavicongenerator.net/).  It takes care of favicons for:\n\n* Desktop Browsers\n* iOS Home Screen (Favorite icons)\n* Android Home Screen (Favorite icons)\n* Windows 8 Tile (Favorite tiles)\n* Windows Task Bar (App style icon)\n\nIt also helps you compress the icons and generates the HTML markup for you.\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into performance of web applications.</p>\n<h2>Cache Pages</h2>\n<p>Dynamic pages should be cached in order to improve performance.  Understand how <a href=\"https://www.mnot.net/cache_docs/\">Web Caching</a> works.</p>\n<h2>Use Cache Manifest for Offline Performance</h2>\n<p>If you would like your page to be accessible offline after a user has already visited it, look into the <a href=\"http://www.w3.org/TR/2011/WD-html5-20110525/offline.html\">Cache Manifest</a>.</p>\n<h2>Optimize Images</h2>\n<p>Compress and crop images for best performance.</p>\n<h2>Gzip Content</h2>\n<p>Most web servers can be configured to automatically do this for you.  Look into <a href=\"https://developer.yahoo.com/performance/rules.html#gzip\">Yahoo&#x27;s Developer Network discussion</a> for more information.</p>\n<h2>Concatenate Stylesheets and Script Files</h2>\n<p>Before deploying to production, concatenate Stylesheets and Script files to reduce the number of brwoser connections and improve gzip compression.  There are many solutions to concatinating and compressing CSS and JavaScript files.  You can look into <a href=\"http://gruntjs.com/\">Grunt</a> for a Node.js solution.</p>\n<h2>Use CSS Image Sprites When Possible</h2>\n<p>Use <a href=\"http://alistapart.com/article/sprites\">CSS Image Sprites</a> when possible for small related images like toolbars.  The helps minimize HTTP requess and improves gzip compression.</p>\n<h2>Split Static Content to Its Own Domain</h2>\n<p>Static content like images, CSS, JavaScript, and other content should go in a separate domain that <em>does not use cookies</em>.  Cookies are sent with every request to the domain and all of its subdomains.  Use a Content Delivery Network (CDN) if possible.</p>\n<h2>Minify JavasScript</h2>\n<p>Minify your JavaScript if possible.  Use the <a href=\"https://developers.google.com/closure/compiler/\">Google Closure Compiler</a> or look into <a href=\"http://stackoverflow.com/questions/6539837/concat-and-minify-js-files-in-node\">this Stackoverflow question for concatenating and minifying JavaScript files in Node</a>.</p>\n<h2>Make a Favicon.ico File</h2>\n<p>Make sure there’s a <code>favicon.ico</code> file in the root of the site, i.e. <code>/favicon.ico</code>. <a href=\"https://mathiasbynens.be/notes/rel-shortcut-icon\">Browsers will automatically request it</a>, even if the icon isn’t mentioned in the HTML at all. If you don’t have a <code>/favicon.ico</code>, this will result in a lot of 404s, draining your server’s bandwidth.</p>\n<p>Check your Favicon against <a href=\"http://realfavicongenerator.net/\">The Real Favicon Generator</a>.  It takes care of favicons for:</p>\n<ul>\n<li>Desktop Browsers</li>\n<li>iOS Home Screen (Favorite icons)</li>\n<li>Android Home Screen (Favorite icons)</li>\n<li>Windows 8 Tile (Favorite tiles)</li>\n<li>Windows Task Bar (App style icon)</li>\n</ul>\n<p>It also helps you compress the icons and generates the HTML markup for you.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    em: \"em\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into performance of web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Cache Pages\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Dynamic pages should be cached in order to improve performance.  Understand how \", _jsx(_components.a, {\n        href: \"https://www.mnot.net/cache_docs/\",\n        children: \"Web Caching\"\n      }), \" works.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Cache Manifest for Offline Performance\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you would like your page to be accessible offline after a user has already visited it, look into the \", _jsx(_components.a, {\n        href: \"http://www.w3.org/TR/2011/WD-html5-20110525/offline.html\",\n        children: \"Cache Manifest\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Optimize Images\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Compress and crop images for best performance.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Gzip Content\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Most web servers can be configured to automatically do this for you.  Look into \", _jsx(_components.a, {\n        href: \"https://developer.yahoo.com/performance/rules.html#gzip\",\n        children: \"Yahoo's Developer Network discussion\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Concatenate Stylesheets and Script Files\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Before deploying to production, concatenate Stylesheets and Script files to reduce the number of brwoser connections and improve gzip compression.  There are many solutions to concatinating and compressing CSS and JavaScript files.  You can look into \", _jsx(_components.a, {\n        href: \"http://gruntjs.com/\",\n        children: \"Grunt\"\n      }), \" for a Node.js solution.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use CSS Image Sprites When Possible\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Use \", _jsx(_components.a, {\n        href: \"http://alistapart.com/article/sprites\",\n        children: \"CSS Image Sprites\"\n      }), \" when possible for small related images like toolbars.  The helps minimize HTTP requess and improves gzip compression.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Split Static Content to Its Own Domain\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Static content like images, CSS, JavaScript, and other content should go in a separate domain that \", _jsx(_components.em, {\n        children: \"does not use cookies\"\n      }), \".  Cookies are sent with every request to the domain and all of its subdomains.  Use a Content Delivery Network (CDN) if possible.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Minify JavasScript\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Minify your JavaScript if possible.  Use the \", _jsx(_components.a, {\n        href: \"https://developers.google.com/closure/compiler/\",\n        children: \"Google Closure Compiler\"\n      }), \" or look into \", _jsx(_components.a, {\n        href: \"http://stackoverflow.com/questions/6539837/concat-and-minify-js-files-in-node\",\n        children: \"this Stackoverflow question for concatenating and minifying JavaScript files in Node\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Make a Favicon.ico File\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Make sure there’s a \", _jsx(_components.code, {\n        children: \"favicon.ico\"\n      }), \" file in the root of the site, i.e. \", _jsx(_components.code, {\n        children: \"/favicon.ico\"\n      }), \". \", _jsx(_components.a, {\n        href: \"https://mathiasbynens.be/notes/rel-shortcut-icon\",\n        children: \"Browsers will automatically request it\"\n      }), \", even if the icon isn’t mentioned in the HTML at all. If you don’t have a \", _jsx(_components.code, {\n        children: \"/favicon.ico\"\n      }), \", this will result in a lot of 404s, draining your server’s bandwidth.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Check your Favicon against \", _jsx(_components.a, {\n        href: \"http://realfavicongenerator.net/\",\n        children: \"The Real Favicon Generator\"\n      }), \".  It takes care of favicons for:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Desktop Browsers\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"iOS Home Screen (Favorite icons)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Android Home Screen (Favorite icons)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Windows 8 Tile (Favorite tiles)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Windows Task Bar (App style icon)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"It also helps you compress the icons and generates the HTML markup for you.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into performance of web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into performance of web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into performance of web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-01-maintenance","date":"2015-01-01","title":"Maintenance","frontmatter":{"title":"Maintenance"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into maintenance of web applications.\n\n## Setup an Error/Bug Reporting Solution\n\nUse Github's issue tracker, or JIRA, or anything.  Keeping track of issues, enhancements, and bugs in progress helps tremendously down the line.\n\n## Setup a Contact Form\n\nSimple email forms or using other services like Reddit or even forums can help users give you suggestions and criticism.\n\n## Documentation\n\nDocument how the application works, the deployment progress, and anything else you can!  Those who do future maintenance will thank you.\n\n## Backup/Restore Strategy\n\nHave a backup strategy and a restore strategy.\n\n## Version Control Your Project\n\nUse Subversion, Mecurial, Git to version control your files.  Preferably Git ;) .\n\n## Setup Unit Tests/Acceptance Tests/Regression Test etc\n\nGetting any type of tests is very useful, especially acceptance testing and integration testing.\n\n## Setup Logging\n\nLog any application errors, user errors, exceptions, etc.\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into maintenance of web applications.</p>\n<h2>Setup an Error/Bug Reporting Solution</h2>\n<p>Use Github&#x27;s issue tracker, or JIRA, or anything.  Keeping track of issues, enhancements, and bugs in progress helps tremendously down the line.</p>\n<h2>Setup a Contact Form</h2>\n<p>Simple email forms or using other services like Reddit or even forums can help users give you suggestions and criticism.</p>\n<h2>Documentation</h2>\n<p>Document how the application works, the deployment progress, and anything else you can!  Those who do future maintenance will thank you.</p>\n<h2>Backup/Restore Strategy</h2>\n<p>Have a backup strategy and a restore strategy.</p>\n<h2>Version Control Your Project</h2>\n<p>Use Subversion, Mecurial, Git to version control your files.  Preferably Git ;) .</p>\n<h2>Setup Unit Tests/Acceptance Tests/Regression Test etc</h2>\n<p>Getting any type of tests is very useful, especially acceptance testing and integration testing.</p>\n<h2>Setup Logging</h2>\n<p>Log any application errors, user errors, exceptions, etc.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into maintenance of web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup an Error/Bug Reporting Solution\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use Github's issue tracker, or JIRA, or anything.  Keeping track of issues, enhancements, and bugs in progress helps tremendously down the line.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup a Contact Form\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Simple email forms or using other services like Reddit or even forums can help users give you suggestions and criticism.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Documentation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Document how the application works, the deployment progress, and anything else you can!  Those who do future maintenance will thank you.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Backup/Restore Strategy\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Have a backup strategy and a restore strategy.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Version Control Your Project\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use Subversion, Mecurial, Git to version control your files.  Preferably Git ;) .\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup Unit Tests/Acceptance Tests/Regression Test etc\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Getting any type of tests is very useful, especially acceptance testing and integration testing.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Setup Logging\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Log any application errors, user errors, exceptions, etc.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into maintenance of web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into maintenance of web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into maintenance of web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2014-12-30-restful-interfaces","date":"2014-12-30","title":"RESTful Interfaces","frontmatter":{"title":"RESTful Interfaces","tags":["rest","web","issues"]},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into RESTful interfaces and how to design them.\n\nRESTful APIs are a common way for applications to be able to communicate with each other.  An important part about RESTful APIs is that they are *consistent*.  Naming, verbage, actions, and errors should be consistent within your API and with how other APIs behave.\n\nHere are some tips and questions that you should ask yourself when developing an API.\n\n## Are you using PUT and POST correctly?\n\nBoth PUT and POST can be used for creating. You do not need to support both PUT and POST. Consider the following design decisions:\n\n- Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.\n- PUT is idempotent, so if you PUT an object twice, it has no effect. This is a nice property, so I would use PUT when possible.\n- You can update or create a resource with PUT with the same object URL\n- With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.\n\nSee [this StackOverflow question for more information](http://stackoverflow.com/questions/630453/put-vs-post-in-rest).\n\n## Are you using appropriate verbs?\n\nWhen making a REST API, your verbs are your request types, not actual verbs in your URL!  Your URLs should use nouns, not verbs!  Remember to use the plural form for multiple results.\n\nUse your URLs to specify your objects.  Here are some examples of RESTful style requests:\n\n**Obtain 1 Question**\n\n```\nGET /questions/<question>\n```\n\n**Obtain All Questions**\n\n```\nGET /questions\n```\n\n**Append/Update Question**\n\n```\nPOST /questions/<existing_question>\n```\n\n**Create a New Question**\n\n```\nPUT /questions/<new_question>\n```\n\n**Overwrite a Question**\n\n```\nPUT /questions/<existing_question>\n```\n\n**Delete Question**\n\n```\nDELETE /questions/<existing_question>\n```\n\n## Nested Resources should be exenstions, not entirely different queries\n\nIf you want to get answers to a question, using the above examples as a starting point, the URL should be:\n\n```\nGET /questions/1/answers\n```\n\nThis is nested routing and it helps for a cleaner design.\n\n## Do you have a plan to version your API?\n\nThere are different ways to version your API, but it's nice to plan ahead in order for consumers of your API to be prepared.\n\n[Github uses](https://developer.github.com/v3/media/#request-specific-version) the `Accept` HTTP header to pass the desired version to the API.\n\nAnother less common method is to version the application in the URL: `/api/v1/...`.\n\n## Paging\n\nLarge result sets should be paginated, you can use [the Github method](https://developer.github.com/guides/traversing-with-pagination/) for indicated next and previous pages of results using the `Link` HTTP header.\n\n## HTTP Status Codes\n\n[This list of HTTP Status codes](https://bourgeois.me/rest/) and their meaning is very helpful for knowing what HTTP Status your API should be returning.  It has been duplicated here as a backup:\n\n### Success codes\n\n- `201 Created` should be used when creating content (INSERT)\n- `202 Accepted` should be used when a request is queued for background processing (async tasks),\n- `204 No Content` should be used when the request was properly executed but no content was returned (a good example would be when you delete something).\n\n### Client error codes\n\n- `400 Bad Request` should be used when there was an error while processing the request payload (malformed JSON, for instance).\n- `401 Unauthorized` should be used when a request is not authenticiated (wrong access token, or username or password).\n- `403 Forbidden` should be used when the request is successfully authenticiated (see 401), but the action was forbidden.\n- `406 Not Acceptable` should be used when the requested format is not available (for instance, when requesting an XML resource from a JSON only server).\n- `410 Gone Should` be returned when the requested resource is permenantely deleted and will never be available again.\n- `422 Unprocesable entity` Could be used when there was a validation error while creating an object.\nA more complete list of status codes can be found in [RFC2616](http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).\n\n## Further Reading\n\n- [API Design Ebook](https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf)\n- [Best Practices for a Pragmatic RESTful API](http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api)\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into RESTful interfaces and how to design them.</p>\n<p>RESTful APIs are a common way for applications to be able to communicate with each other.  An important part about RESTful APIs is that they are <em>consistent</em>.  Naming, verbage, actions, and errors should be consistent within your API and with how other APIs behave.</p>\n<p>Here are some tips and questions that you should ask yourself when developing an API.</p>\n<h2>Are you using PUT and POST correctly?</h2>\n<p>Both PUT and POST can be used for creating. You do not need to support both PUT and POST. Consider the following design decisions:</p>\n<ul>\n<li>Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.</li>\n<li>PUT is idempotent, so if you PUT an object twice, it has no effect. This is a nice property, so I would use PUT when possible.</li>\n<li>You can update or create a resource with PUT with the same object URL</li>\n<li>With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.</li>\n</ul>\n<p>See <a href=\"http://stackoverflow.com/questions/630453/put-vs-post-in-rest\">this StackOverflow question for more information</a>.</p>\n<h2>Are you using appropriate verbs?</h2>\n<p>When making a REST API, your verbs are your request types, not actual verbs in your URL!  Your URLs should use nouns, not verbs!  Remember to use the plural form for multiple results.</p>\n<p>Use your URLs to specify your objects.  Here are some examples of RESTful style requests:</p>\n<p><strong>Obtain 1 Question</strong></p>\n<div class=\"overflow-auto\"><pre><code>GET /questions/&lt;question&gt;\n</code></pre></div>\n<p><strong>Obtain All Questions</strong></p>\n<div class=\"overflow-auto\"><pre><code>GET /questions\n</code></pre></div>\n<p><strong>Append/Update Question</strong></p>\n<div class=\"overflow-auto\"><pre><code>POST /questions/&lt;existing_question&gt;\n</code></pre></div>\n<p><strong>Create a New Question</strong></p>\n<div class=\"overflow-auto\"><pre><code>PUT /questions/&lt;new_question&gt;\n</code></pre></div>\n<p><strong>Overwrite a Question</strong></p>\n<div class=\"overflow-auto\"><pre><code>PUT /questions/&lt;existing_question&gt;\n</code></pre></div>\n<p><strong>Delete Question</strong></p>\n<div class=\"overflow-auto\"><pre><code>DELETE /questions/&lt;existing_question&gt;\n</code></pre></div>\n<h2>Nested Resources should be exenstions, not entirely different queries</h2>\n<p>If you want to get answers to a question, using the above examples as a starting point, the URL should be:</p>\n<div class=\"overflow-auto\"><pre><code>GET /questions/1/answers\n</code></pre></div>\n<p>This is nested routing and it helps for a cleaner design.</p>\n<h2>Do you have a plan to version your API?</h2>\n<p>There are different ways to version your API, but it&#x27;s nice to plan ahead in order for consumers of your API to be prepared.</p>\n<p><a href=\"https://developer.github.com/v3/media/#request-specific-version\">Github uses</a> the <code>Accept</code> HTTP header to pass the desired version to the API.</p>\n<p>Another less common method is to version the application in the URL: <code>/api/v1/...</code>.</p>\n<h2>Paging</h2>\n<p>Large result sets should be paginated, you can use <a href=\"https://developer.github.com/guides/traversing-with-pagination/\">the Github method</a> for indicated next and previous pages of results using the <code>Link</code> HTTP header.</p>\n<h2>HTTP Status Codes</h2>\n<p><a href=\"https://bourgeois.me/rest/\">This list of HTTP Status codes</a> and their meaning is very helpful for knowing what HTTP Status your API should be returning.  It has been duplicated here as a backup:</p>\n<h3>Success codes</h3>\n<ul>\n<li><code>201 Created</code> should be used when creating content (INSERT)</li>\n<li><code>202 Accepted</code> should be used when a request is queued for background processing (async tasks),</li>\n<li><code>204 No Content</code> should be used when the request was properly executed but no content was returned (a good example would be when you delete something).</li>\n</ul>\n<h3>Client error codes</h3>\n<ul>\n<li><code>400 Bad Request</code> should be used when there was an error while processing the request payload (malformed JSON, for instance).</li>\n<li><code>401 Unauthorized</code> should be used when a request is not authenticiated (wrong access token, or username or password).</li>\n<li><code>403 Forbidden</code> should be used when the request is successfully authenticiated (see 401), but the action was forbidden.</li>\n<li><code>406 Not Acceptable</code> should be used when the requested format is not available (for instance, when requesting an XML resource from a JSON only server).</li>\n<li><code>410 Gone Should</code> be returned when the requested resource is permenantely deleted and will never be available again.</li>\n<li><code>422 Unprocesable entity</code> Could be used when there was a validation error while creating an object.\nA more complete list of status codes can be found in <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">RFC2616</a>.</li>\n</ul>\n<h2>Further Reading</h2>\n<ul>\n<li><a href=\"https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf\">API Design Ebook</a></li>\n<li><a href=\"http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\">Best Practices for a Pragmatic RESTful API</a></li>\n</ul>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    em: \"em\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    strong: \"strong\",\n    pre: \"pre\",\n    code: \"code\",\n    h3: \"h3\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into RESTful interfaces and how to design them.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"RESTful APIs are a common way for applications to be able to communicate with each other.  An important part about RESTful APIs is that they are \", _jsx(_components.em, {\n        children: \"consistent\"\n      }), \".  Naming, verbage, actions, and errors should be consistent within your API and with how other APIs behave.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Here are some tips and questions that you should ask yourself when developing an API.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Are you using PUT and POST correctly?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Both PUT and POST can be used for creating. You do not need to support both PUT and POST. Consider the following design decisions:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Do you name your URL objects you create explicitly, or let the server decide? If you name them then use PUT. If you let the server decide then use POST.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"PUT is idempotent, so if you PUT an object twice, it has no effect. This is a nice property, so I would use PUT when possible.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"You can update or create a resource with PUT with the same object URL\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"With POST you can have 2 requests coming in at the same time making modifications to a URL, and they may update different parts of the object.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"http://stackoverflow.com/questions/630453/put-vs-post-in-rest\",\n        children: \"this StackOverflow question for more information\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Are you using appropriate verbs?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When making a REST API, your verbs are your request types, not actual verbs in your URL!  Your URLs should use nouns, not verbs!  Remember to use the plural form for multiple results.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Use your URLs to specify your objects.  Here are some examples of RESTful style requests:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Obtain 1 Question\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"GET /questions/<question>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Obtain All Questions\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"GET /questions\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Append/Update Question\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"POST /questions/<existing_question>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Create a New Question\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"PUT /questions/<new_question>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Overwrite a Question\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"PUT /questions/<existing_question>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Delete Question\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"DELETE /questions/<existing_question>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Nested Resources should be exenstions, not entirely different queries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If you want to get answers to a question, using the above examples as a starting point, the URL should be:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"GET /questions/1/answers\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is nested routing and it helps for a cleaner design.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do you have a plan to version your API?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are different ways to version your API, but it's nice to plan ahead in order for consumers of your API to be prepared.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://developer.github.com/v3/media/#request-specific-version\",\n        children: \"Github uses\"\n      }), \" the \", _jsx(_components.code, {\n        children: \"Accept\"\n      }), \" HTTP header to pass the desired version to the API.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Another less common method is to version the application in the URL: \", _jsx(_components.code, {\n        children: \"/api/v1/...\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Paging\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Large result sets should be paginated, you can use \", _jsx(_components.a, {\n        href: \"https://developer.github.com/guides/traversing-with-pagination/\",\n        children: \"the Github method\"\n      }), \" for indicated next and previous pages of results using the \", _jsx(_components.code, {\n        children: \"Link\"\n      }), \" HTTP header.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"HTTP Status Codes\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"https://bourgeois.me/rest/\",\n        children: \"This list of HTTP Status codes\"\n      }), \" and their meaning is very helpful for knowing what HTTP Status your API should be returning.  It has been duplicated here as a backup:\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Success codes\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"201 Created\"\n        }), \" should be used when creating content (INSERT)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"202 Accepted\"\n        }), \" should be used when a request is queued for background processing (async tasks),\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"204 No Content\"\n        }), \" should be used when the request was properly executed but no content was returned (a good example would be when you delete something).\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Client error codes\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"400 Bad Request\"\n        }), \" should be used when there was an error while processing the request payload (malformed JSON, for instance).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"401 Unauthorized\"\n        }), \" should be used when a request is not authenticiated (wrong access token, or username or password).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"403 Forbidden\"\n        }), \" should be used when the request is successfully authenticiated (see 401), but the action was forbidden.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"406 Not Acceptable\"\n        }), \" should be used when the requested format is not available (for instance, when requesting an XML resource from a JSON only server).\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"410 Gone Should\"\n        }), \" be returned when the requested resource is permenantely deleted and will never be available again.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"422 Unprocesable entity\"\n        }), \" Could be used when there was a validation error while creating an object.\\nA more complete list of status codes can be found in \", _jsx(_components.a, {\n          href: \"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\",\n          children: \"RFC2616\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Further Reading\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://pages.apigee.com/rs/apigee/images/api-design-ebook-2012-03.pdf\",\n          children: \"API Design Ebook\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api\",\n          children: \"Best Practices for a Pragmatic RESTful API\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into RESTful interfaces and how to design them.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into RESTful interfaces and how to design them.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into RESTful interfaces and how to design them.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"}],"hasNextPage":true,"hasPreviousPage":false},"__N_SSG":true}