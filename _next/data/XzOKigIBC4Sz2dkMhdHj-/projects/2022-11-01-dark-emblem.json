{"pageProps":{"headTitle":"Dark Emblem - idmontie's Portfolio","project":{"slug":"2022-11-01-dark-emblem","date":"2022-11-01","title":"Dark Emblem","frontmatter":{"title":"Dark Emblem","image":"/images/project-dark-emblem.png","description":"WAX Blockchain NFT Card Game\n","language_tags":["C++","node","typescript"],"github_link":"https://github.com/dark-emblem"},"contentRaw":"\nDark Emblem was a WAX Blockchain project that used Smart Contracts and AtomicAssets\nto create an interactive Card Game on the blockchain. Users could purchase packs\nwith WAX, open those packs through the UI, and dynamically created images for\neach NFT would be created.\n","contentHTML":"<p>Dark Emblem was a WAX Blockchain project that used Smart Contracts and AtomicAssets\nto create an interactive Card Game on the blockchain. Users could purchase packs\nwith WAX, open those packs through the UI, and dynamically created images for\neach NFT would be created.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Dark Emblem was a WAX Blockchain project that used Smart Contracts and AtomicAssets\\nto create an interactive Card Game on the blockchain. Users could purchase packs\\nwith WAX, open those packs through the UI, and dynamically created images for\\neach NFT would be created.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nDark Emblem was a WAX Blockchain project that used Smart Contracts and AtomicAssets","excerptHTML":"<p>Dark Emblem was a WAX Blockchain project that used Smart Contracts and AtomicAssets</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Dark Emblem was a WAX Blockchain project that used Smart Contracts and AtomicAssets\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"next":{"slug":"2020-05-18-clarity-hub-infer","date":"2020-05-18","title":"Clarity Hub Infer API","frontmatter":{"title":"Clarity Hub Infer API","image":"/images/clarityhub-infer-splash.png","description":"NLP infer API to create and label utterances.\n","language_tags":["node"],"framework_tags":["Universal Sentence Encoder","serverless","swagger"],"github_link":"https://github.com/clarityhub/chapi-api-infer"},"contentRaw":"\nThe Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\n\nThis API used the Universal Sentence Encoder (USE) to create embeddings from utterances, then used cosine similarity to find the most similar utterances to a given utterance.\n","contentHTML":"<p>The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.</p>\n<p>This API used the Universal Sentence Encoder (USE) to create embeddings from utterances, then used cosine similarity to find the most similar utterances to a given utterance.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This API used the Universal Sentence Encoder (USE) to create embeddings from utterances, then used cosine similarity to find the most similar utterances to a given utterance.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThe Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.","excerptHTML":"<p>The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"previous":{"slug":"2023-08-04-lacework","date":"2023-08-04","title":"Lacework","frontmatter":{"title":"Lacework","image":"/images/project-lacework.png","description":"Cloud security monitoring at scale.\n","language_tags":["node","javascript","typescript","java"],"github_link":"https://github.com/lacework"},"contentRaw":"\nWhile at Lacework, I worked on implementing entire new product lines for their cloud security offerings. This included architecting, implementing, and continuously delivering new features for Alerting, Identity Management, Resource Management, and Vulnerability Management on the web UI.\n","contentHTML":"<p>While at Lacework, I worked on implementing entire new product lines for their cloud security offerings. This included architecting, implementing, and continuously delivering new features for Alerting, Identity Management, Resource Management, and Vulnerability Management on the web UI.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"While at Lacework, I worked on implementing entire new product lines for their cloud security offerings. This included architecting, implementing, and continuously delivering new features for Alerting, Identity Management, Resource Management, and Vulnerability Management on the web UI.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nWhile at Lacework, I worked on implementing entire new product lines for their cloud security offerings. This included architecting, implementing, and continuously delivering new features for Alerting, Identity Management, Resource Management, and Vulnerability Management on the web UI.","excerptHTML":"<p>While at Lacework, I worked on implementing entire new product lines for their cloud security offerings. This included architecting, implementing, and continuously delivering new features for Alerting, Identity Management, Resource Management, and Vulnerability Management on the web UI.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"While at Lacework, I worked on implementing entire new product lines for their cloud security offerings. This included architecting, implementing, and continuously delivering new features for Alerting, Identity Management, Resource Management, and Vulnerability Management on the web UI.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"}},"__N_SSG":true}