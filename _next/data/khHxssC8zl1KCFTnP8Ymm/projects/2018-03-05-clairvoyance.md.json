{"pageProps":{"headTitle":"Clairvoyance - idmontie's Portfolio","project":{"slug":"2018-03-05-clairvoyance.md","date":"2018-03-05","title":"Clairvoyance","frontmatter":{"title":"Clairvoyance","description":"Clairvoyance (renamed to Clarity Hub) finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\n","image":"/images/project-clarity-hub.png","view_link":"https://clarityhub.io","github_link":"https://github.com/clarityhub","language_tags":["javascript","es2015+","css"],"framework_tags":["aws","react","serverless","redux"]},"contentRaw":"\nClairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\n\nClairvoyance was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.\n","contentHTML":"<p>Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.</p>\n<p>Clairvoyance was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.</p>","contentCode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Clairvoyance was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nClairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.","excerptHTML":"<p>Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.</p>","excerptCode":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":[]},"next":{"slug":"2016-08-21-react-cornea.md","date":"2016-08-21","title":"react-cornea","frontmatter":{"title":"react-cornea","description":"A testing utility for generating visual diffs of your React components.\n","image":"/images/project-react-cornea.png","github_link":"https://github.com/gios-asu/react-cornea","language_tags":["javascript"],"framework_tags":["react"]},"contentRaw":"\nI made react-cornea to do image diffing of react components for CI/CD environments.\n","contentHTML":"<p>I made react-cornea to do image diffing of react components for CI/CD environments.</p>","contentCode":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"I made react-cornea to do image diffing of react components for CI/CD environments.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nI made react-cornea to do image diffing of react components for CI/CD environments.","excerptHTML":"<p>I made react-cornea to do image diffing of react components for CI/CD environments.</p>","excerptCode":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"I made react-cornea to do image diffing of react components for CI/CD environments.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":[]},"previous":{"slug":"2020-05-18-clarity-hub-infer","date":"2020-05-18","title":"Clarity Hub Infer API","frontmatter":{"title":"Clarity Hub Infer API","image":"/images/clarityhub-infer-splash.png","description":"NLP infer API to create and label utterances.\n","language_tags":["node"],"framework_tags":["Universal Sentence Encoder","serverless","swagger"],"github_link":"https://github.com/clarityhub/chapi-api-infer"},"contentRaw":"\nThe Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\n\nThis API used the Universal Sentence Encoder (USE) to create embeddings from utterances, then used cosine similarity to find the most similar utterances to a given utterance.\n","contentHTML":"<p>The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.</p>\n<p>This API used the Universal Sentence Encoder (USE) to create embeddings from utterances, then used cosine similarity to find the most similar utterances to a given utterance.</p>","contentCode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This API used the Universal Sentence Encoder (USE) to create embeddings from utterances, then used cosine similarity to find the most similar utterances to a given utterance.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThe Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.","excerptHTML":"<p>The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.</p>","excerptCode":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":[]}},"__N_SSG":true}