{"pageProps":{"headTitle":"Forbidden Typescript: Using Object.create to clone - idmontie's Portfolio","headKeywords":"typescript","post":{"slug":"2023-08-07-object-create","date":"2023-08-07","title":"Forbidden Typescript: Using Object.create to clone","frontmatter":{"title":"Forbidden Typescript: Using Object.create to clone","tags":["typescript"]},"contentRaw":"\nIn “Javascript: The Definitive Guide” there is an example that uses `Object.inherit` to inherit the prototype change. JavaScript defines a method `Object.create` that creates a new object using the given argument as the prototype of that object. Translating the examples from The Definitive Guide to Typescript, it looks like:\n\n```tsx\nfunction inherit<T extends object>(obj: T): T {\n    return Object.create(obj);\n}\n\nclass MyObject {\n    public a: number;\n\n    constructor(a: number) {\n        this.a = a;\n    }\n}\nconst myObject = new MyObject(123);\nconst myClone = inherit(myObject);\n```\n\n[Playground Link](https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABDMALApgJxlAPAFUXQA8p0wATAZ0TgCMArdaAPgAp6GAuRfASh6EA3gChE4xJnRQQmJAHlGzKADoIUgIZkOjPgG4RAXxEiIAGw1UaAWQCeiptESiJiAA4g6ZmBEQaeYCAAtnRYBmISEAhUUJgg0HCYbP6IgSFYfM4RruJQqDBUKhqIALx+Bq7GxlFgMYhB9kpOZWDoAO6Idg7KbACMAEwAzPqm0VD1tgDCZgjopchoWDhsDd3QI6O1cGboKjMA5iuNjlD6iAD0585+PAODiNXR27sHR9OzZ5fOj1s7e3CHBrvVoLGIaSDoODATrHZSfK6xEDoERAA)\n\nHowever, we lied. Notice that in the above code, the `myClone` object was created without `a` being initialized.\n\n```tsx\nconsole.log(myObject); // { a: 123 }\nconsole.log(myClone); // {}\nconsole.log(myClone instanceof MyObject); // true\n```\n\nThis creates what is known as a *type-hole*: the Typescript compiler will not report any bugs when we try to use `myClone.a`.  That’s because we used `Object.create` which returns the `any` type. In the above example, if we tried to use `myClone.a` in a case where we expected a `number`, but got `undefined`, we can end up with runtime bugs that should have been caught by the compiler.\n\nWe can make the typings a little more clear by doing the following:\n\n```tsx\nfunction inherit<T extends object>(obj: T): Partial<T> {\n    return Object.create(obj);\n}\n```\n\nNow Typescript will report that the value of `myClone.a` might be undefined.\n\nLet’s improve this a bit more and create an object that inherits and freezes the data in the given object:\n\n```tsx\nfunction inheritAndFreeze<T extends object>(obj: T, values: Partial<T>): Readonly<Partial<T>> {\n    const properties: PropertyDescriptorMap = {};\n\n    Object.keys(obj).forEach((unsafeKey) => {\n        const key = unsafeKey as keyof T;\n        properties[key] = {\n            value: values[key] ?? undefined,\n            writable: false,\n            configurable: false,\n        };\n    })\n\n    return Object.create(obj, properties);\n}\n\nclass MyObject {\n    public a: number;\n\n    constructor(a: number) {\n        this.a = a;\n    }\n}\n\nconst myObject = new MyObject(123);\nconst myClone = inheritAndFreeze(myObject, { a: 123 });\n\nconsole.log(myClone); // { a: 123 }\nmyClone.a = 999; // Would throw \"Cannot assign to read only property 'a' of object '#<MyObject>' \"\n```\n\n[Playground Link](https://www.typescriptlang.org/play?ssl=29&ssc=102&pln=1&pc=1#code/GYVwdgxgLglg9mABDMALApgJxlAgmAEwDFN10AvdAHgBVF0APKdQgZ0TgCMArdaAPgAUXbgC5ENADSIAbgEMANiHStxABTmZYi2vwCU4gEro5BBAoCeVDVpg6a-fogDeAKEQfEEBKyiIADphw-liwKupBIVoWACIqENj+UHCYALJy-ogAvC4AvgDcru6eAPI8fFAAdADW6Baswjx6lcApAKJyEKiCguCscsDoANJ1etlObp5TXj5+tRbZiH0Dw3WIcuzzcMAShdOegcGhMCoA2vMAuouT+9PySuji98qs53VXAPwfS4TowCjoAiSYq3TwAd2wUDknAUj0QwEUrHQwIAkGj0d4wP8AOYgTDQ2HiBEKJHA0EFEGIXJ6IpTUhQPFIMq8aCVBImZiNbjSQ5RMKsPSFXJFCAKDbsVIWZkVFyU-wgGEwCDrcRgEAAW04WEKlMxvkwIGgKUEclVGq1mDGN32UFQMFYlTkizke08wuFrj1fnVUvK0EWYHQYMQkul0EEAEYAEwAZkFntmiB9AGEFAh0IsUBhIfhiKQKOhBD6w1BpM4VYhozGqfGE2BWHBYZU09iixZU+nBYgAPTdkO+ll+ZzCvWN9DNuCtlNpwOOru9yux1wL6fpx2LACcW-yPb7AHU4CAFARELagsGAETJuRgMBwPzimDYpDJRCkUwcMCWAKRUILADkcj-hwOwiDK-4AMRUKGfpQPwwEXkAA)\n\nIf we didn’t mark the return value as `Readonly<Partial<T>>`, and instead just had `Partial<T>` we would once again have a type-hole and `myClone.a = 999;` would be allowed by Typescript, but would throw an exception at runtime because property a is read only as a runtime constraint.\n\n## The Takeaway\n\nLet’s step back and really look at what `inherit` was doing. All it gave us was a template object, and if you read on [MDN about Inheritance and prototype chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain):\n\n> You may also see some legacy code using `[Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)` to build the inheritance chain. However, because this reassigns the `prototype` property and removes the `[constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)` property, it can be more error-prone, while performance gains may not be apparent if the constructors haven't created any instances yet.\n\nThe key here is to be wary of using utility functions built into the language that return the `any` type. Be careful what the Typescript constraints are and make sure you don’t have any type-holes when you are using these generic functions.\n","contentHTML":"<p>In “Javascript: The Definitive Guide” there is an example that uses <code>Object.inherit</code> to inherit the prototype change. JavaScript defines a method <code>Object.create</code> that creates a new object using the given argument as the prototype of that object. Translating the examples from The Definitive Guide to Typescript, it looks like:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-tsx\">function inherit&lt;T extends object&gt;(obj: T): T {\n    return Object.create(obj);\n}\n\nclass MyObject {\n    public a: number;\n\n    constructor(a: number) {\n        this.a = a;\n    }\n}\nconst myObject = new MyObject(123);\nconst myClone = inherit(myObject);\n</code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABDMALApgJxlAPAFUXQA8p0wATAZ0TgCMArdaAPgAp6GAuRfASh6EA3gChE4xJnRQQmJAHlGzKADoIUgIZkOjPgG4RAXxEiIAGw1UaAWQCeiptESiJiAA4g6ZmBEQaeYCAAtnRYBmISEAhUUJgg0HCYbP6IgSFYfM4RruJQqDBUKhqIALx+Bq7GxlFgMYhB9kpOZWDoAO6Idg7KbACMAEwAzPqm0VD1tgDCZgjopchoWDhsDd3QI6O1cGboKjMA5iuNjlD6iAD0585+PAODiNXR27sHR9OzZ5fOj1s7e3CHBrvVoLGIaSDoODATrHZSfK6xEDoERAA\">Playground Link</a></p>\n<p>However, we lied. Notice that in the above code, the <code>myClone</code> object was created without <code>a</code> being initialized.</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-tsx\">console.log(myObject); // { a: 123 }\nconsole.log(myClone); // {}\nconsole.log(myClone instanceof MyObject); // true\n</code></pre></div>\n<p>This creates what is known as a <em>type-hole</em>: the Typescript compiler will not report any bugs when we try to use <code>myClone.a</code>.  That’s because we used <code>Object.create</code> which returns the <code>any</code> type. In the above example, if we tried to use <code>myClone.a</code> in a case where we expected a <code>number</code>, but got <code>undefined</code>, we can end up with runtime bugs that should have been caught by the compiler.</p>\n<p>We can make the typings a little more clear by doing the following:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-tsx\">function inherit&lt;T extends object&gt;(obj: T): Partial&lt;T&gt; {\n    return Object.create(obj);\n}\n</code></pre></div>\n<p>Now Typescript will report that the value of <code>myClone.a</code> might be undefined.</p>\n<p>Let’s improve this a bit more and create an object that inherits and freezes the data in the given object:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-tsx\">function inheritAndFreeze&lt;T extends object&gt;(obj: T, values: Partial&lt;T&gt;): Readonly&lt;Partial&lt;T&gt;&gt; {\n    const properties: PropertyDescriptorMap = {};\n\n    Object.keys(obj).forEach((unsafeKey) =&gt; {\n        const key = unsafeKey as keyof T;\n        properties[key] = {\n            value: values[key] ?? undefined,\n            writable: false,\n            configurable: false,\n        };\n    })\n\n    return Object.create(obj, properties);\n}\n\nclass MyObject {\n    public a: number;\n\n    constructor(a: number) {\n        this.a = a;\n    }\n}\n\nconst myObject = new MyObject(123);\nconst myClone = inheritAndFreeze(myObject, { a: 123 });\n\nconsole.log(myClone); // { a: 123 }\nmyClone.a = 999; // Would throw &quot;Cannot assign to read only property &#x27;a&#x27; of object &#x27;#&lt;MyObject&gt;&#x27; &quot;\n</code></pre></div>\n<p><a href=\"https://www.typescriptlang.org/play?ssl=29&amp;ssc=102&amp;pln=1&amp;pc=1#code/GYVwdgxgLglg9mABDMALApgJxlAgmAEwDFN10AvdAHgBVF0APKdQgZ0TgCMArdaAPgAUXbgC5ENADSIAbgEMANiHStxABTmZYi2vwCU4gEro5BBAoCeVDVpg6a-fogDeAKEQfEEBKyiIADphw-liwKupBIVoWACIqENj+UHCYALJy-ogAvC4AvgDcru6eAPI8fFAAdADW6Baswjx6lcApAKJyEKiCguCscsDoANJ1etlObp5TXj5+tRbZiH0Dw3WIcuzzcMAShdOegcGhMCoA2vMAuouT+9PySuji98qs53VXAPwfS4TowCjoAiSYq3TwAd2wUDknAUj0QwEUrHQwIAkGj0d4wP8AOYgTDQ2HiBEKJHA0EFEGIXJ6IpTUhQPFIMq8aCVBImZiNbjSQ5RMKsPSFXJFCAKDbsVIWZkVFyU-wgGEwCDrcRgEAAW04WEKlMxvkwIGgKUEclVGq1mDGN32UFQMFYlTkizke08wuFrj1fnVUvK0EWYHQYMQkul0EEAEYAEwAZkFntmiB9AGEFAh0IsUBhIfhiKQKOhBD6w1BpM4VYhozGqfGE2BWHBYZU09iixZU+nBYgAPTdkO+ll+ZzCvWN9DNuCtlNpwOOru9yux1wL6fpx2LACcW-yPb7AHU4CAFARELagsGAETJuRgMBwPzimDYpDJRCkUwcMCWAKRUILADkcj-hwOwiDK-4AMRUKGfpQPwwEXkAA\">Playground Link</a></p>\n<p>If we didn’t mark the return value as <code>Readonly&lt;Partial&lt;T&gt;&gt;</code>, and instead just had <code>Partial&lt;T&gt;</code> we would once again have a type-hole and <code>myClone.a = 999;</code> would be allowed by Typescript, but would throw an exception at runtime because property a is read only as a runtime constraint.</p>\n<h2>The Takeaway</h2>\n<p>Let’s step back and really look at what <code>inherit</code> was doing. All it gave us was a template object, and if you read on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">MDN about Inheritance and prototype chaining</a>:</p>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>You may also see some legacy code using <code>[Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)</code> to build the inheritance chain. However, because this reassigns the <code>prototype</code> property and removes the <code>[constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)</code> property, it can be more error-prone, while performance gains may not be apparent if the constructors haven&#x27;t created any instances yet.</p>\n</blockquote>\n<p>The key here is to be wary of using utility functions built into the language that return the <code>any</code> type. Be careful what the Typescript constraints are and make sure you don’t have any type-holes when you are using these generic functions.</p>","contentCode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    em: \"em\",\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"In “Javascript: The Definitive Guide” there is an example that uses \", _jsx(_components.code, {\n        children: \"Object.inherit\"\n      }), \" to inherit the prototype change. JavaScript defines a method \", _jsx(_components.code, {\n        children: \"Object.create\"\n      }), \" that creates a new object using the given argument as the prototype of that object. Translating the examples from The Definitive Guide to Typescript, it looks like:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"function inherit<T extends object>(obj: T): T {\\n    return Object.create(obj);\\n}\\n\\nclass MyObject {\\n    public a: number;\\n\\n    constructor(a: number) {\\n        this.a = a;\\n    }\\n}\\nconst myObject = new MyObject(123);\\nconst myClone = inherit(myObject);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABDMALApgJxlAPAFUXQA8p0wATAZ0TgCMArdaAPgAp6GAuRfASh6EA3gChE4xJnRQQmJAHlGzKADoIUgIZkOjPgG4RAXxEiIAGw1UaAWQCeiptESiJiAA4g6ZmBEQaeYCAAtnRYBmISEAhUUJgg0HCYbP6IgSFYfM4RruJQqDBUKhqIALx+Bq7GxlFgMYhB9kpOZWDoAO6Idg7KbACMAEwAzPqm0VD1tgDCZgjopchoWDhsDd3QI6O1cGboKjMA5iuNjlD6iAD0585+PAODiNXR27sHR9OzZ5fOj1s7e3CHBrvVoLGIaSDoODATrHZSfK6xEDoERAA\",\n        children: \"Playground Link\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"However, we lied. Notice that in the above code, the \", _jsx(_components.code, {\n        children: \"myClone\"\n      }), \" object was created without \", _jsx(_components.code, {\n        children: \"a\"\n      }), \" being initialized.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"console.log(myObject); // { a: 123 }\\nconsole.log(myClone); // {}\\nconsole.log(myClone instanceof MyObject); // true\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This creates what is known as a \", _jsx(_components.em, {\n        children: \"type-hole\"\n      }), \": the Typescript compiler will not report any bugs when we try to use \", _jsx(_components.code, {\n        children: \"myClone.a\"\n      }), \".  That’s because we used \", _jsx(_components.code, {\n        children: \"Object.create\"\n      }), \" which returns the \", _jsx(_components.code, {\n        children: \"any\"\n      }), \" type. In the above example, if we tried to use \", _jsx(_components.code, {\n        children: \"myClone.a\"\n      }), \" in a case where we expected a \", _jsx(_components.code, {\n        children: \"number\"\n      }), \", but got \", _jsx(_components.code, {\n        children: \"undefined\"\n      }), \", we can end up with runtime bugs that should have been caught by the compiler.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can make the typings a little more clear by doing the following:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"function inherit<T extends object>(obj: T): Partial<T> {\\n    return Object.create(obj);\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Now Typescript will report that the value of \", _jsx(_components.code, {\n        children: \"myClone.a\"\n      }), \" might be undefined.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Let’s improve this a bit more and create an object that inherits and freezes the data in the given object:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"function inheritAndFreeze<T extends object>(obj: T, values: Partial<T>): Readonly<Partial<T>> {\\n    const properties: PropertyDescriptorMap = {};\\n\\n    Object.keys(obj).forEach((unsafeKey) => {\\n        const key = unsafeKey as keyof T;\\n        properties[key] = {\\n            value: values[key] ?? undefined,\\n            writable: false,\\n            configurable: false,\\n        };\\n    })\\n\\n    return Object.create(obj, properties);\\n}\\n\\nclass MyObject {\\n    public a: number;\\n\\n    constructor(a: number) {\\n        this.a = a;\\n    }\\n}\\n\\nconst myObject = new MyObject(123);\\nconst myClone = inheritAndFreeze(myObject, { a: 123 });\\n\\nconsole.log(myClone); // { a: 123 }\\nmyClone.a = 999; // Would throw \\\"Cannot assign to read only property 'a' of object '#<MyObject>' \\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://www.typescriptlang.org/play?ssl=29&ssc=102&pln=1&pc=1#code/GYVwdgxgLglg9mABDMALApgJxlAgmAEwDFN10AvdAHgBVF0APKdQgZ0TgCMArdaAPgAUXbgC5ENADSIAbgEMANiHStxABTmZYi2vwCU4gEro5BBAoCeVDVpg6a-fogDeAKEQfEEBKyiIADphw-liwKupBIVoWACIqENj+UHCYALJy-ogAvC4AvgDcru6eAPI8fFAAdADW6Baswjx6lcApAKJyEKiCguCscsDoANJ1etlObp5TXj5+tRbZiH0Dw3WIcuzzcMAShdOegcGhMCoA2vMAuouT+9PySuji98qs53VXAPwfS4TowCjoAiSYq3TwAd2wUDknAUj0QwEUrHQwIAkGj0d4wP8AOYgTDQ2HiBEKJHA0EFEGIXJ6IpTUhQPFIMq8aCVBImZiNbjSQ5RMKsPSFXJFCAKDbsVIWZkVFyU-wgGEwCDrcRgEAAW04WEKlMxvkwIGgKUEclVGq1mDGN32UFQMFYlTkizke08wuFrj1fnVUvK0EWYHQYMQkul0EEAEYAEwAZkFntmiB9AGEFAh0IsUBhIfhiKQKOhBD6w1BpM4VYhozGqfGE2BWHBYZU09iixZU+nBYgAPTdkO+ll+ZzCvWN9DNuCtlNpwOOru9yux1wL6fpx2LACcW-yPb7AHU4CAFARELagsGAETJuRgMBwPzimDYpDJRCkUwcMCWAKRUILADkcj-hwOwiDK-4AMRUKGfpQPwwEXkAA\",\n        children: \"Playground Link\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we didn’t mark the return value as \", _jsx(_components.code, {\n        children: \"Readonly<Partial<T>>\"\n      }), \", and instead just had \", _jsx(_components.code, {\n        children: \"Partial<T>\"\n      }), \" we would once again have a type-hole and \", _jsx(_components.code, {\n        children: \"myClone.a = 999;\"\n      }), \" would be allowed by Typescript, but would throw an exception at runtime because property a is read only as a runtime constraint.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The Takeaway\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let’s step back and really look at what \", _jsx(_components.code, {\n        children: \"inherit\"\n      }), \" was doing. All it gave us was a template object, and if you read on \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\",\n        children: \"MDN about Inheritance and prototype chaining\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsxs(_components.p, {\n        children: [\"You may also see some legacy code using \", _jsx(_components.code, {\n          children: \"[Object.create()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create)\"\n        }), \" to build the inheritance chain. However, because this reassigns the \", _jsx(_components.code, {\n          children: \"prototype\"\n        }), \" property and removes the \", _jsx(_components.code, {\n          children: \"[constructor](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor)\"\n        }), \" property, it can be more error-prone, while performance gains may not be apparent if the constructors haven't created any instances yet.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The key here is to be wary of using utility functions built into the language that return the \", _jsx(_components.code, {\n        children: \"any\"\n      }), \" type. Be careful what the Typescript constraints are and make sure you don’t have any type-holes when you are using these generic functions.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nIn “Javascript: The Definitive Guide” there is an example that uses `Object.inherit` to inherit the prototype change. JavaScript defines a method `Object.create` that creates a new object using the given argument as the prototype of that object. Translating the examples from The Definitive Guide to Typescript, it looks like:","excerptHTML":"<p>In “Javascript: The Definitive Guide” there is an example that uses <code>Object.inherit</code> to inherit the prototype change. JavaScript defines a method <code>Object.create</code> that creates a new object using the given argument as the prototype of that object. Translating the examples from The Definitive Guide to Typescript, it looks like:</p>","excerptCode":"\"use strict\";\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    p: \"p\",\n    ...props.components\n  };\n  return _jsxs(_components.p, {\n    children: [\"In “Javascript: The Definitive Guide” there is an example that uses \", _jsx(_components.code, {\n      children: \"Object.inherit\"\n    }), \" to inherit the prototype change. JavaScript defines a method \", _jsx(_components.code, {\n      children: \"Object.create\"\n    }), \" that creates a new object using the given argument as the prototype of that object. Translating the examples from The Definitive Guide to Typescript, it looks like:\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["typescript"]},"previous":{"slug":"2023-08-09-enumerating-properties","title":"Forbidden Typescript: Enumerating Properties"},"next":{"slug":"2023-08-06-data-on-the-wire","title":"Data on the Wire"}},"__N_SSG":true}