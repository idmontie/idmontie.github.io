{"pageProps":{"headTitle":"react-cornea - idmontie's Portfolio","project":{"slug":"2016-08-21-react-cornea.md","date":"2016-08-21","title":"react-cornea","frontmatter":{"title":"react-cornea","description":"A testing utility for generating visual diffs of your React components.\n","image":"/images/project-react-cornea.png","github_link":"https://github.com/gios-asu/react-cornea","language_tags":["javascript"],"framework_tags":["react"]},"contentRaw":"\nI made react-cornea to do image diffing of react components for CI/CD environments.\n","contentHTML":"<p>I made react-cornea to do image diffing of react components for CI/CD environments.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"I made react-cornea to do image diffing of react components for CI/CD environments.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nI made react-cornea to do image diffing of react components for CI/CD environments.","excerptHTML":"<p>I made react-cornea to do image diffing of react components for CI/CD environments.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"I made react-cornea to do image diffing of react components for CI/CD environments.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":[]},"next":{"slug":"2016-01-29-gild-game.md","date":"2016-01-29","title":"GILD Game","frontmatter":{"title":"GILD Game","description":"GILD is a 2 player game made in Meteor for Global Game Jam 2016.\n","image":"/images/project-gild-game.png","view_link":"http://gild.meteor.com/","github_link":"https://github.com/CapsuleCat/GildGame","language_tags":["javascript es2015+","css"],"framework_tags":["meteor","react","reflux","bootstrap"]},"contentRaw":"\nGILD is a 2 player game. One person creates a Room, and the other player joins iit. Both players take turns summoning monsters using their given ingredients and having the mosnters fight. First to 3 wins is the victor!\n\n(P.S. if you don't have anyone else to play with, you can access the site in two different browsers, or one browser using Incognito Mode).\n\nThe team that put this awesome game together in 48 hours was:\n\n- Gustavo\n- Ivan\n- Lauren\n- Daniela\n\nGo team!","contentHTML":"<p>GILD is a 2 player game. One person creates a Room, and the other player joins iit. Both players take turns summoning monsters using their given ingredients and having the mosnters fight. First to 3 wins is the victor!</p>\n<p>(P.S. if you don&#x27;t have anyone else to play with, you can access the site in two different browsers, or one browser using Incognito Mode).</p>\n<p>The team that put this awesome game together in 48 hours was:</p>\n<ul>\n<li>Gustavo</li>\n<li>Ivan</li>\n<li>Lauren</li>\n<li>Daniela</li>\n</ul>\n<p>Go team!</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"GILD is a 2 player game. One person creates a Room, and the other player joins iit. Both players take turns summoning monsters using their given ingredients and having the mosnters fight. First to 3 wins is the victor!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"(P.S. if you don't have anyone else to play with, you can access the site in two different browsers, or one browser using Incognito Mode).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The team that put this awesome game together in 48 hours was:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Gustavo\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Ivan\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Lauren\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Daniela\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Go team!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nGILD is a 2 player game. One person creates a Room, and the other player joins iit. Both players take turns summoning monsters using their given ingredients and having the mosnters fight. First to 3 wins is the victor!","excerptHTML":"<p>GILD is a 2 player game. One person creates a Room, and the other player joins iit. Both players take turns summoning monsters using their given ingredients and having the mosnters fight. First to 3 wins is the victor!</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"GILD is a 2 player game. One person creates a Room, and the other player joins iit. Both players take turns summoning monsters using their given ingredients and having the mosnters fight. First to 3 wins is the victor!\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":[]},"previous":{"slug":"2018-03-05-clairvoyance.md","date":"2018-03-05","title":"Clairvoyance","frontmatter":{"title":"Clairvoyance","description":"Clairvoyance (renamed to Clarity Hub) finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\n","image":"/images/project-clarity-hub.png","view_link":"https://clarityhub.io","github_link":"https://github.com/clarityhub","language_tags":["javascript","es2015+","css"],"framework_tags":["aws","react","serverless","redux"]},"contentRaw":"\nClairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\n\nClairvoyance was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.\n","contentHTML":"<p>Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.</p>\n<p>Clairvoyance was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Clairvoyance was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nClairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.","excerptHTML":"<p>Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Clairvoyance finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":[]}},"__N_SSG":true}