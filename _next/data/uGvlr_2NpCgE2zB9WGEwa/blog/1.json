{"pageProps":{"posts":[{"slug":"2023-04-02-dark-emblem-rewrite","date":"2023-04-02","title":"Dark Emblem Rewrite","frontmatter":{"title":"Dark Emblem Rewrite"},"contentRaw":"\nDark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.\n\nTo support all of the functionality, I created a WAX contract, written in C++, that I deployed to the WAX Blockchain. This contract handled the creation and storage of packs and cards, along with defining an in-game currency DREM.\n\nThere was also a server that would sync with the changes on the Blockchain and provide some additional metadata on top of that. While Blockchains like ETH have stable public APIs that can be used to query data from the Blockchain through 3rd party vendors, WAX does not have the same maturity there. This meant that we would need to proxy requests that would normally be made to a WAX API mode through our servers instead.\n\nI also created a UI application to interact with the server and the Blockchain. The infrastructure ends up looking like:\n\n```mermaid\ngraph LR\n  WAX --> Dfuse\n Dfuse --> Listener(Dark Emblem Listener Service)\n  Listener --> Redis\n  Redis --> API(Dark Emblem API)\n  API --> Dapp\n  WAXEndpoint(WAX Endpoint) --> Dapp\n```\n\nOne of the first steps to interacting with the dapp is to sign in. The authentication flow is similar to an oauth sign in where we let the user sign in with a third party authenticator and then issue a challenge for the user to verify they are who they say they are. At this point we issue a JWT for further API requests.\n\n```mermaid\nsequenceDiagram\n  Dapp->>+3rdPartyAuthenticator: Request sign in\n  3rdPartyAuthenticator->>+Dapp: Wallet name\n  Dapp->>+DarkEmblemAPI: Request nonce\n  DarkEmblemAPI->>+Dapp: Send nonce\n  Dapp->>+3rdPartyAuthenticator: Sign nonce\n  3rdPartyAuthenticator->>+Dapp: Signed nonce\n  Dapp->>+DarkEmblemAPI: Send signed nonce\n  DarkEmblemAPI->>+Dapp: JWT\n```\n\nOnce a user is logged in, they can fully interact with the Dark Emblem WAX contract via the UI. They can purchase packs, open them to get cards, and then use those cards in the Dark Emblem universe. The UI lets users combine Hero cards together to “Ascend” them into a new card. Or they can burn 3 Equipment cards to “Transmogrify” them into a single, better equipment card.\n\nUsers can also participate in Raids, where they stake their cards to defeat an enemy monster – gaining $DREM and XP when they beat the monster.\n\nDapp Schemas and Atomic Assets\n\n```mermaid\nclassDiagram\n  class Card {\n    name: string\n  img: string\n  traits: number[]\n  matronid: number\n  sireid: number\n  rank: number\n  packid: string\n  cardtype: string\n  website: string\n  twitter: string\n  mintedat: number\n  rarity: string\n  cooldown: number\n  xp: number\n  }\n  class Raid {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n  class Staked {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n\n```\n\nThe Dark Emblem project involves a lot of moving parts, and I’d love to dive deeper into each technical aspect in future blog posts.\n\n## Additional reading\n\n* [Dark Emblem Blog Announcement](https://www.darkemblem.com/blog/post/2023-04-02-new-site-released)\n* [Capsule Cat Announcement](https://capsulecat.com/blog/04-02-2023-dark-emblem-update/)\n","contentHTML":"<p>Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.</p>\n<p>To support all of the functionality, I created a WAX contract, written in C++, that I deployed to the WAX Blockchain. This contract handled the creation and storage of packs and cards, along with defining an in-game currency DREM.</p>\n<p>There was also a server that would sync with the changes on the Blockchain and provide some additional metadata on top of that. While Blockchains like ETH have stable public APIs that can be used to query data from the Blockchain through 3rd party vendors, WAX does not have the same maturity there. This meant that we would need to proxy requests that would normally be made to a WAX API mode through our servers instead.</p>\n<p>I also created a UI application to interact with the server and the Blockchain. The infrastructure ends up looking like:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  WAX --&gt; Dfuse\n Dfuse --&gt; Listener(Dark Emblem Listener Service)\n  Listener --&gt; Redis\n  Redis --&gt; API(Dark Emblem API)\n  API --&gt; Dapp\n  WAXEndpoint(WAX Endpoint) --&gt; Dapp\">graph LR\n  WAX --&gt; Dfuse\n Dfuse --&gt; Listener(Dark Emblem Listener Service)\n  Listener --&gt; Redis\n  Redis --&gt; API(Dark Emblem API)\n  API --&gt; Dapp\n  WAXEndpoint(WAX Endpoint) --&gt; Dapp</div></div>\n<p>One of the first steps to interacting with the dapp is to sign in. The authentication flow is similar to an oauth sign in where we let the user sign in with a third party authenticator and then issue a challenge for the user to verify they are who they say they are. At this point we issue a JWT for further API requests.</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"sequenceDiagram\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Request sign in\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Wallet name\n  Dapp-&gt;&gt;+DarkEmblemAPI: Request nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: Send nonce\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Sign nonce\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Signed nonce\n  Dapp-&gt;&gt;+DarkEmblemAPI: Send signed nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: JWT\">sequenceDiagram\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Request sign in\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Wallet name\n  Dapp-&gt;&gt;+DarkEmblemAPI: Request nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: Send nonce\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Sign nonce\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Signed nonce\n  Dapp-&gt;&gt;+DarkEmblemAPI: Send signed nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: JWT</div></div>\n<p>Once a user is logged in, they can fully interact with the Dark Emblem WAX contract via the UI. They can purchase packs, open them to get cards, and then use those cards in the Dark Emblem universe. The UI lets users combine Hero cards together to “Ascend” them into a new card. Or they can burn 3 Equipment cards to “Transmogrify” them into a single, better equipment card.</p>\n<p>Users can also participate in Raids, where they stake their cards to defeat an enemy monster – gaining $DREM and XP when they beat the monster.</p>\n<p>Dapp Schemas and Atomic Assets</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"classDiagram\n  class Card {\n    name: string\n  img: string\n  traits: number[]\n  matronid: number\n  sireid: number\n  rank: number\n  packid: string\n  cardtype: string\n  website: string\n  twitter: string\n  mintedat: number\n  rarity: string\n  cooldown: number\n  xp: number\n  }\n  class Raid {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n  class Staked {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n\">classDiagram\n  class Card {\n    name: string\n  img: string\n  traits: number[]\n  matronid: number\n  sireid: number\n  rank: number\n  packid: string\n  cardtype: string\n  website: string\n  twitter: string\n  mintedat: number\n  rarity: string\n  cooldown: number\n  xp: number\n  }\n  class Raid {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n  class Staked {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n</div></div>\n<p>The Dark Emblem project involves a lot of moving parts, and I’d love to dive deeper into each technical aspect in future blog posts.</p>\n<h2>Additional reading</h2>\n<ul>\n<li><a href=\"https://www.darkemblem.com/blog/post/2023-04-02-new-site-released\">Dark Emblem Blog Announcement</a></li>\n<li><a href=\"https://capsulecat.com/blog/04-02-2023-dark-emblem-update/\">Capsule Cat Announcement</a></li>\n</ul>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To support all of the functionality, I created a WAX contract, written in C++, that I deployed to the WAX Blockchain. This contract handled the creation and storage of packs and cards, along with defining an in-game currency DREM.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There was also a server that would sync with the changes on the Blockchain and provide some additional metadata on top of that. While Blockchains like ETH have stable public APIs that can be used to query data from the Blockchain through 3rd party vendors, WAX does not have the same maturity there. This meant that we would need to proxy requests that would normally be made to a WAX API mode through our servers instead.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I also created a UI application to interact with the server and the Blockchain. The infrastructure ends up looking like:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  WAX --> Dfuse\\n Dfuse --> Listener(Dark Emblem Listener Service)\\n  Listener --> Redis\\n  Redis --> API(Dark Emblem API)\\n  API --> Dapp\\n  WAXEndpoint(WAX Endpoint) --> Dapp\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the first steps to interacting with the dapp is to sign in. The authentication flow is similar to an oauth sign in where we let the user sign in with a third party authenticator and then issue a challenge for the user to verify they are who they say they are. At this point we issue a JWT for further API requests.\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"sequenceDiagram\\n  Dapp->>+3rdPartyAuthenticator: Request sign in\\n  3rdPartyAuthenticator->>+Dapp: Wallet name\\n  Dapp->>+DarkEmblemAPI: Request nonce\\n  DarkEmblemAPI->>+Dapp: Send nonce\\n  Dapp->>+3rdPartyAuthenticator: Sign nonce\\n  3rdPartyAuthenticator->>+Dapp: Signed nonce\\n  Dapp->>+DarkEmblemAPI: Send signed nonce\\n  DarkEmblemAPI->>+Dapp: JWT\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once a user is logged in, they can fully interact with the Dark Emblem WAX contract via the UI. They can purchase packs, open them to get cards, and then use those cards in the Dark Emblem universe. The UI lets users combine Hero cards together to “Ascend” them into a new card. Or they can burn 3 Equipment cards to “Transmogrify” them into a single, better equipment card.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Users can also participate in Raids, where they stake their cards to defeat an enemy monster – gaining $DREM and XP when they beat the monster.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dapp Schemas and Atomic Assets\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"classDiagram\\n  class Card {\\n    name: string\\n  img: string\\n  traits: number[]\\n  matronid: number\\n  sireid: number\\n  rank: number\\n  packid: string\\n  cardtype: string\\n  website: string\\n  twitter: string\\n  mintedat: number\\n  rarity: string\\n  cooldown: number\\n  xp: number\\n  }\\n  class Raid {\\n  asset_id: number\\n  owner: name\\n  staked_at: number\\n  raid_id: number\\n  }\\n  class Staked {\\n  asset_id: number\\n  owner: name\\n  staked_at: number\\n  raid_id: number\\n  }\\n\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Dark Emblem project involves a lot of moving parts, and I’d love to dive deeper into each technical aspect in future blog posts.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Additional reading\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.darkemblem.com/blog/post/2023-04-02-new-site-released\",\n          children: \"Dark Emblem Blog Announcement\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://capsulecat.com/blog/04-02-2023-dark-emblem-update/\",\n          children: \"Capsule Cat Announcement\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","excerptRaw":"\nDark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.","excerptHTML":"<p>Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2023-01-24-chat-gpt-doesnt-understand","date":"2023-01-24","title":"ChatGPT Doesn't Understand","frontmatter":{"title":"ChatGPT Doesn't Understand"},"contentRaw":"\nLooks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether [ChatGPT can play 20 questions](https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff). The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.\n\nI attempted to do 20 questions with ChatGPT using a different prompt:\n\n*Me: I would like to play a game. It's called twenty questions. You will ask me one question at a time and I will answer it. The goal is for you guess the thing I am thinking about.*\n\n*ChatGPT: Sure, I'd be happy to play \"Twenty Questions\" with you. Please go ahead and think of something, and I will start asking my first question.*\n\n*Me: I am ready*\n\n*ChatGPT: Great, here is my first question: Is the thing you are thinking of an object?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object something that you can hold in your hand?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object something that you would typically find in a kitchen?*\n\n*Me: No*\n\n*ChatGPT: Is the object something that you would use for transportation?*\n\n*Me: No*\n\n*ChatGPT: Is the object something that you would use for entertainment or leisure?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object a musical instrument?*\n\n*Me: No*\n\n*ChatGPT: Is the object a type of game or puzzle?*\n\n*Me: No*\n\n*ChatGPT: Is the object a piece of technology such as a phone or computer?*\n\n*Me: No*\n\n*ChatGPT: Is the object a book or magazine?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object a novel or a collection of short stories?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object a specific book that is widely known and read?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object \"To Kill a Mockingbird\" by Harper Lee?*\n\n*Me: No*\n\n*ChatGPT: I'm sorry, I'm running out of ideas. Can you give me a hint or tell me the answer?*\n\nSeems like we hit a wall here with twenty questions, but ChatGPT is very close, so I decided to give a hint.\n\n*Me: You are on the right track. It is by Walt Whitman*\n\n*ChatGPT: Is the object \"Leaves of Grass\" by Walt Whitman?*\n\n*Me: Yes! Congratulations!*\n\n*ChatGPT: Thank you! I'm glad I was able to guess the object you were thinking of. It was fun playing \"Twenty Questions\" with you. Let me know if you want to play again sometime.*\n\n---\n\nI’ve been keeping an eye on how other people are using ChatGPT, and [prompt engineering](https://en.wikipedia.org/wiki/Prompt_engineering) is one of the more fascinating aspects around how people are communicating with the AI. Prompt engineering plays a key role in communicating with models like ChatGPT. Carefully crafting prompts can help maximize the quality of the reponse. However, it is important to keep in mind that, like any AI model, ChatGPT has its own set of limitations.\n\nSo I was curious when I read that “[ChatGPT can’t write sentences that end in a specific letter](https://www.reddit.com/r/ChatGPT/comments/101e454/chatgpt_cant_write_sentences_that_end_with_a/)”. Is this a real limitation of ChatGPT, or maybe this was just a poor prompt.\n\nSo let’s start with a very simple question to ChatGPT:\n\n*Me: Can you write a sentence that ends with the letter \"a\"?*\n\n*ChatGPT: The cat sat on the mat.*\n\n*Me: That sentence does not end in the letter \"a\". Can you write a sentence that ends in the letter \"a\"?*\n\n*ChatGPT: I can't think of anything right now, but the word \"America\" ends with letter \"a\".*\n\n*Me: Great, write a sentence that ends in that word. That will then satisfy the original question.*\n\n*ChatGPT: The land of the free, and the home of the brave, America.*\n\nOkay, that does technically end in the letter a, but the sentence seems very strange.\n\n*Me: That isn't a very coherent sentence. Can you write a sentence that ends in the letter \"a\"?*\n\n*ChatGPT: I am sorry for the confusion, here is a sentence that ends with the letter \"a\" - \"He saw the drama unfold on the stage, it was quite the spectacle, a.”*\n\nLooks like we are going off the rails here. Let’s try a different approach:\n\n*Me: Write a sentence that ends in a word that ends with the letter \"a\".*\n\n*ChatGPT: The sun was setting over the horizon, painting the sky with shades of orange and red, a spectacle to behold and end the day with.*\n\nI’m going to ask ChatGPT to tell me a prompt to feed back to itself. I’ve found this useful for resetting context when having long conversations. Or if ChatGPT gets into weird states like the above response.\n\n*Me: Can you tell me how to write a prompt for you that would actually get you to write a sentence that ends in the letter \"a\".*\n\n*ChatGPT: Sure, to get me to write a sentence that ends in the letter \"a\" you could provide a prompt like: \"Write a sentence that ends with a word that ends with the letter 'a'\" or \"Can you write a sentence with a word ending in 'a' at the end of the sentence?\" . This makes it clear that the sentence should end in a word ending with the letter 'a'.*\n\n*Me: Can you write a sentence with a word ending in 'a' at the end of the sentence?*\n\n*ChatGPT: The sky was clear and blue, not a cloud in sight, perfect for a day out at the parka.*\n\n---\n\nWhile ChatGPT is great at forming sentences and even code, it seems like it has no understanding and hasn’t been trained on letters, syllables, or the concept of sentences. I've seen others get ChatGPT to create poems, but it has no concept of why words would rhyme. It can give great answers to questions, but doesn’t understand how to count how many words are in its response.\n\nOne Redditor in the link above mentions that ChatGPT fails at ASCII art. I’ve tried getting the AI to print ASCII art before, and I’ll leave you with part of a conversation I’ve had with it. This appears to be the best ASCII art I could get it to print, even after having a long conversation where I provided different ASCII art examples:\n\n*Me: Can you make ASCII art? Show me a picture of a cat.*\n\n*ChatGPT: Sure! Here is a picture of a cat using ASCII art:*\n\n```\n /\\_/\\\n( o.o )\n >^<\n\n```\n\n*I hope you like it! Is there anything else I can help with?*\n\n*Me: Can you make it more detailed*\n\n*ChatGPT: Certainly! Here is a more detailed version of an ASCII art cat:*\n\n```\n /\\_/\\\n( o.o )\n  >^<\n  | |\n  || ||\n  \\\\ //\n  // \\\\\n  \\\\_//\n  /   \\\n /     \\\n\n```\n\nWith new language models coming out, it's important to recognize what the limitations\nof the AI are. Poor responses can be a result of poorly written prompts, but there\nare times, like with letters in words with ChatGPT, where the AI just doesn't have\nthe capability to understand the question.\n","contentHTML":"<p>Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether <a href=\"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\">ChatGPT can play 20 questions</a>. The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.</p>\n<p>I attempted to do 20 questions with ChatGPT using a different prompt:</p>\n<p><em>Me: I would like to play a game. It&#x27;s called twenty questions. You will ask me one question at a time and I will answer it. The goal is for you guess the thing I am thinking about.</em></p>\n<p><em>ChatGPT: Sure, I&#x27;d be happy to play &quot;Twenty Questions&quot; with you. Please go ahead and think of something, and I will start asking my first question.</em></p>\n<p><em>Me: I am ready</em></p>\n<p><em>ChatGPT: Great, here is my first question: Is the thing you are thinking of an object?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object something that you can hold in your hand?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object something that you would typically find in a kitchen?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object something that you would use for transportation?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object something that you would use for entertainment or leisure?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object a musical instrument?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object a type of game or puzzle?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object a piece of technology such as a phone or computer?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object a book or magazine?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object a novel or a collection of short stories?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object a specific book that is widely known and read?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object &quot;To Kill a Mockingbird&quot; by Harper Lee?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: I&#x27;m sorry, I&#x27;m running out of ideas. Can you give me a hint or tell me the answer?</em></p>\n<p>Seems like we hit a wall here with twenty questions, but ChatGPT is very close, so I decided to give a hint.</p>\n<p><em>Me: You are on the right track. It is by Walt Whitman</em></p>\n<p><em>ChatGPT: Is the object &quot;Leaves of Grass&quot; by Walt Whitman?</em></p>\n<p><em>Me: Yes! Congratulations!</em></p>\n<p><em>ChatGPT: Thank you! I&#x27;m glad I was able to guess the object you were thinking of. It was fun playing &quot;Twenty Questions&quot; with you. Let me know if you want to play again sometime.</em></p>\n<hr/>\n<p>I’ve been keeping an eye on how other people are using ChatGPT, and <a href=\"https://en.wikipedia.org/wiki/Prompt_engineering\">prompt engineering</a> is one of the more fascinating aspects around how people are communicating with the AI. Prompt engineering plays a key role in communicating with models like ChatGPT. Carefully crafting prompts can help maximize the quality of the reponse. However, it is important to keep in mind that, like any AI model, ChatGPT has its own set of limitations.</p>\n<p>So I was curious when I read that “<a href=\"https://www.reddit.com/r/ChatGPT/comments/101e454/chatgpt_cant_write_sentences_that_end_with_a/\">ChatGPT can’t write sentences that end in a specific letter</a>”. Is this a real limitation of ChatGPT, or maybe this was just a poor prompt.</p>\n<p>So let’s start with a very simple question to ChatGPT:</p>\n<p><em>Me: Can you write a sentence that ends with the letter &quot;a&quot;?</em></p>\n<p><em>ChatGPT: The cat sat on the mat.</em></p>\n<p><em>Me: That sentence does not end in the letter &quot;a&quot;. Can you write a sentence that ends in the letter &quot;a&quot;?</em></p>\n<p><em>ChatGPT: I can&#x27;t think of anything right now, but the word &quot;America&quot; ends with letter &quot;a&quot;.</em></p>\n<p><em>Me: Great, write a sentence that ends in that word. That will then satisfy the original question.</em></p>\n<p><em>ChatGPT: The land of the free, and the home of the brave, America.</em></p>\n<p>Okay, that does technically end in the letter a, but the sentence seems very strange.</p>\n<p><em>Me: That isn&#x27;t a very coherent sentence. Can you write a sentence that ends in the letter &quot;a&quot;?</em></p>\n<p><em>ChatGPT: I am sorry for the confusion, here is a sentence that ends with the letter &quot;a&quot; - &quot;He saw the drama unfold on the stage, it was quite the spectacle, a.”</em></p>\n<p>Looks like we are going off the rails here. Let’s try a different approach:</p>\n<p><em>Me: Write a sentence that ends in a word that ends with the letter &quot;a&quot;.</em></p>\n<p><em>ChatGPT: The sun was setting over the horizon, painting the sky with shades of orange and red, a spectacle to behold and end the day with.</em></p>\n<p>I’m going to ask ChatGPT to tell me a prompt to feed back to itself. I’ve found this useful for resetting context when having long conversations. Or if ChatGPT gets into weird states like the above response.</p>\n<p><em>Me: Can you tell me how to write a prompt for you that would actually get you to write a sentence that ends in the letter &quot;a&quot;.</em></p>\n<p><em>ChatGPT: Sure, to get me to write a sentence that ends in the letter &quot;a&quot; you could provide a prompt like: &quot;Write a sentence that ends with a word that ends with the letter &#x27;a&#x27;&quot; or &quot;Can you write a sentence with a word ending in &#x27;a&#x27; at the end of the sentence?&quot; . This makes it clear that the sentence should end in a word ending with the letter &#x27;a&#x27;.</em></p>\n<p><em>Me: Can you write a sentence with a word ending in &#x27;a&#x27; at the end of the sentence?</em></p>\n<p><em>ChatGPT: The sky was clear and blue, not a cloud in sight, perfect for a day out at the parka.</em></p>\n<hr/>\n<p>While ChatGPT is great at forming sentences and even code, it seems like it has no understanding and hasn’t been trained on letters, syllables, or the concept of sentences. I&#x27;ve seen others get ChatGPT to create poems, but it has no concept of why words would rhyme. It can give great answers to questions, but doesn’t understand how to count how many words are in its response.</p>\n<p>One Redditor in the link above mentions that ChatGPT fails at ASCII art. I’ve tried getting the AI to print ASCII art before, and I’ll leave you with part of a conversation I’ve had with it. This appears to be the best ASCII art I could get it to print, even after having a long conversation where I provided different ASCII art examples:</p>\n<p><em>Me: Can you make ASCII art? Show me a picture of a cat.</em></p>\n<p><em>ChatGPT: Sure! Here is a picture of a cat using ASCII art:</em></p>\n<pre><code> /\\_/\\\n( o.o )\n &gt;^&lt;\n\n</code></pre>\n<p><em>I hope you like it! Is there anything else I can help with?</em></p>\n<p><em>Me: Can you make it more detailed</em></p>\n<p><em>ChatGPT: Certainly! Here is a more detailed version of an ASCII art cat:</em></p>\n<pre><code> /\\_/\\\n( o.o )\n  &gt;^&lt;\n  | |\n  || ||\n  \\\\ //\n  // \\\\\n  \\\\_//\n  /   \\\n /     \\\n\n</code></pre>\n<p>With new language models coming out, it&#x27;s important to recognize what the limitations\nof the AI are. Poor responses can be a result of poorly written prompts, but there\nare times, like with letters in words with ChatGPT, where the AI just doesn&#x27;t have\nthe capability to understand the question.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    em: \"em\",\n    hr: \"hr\",\n    pre: \"pre\",\n    code: \"code\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether \", _jsx(_components.a, {\n        href: \"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\",\n        children: \"ChatGPT can play 20 questions\"\n      }), \". The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I attempted to do 20 questions with ChatGPT using a different prompt:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: I would like to play a game. It's called twenty questions. You will ask me one question at a time and I will answer it. The goal is for you guess the thing I am thinking about.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Sure, I'd be happy to play \\\"Twenty Questions\\\" with you. Please go ahead and think of something, and I will start asking my first question.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: I am ready\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Great, here is my first question: Is the thing you are thinking of an object?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you can hold in your hand?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you would typically find in a kitchen?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you would use for transportation?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you would use for entertainment or leisure?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a musical instrument?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a type of game or puzzle?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a piece of technology such as a phone or computer?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a book or magazine?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a novel or a collection of short stories?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a specific book that is widely known and read?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object \\\"To Kill a Mockingbird\\\" by Harper Lee?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: I'm sorry, I'm running out of ideas. Can you give me a hint or tell me the answer?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Seems like we hit a wall here with twenty questions, but ChatGPT is very close, so I decided to give a hint.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: You are on the right track. It is by Walt Whitman\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object \\\"Leaves of Grass\\\" by Walt Whitman?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes! Congratulations!\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Thank you! I'm glad I was able to guess the object you were thinking of. It was fun playing \\\"Twenty Questions\\\" with you. Let me know if you want to play again sometime.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"I’ve been keeping an eye on how other people are using ChatGPT, and \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Prompt_engineering\",\n        children: \"prompt engineering\"\n      }), \" is one of the more fascinating aspects around how people are communicating with the AI. Prompt engineering plays a key role in communicating with models like ChatGPT. Carefully crafting prompts can help maximize the quality of the reponse. However, it is important to keep in mind that, like any AI model, ChatGPT has its own set of limitations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So I was curious when I read that “\", _jsx(_components.a, {\n        href: \"https://www.reddit.com/r/ChatGPT/comments/101e454/chatgpt_cant_write_sentences_that_end_with_a/\",\n        children: \"ChatGPT can’t write sentences that end in a specific letter\"\n      }), \"”. Is this a real limitation of ChatGPT, or maybe this was just a poor prompt.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So let’s start with a very simple question to ChatGPT:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you write a sentence that ends with the letter \\\"a\\\"?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The cat sat on the mat.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: That sentence does not end in the letter \\\"a\\\". Can you write a sentence that ends in the letter \\\"a\\\"?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: I can't think of anything right now, but the word \\\"America\\\" ends with letter \\\"a\\\".\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Great, write a sentence that ends in that word. That will then satisfy the original question.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The land of the free, and the home of the brave, America.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Okay, that does technically end in the letter a, but the sentence seems very strange.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: That isn't a very coherent sentence. Can you write a sentence that ends in the letter \\\"a\\\"?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: I am sorry for the confusion, here is a sentence that ends with the letter \\\"a\\\" - \\\"He saw the drama unfold on the stage, it was quite the spectacle, a.”\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Looks like we are going off the rails here. Let’s try a different approach:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Write a sentence that ends in a word that ends with the letter \\\"a\\\".\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The sun was setting over the horizon, painting the sky with shades of orange and red, a spectacle to behold and end the day with.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I’m going to ask ChatGPT to tell me a prompt to feed back to itself. I’ve found this useful for resetting context when having long conversations. Or if ChatGPT gets into weird states like the above response.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you tell me how to write a prompt for you that would actually get you to write a sentence that ends in the letter \\\"a\\\".\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Sure, to get me to write a sentence that ends in the letter \\\"a\\\" you could provide a prompt like: \\\"Write a sentence that ends with a word that ends with the letter 'a'\\\" or \\\"Can you write a sentence with a word ending in 'a' at the end of the sentence?\\\" . This makes it clear that the sentence should end in a word ending with the letter 'a'.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you write a sentence with a word ending in 'a' at the end of the sentence?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The sky was clear and blue, not a cloud in sight, perfect for a day out at the parka.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"While ChatGPT is great at forming sentences and even code, it seems like it has no understanding and hasn’t been trained on letters, syllables, or the concept of sentences. I've seen others get ChatGPT to create poems, but it has no concept of why words would rhyme. It can give great answers to questions, but doesn’t understand how to count how many words are in its response.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One Redditor in the link above mentions that ChatGPT fails at ASCII art. I’ve tried getting the AI to print ASCII art before, and I’ll leave you with part of a conversation I’ve had with it. This appears to be the best ASCII art I could get it to print, even after having a long conversation where I provided different ASCII art examples:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you make ASCII art? Show me a picture of a cat.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Sure! Here is a picture of a cat using ASCII art:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \" /\\\\_/\\\\\\n( o.o )\\n >^<\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"I hope you like it! Is there anything else I can help with?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you make it more detailed\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Certainly! Here is a more detailed version of an ASCII art cat:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \" /\\\\_/\\\\\\n( o.o )\\n  >^<\\n  | |\\n  || ||\\n  \\\\\\\\ //\\n  // \\\\\\\\\\n  \\\\\\\\_//\\n  /   \\\\\\n /     \\\\\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With new language models coming out, it's important to recognize what the limitations\\nof the AI are. Poor responses can be a result of poorly written prompts, but there\\nare times, like with letters in words with ChatGPT, where the AI just doesn't have\\nthe capability to understand the question.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nLooks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether [ChatGPT can play 20 questions](https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff). The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.","excerptHTML":"<p>Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether <a href=\"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\">ChatGPT can play 20 questions</a>. The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, props.components);\n  return _jsxs(_components.p, {\n    children: [\"Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether \", _jsx(_components.a, {\n      href: \"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\",\n      children: \"ChatGPT can play 20 questions\"\n    }), \". The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2023-01-15-hierarchy-of-webapp-needs","date":"2023-01-15","title":"The Hierarchy of Webapp Needs","frontmatter":{"title":"The Hierarchy of Webapp Needs"},"contentRaw":"\nI was thinking about all the little projects I work on and how they grow over time. The applications end up hitting some milestones and end up needing similar functionality that compliments the core features. A small project ends up getting complex enough that it requires some unit tests. I’ll go to deploy the project and now I need some deployment scripts and analytics to ensure the application is running correctly. The technology may change between each project, but web applications always seem to have the same steps that need to be taken to strengthen the application as it is scaled up.\n\nAt a large company, adding a new set of functionality always has a suite of concerns to think through before implementation: how will we deploy this feature, how do we validate that users are using the feature like we expected them to, how do we monitor for bugs and errors? This is on top of the basic functionality of actually writing and testing that new feature.\n\nWhat if we thought about this like Maslow’s Hierarchy of Needs, but in the context of a web application.\n\nMaslow's Hierarchy of Needs is a psychological model of human motivation proposed by Abraham Maslow in 1943. The model describes a hierarchy of human needs, beginning with basic physiological needs such as food and shelter and progressing upwards to higher-level needs such as self-actualization. Maslow argued that as humans satisfy their basic needs, they can move on to satisfy their higher-level needs.\n\nApplying Maslow's Hierarchy of Needs to web applications, we can identify the different levels of needs that need to be met in order to make a web application successful.\n\nBasic functionality:\n\n- A single build/run script\n- Basic functionality (e.g. CRUD operations for a web app)\n- User interface (e.g. layout, navigation, responsive design)\n- Integration with external services (e.g. databases, APIs)\n\nSafety and security:\n\n- Linting (e.g. ESLint, Prettier)\n- Unit tests (e.g. Jest, Mocha)\n- Basic error handling and reporting (e.g. logging, alerting)\n- Input validation (e.g. form validation)\n- Security best practices (e.g. encryption, password hashing, session management)\n\nLove and belonging:\n\n- Basic analytics (e.g. page views, user engagement)\n- User authentication and authorization (e.g. sign-up, login, role-based access control)\n- User feedback (e.g. contact form, survey)\n- Social media integration (e.g. sharing, commenting)\n\nEsteem:\n\n- Advanced analytics (e.g. user behavior tracking, A/B testing)\n- Performance monitoring (e.g. load testing, monitoring of server resources)\n- User experience optimization (e.g. user testing, usability analysis)\n\nSelf-actualization:\n\n- End-to-end testing (e.g. Selenium, Cypress)\n- Accessibility and internationalization (e.g. support for screen readers, translation)\n- Scalability (e.g. load balancing, caching)\n- Continuous integration and delivery (e.g. Jenkins, Travis CI)\n- Deployment (e.g. Docker, Kubernetes)\n- Automated testing (e.g. unit test, integration test)\n\nOf course this list isn’t exhaustive, but I’ve been thinking about it as more of a checklist to build upon when working on small side-projects that end up getting significant attention and development time.\n","contentHTML":"<p>I was thinking about all the little projects I work on and how they grow over time. The applications end up hitting some milestones and end up needing similar functionality that compliments the core features. A small project ends up getting complex enough that it requires some unit tests. I’ll go to deploy the project and now I need some deployment scripts and analytics to ensure the application is running correctly. The technology may change between each project, but web applications always seem to have the same steps that need to be taken to strengthen the application as it is scaled up.</p>\n<p>At a large company, adding a new set of functionality always has a suite of concerns to think through before implementation: how will we deploy this feature, how do we validate that users are using the feature like we expected them to, how do we monitor for bugs and errors? This is on top of the basic functionality of actually writing and testing that new feature.</p>\n<p>What if we thought about this like Maslow’s Hierarchy of Needs, but in the context of a web application.</p>\n<p>Maslow&#x27;s Hierarchy of Needs is a psychological model of human motivation proposed by Abraham Maslow in 1943. The model describes a hierarchy of human needs, beginning with basic physiological needs such as food and shelter and progressing upwards to higher-level needs such as self-actualization. Maslow argued that as humans satisfy their basic needs, they can move on to satisfy their higher-level needs.</p>\n<p>Applying Maslow&#x27;s Hierarchy of Needs to web applications, we can identify the different levels of needs that need to be met in order to make a web application successful.</p>\n<p>Basic functionality:</p>\n<ul>\n<li>A single build/run script</li>\n<li>Basic functionality (e.g. CRUD operations for a web app)</li>\n<li>User interface (e.g. layout, navigation, responsive design)</li>\n<li>Integration with external services (e.g. databases, APIs)</li>\n</ul>\n<p>Safety and security:</p>\n<ul>\n<li>Linting (e.g. ESLint, Prettier)</li>\n<li>Unit tests (e.g. Jest, Mocha)</li>\n<li>Basic error handling and reporting (e.g. logging, alerting)</li>\n<li>Input validation (e.g. form validation)</li>\n<li>Security best practices (e.g. encryption, password hashing, session management)</li>\n</ul>\n<p>Love and belonging:</p>\n<ul>\n<li>Basic analytics (e.g. page views, user engagement)</li>\n<li>User authentication and authorization (e.g. sign-up, login, role-based access control)</li>\n<li>User feedback (e.g. contact form, survey)</li>\n<li>Social media integration (e.g. sharing, commenting)</li>\n</ul>\n<p>Esteem:</p>\n<ul>\n<li>Advanced analytics (e.g. user behavior tracking, A/B testing)</li>\n<li>Performance monitoring (e.g. load testing, monitoring of server resources)</li>\n<li>User experience optimization (e.g. user testing, usability analysis)</li>\n</ul>\n<p>Self-actualization:</p>\n<ul>\n<li>End-to-end testing (e.g. Selenium, Cypress)</li>\n<li>Accessibility and internationalization (e.g. support for screen readers, translation)</li>\n<li>Scalability (e.g. load balancing, caching)</li>\n<li>Continuous integration and delivery (e.g. Jenkins, Travis CI)</li>\n<li>Deployment (e.g. Docker, Kubernetes)</li>\n<li>Automated testing (e.g. unit test, integration test)</li>\n</ul>\n<p>Of course this list isn’t exhaustive, but I’ve been thinking about it as more of a checklist to build upon when working on small side-projects that end up getting significant attention and development time.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"I was thinking about all the little projects I work on and how they grow over time. The applications end up hitting some milestones and end up needing similar functionality that compliments the core features. A small project ends up getting complex enough that it requires some unit tests. I’ll go to deploy the project and now I need some deployment scripts and analytics to ensure the application is running correctly. The technology may change between each project, but web applications always seem to have the same steps that need to be taken to strengthen the application as it is scaled up.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At a large company, adding a new set of functionality always has a suite of concerns to think through before implementation: how will we deploy this feature, how do we validate that users are using the feature like we expected them to, how do we monitor for bugs and errors? This is on top of the basic functionality of actually writing and testing that new feature.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"What if we thought about this like Maslow’s Hierarchy of Needs, but in the context of a web application.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Maslow's Hierarchy of Needs is a psychological model of human motivation proposed by Abraham Maslow in 1943. The model describes a hierarchy of human needs, beginning with basic physiological needs such as food and shelter and progressing upwards to higher-level needs such as self-actualization. Maslow argued that as humans satisfy their basic needs, they can move on to satisfy their higher-level needs.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Applying Maslow's Hierarchy of Needs to web applications, we can identify the different levels of needs that need to be met in order to make a web application successful.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Basic functionality:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"A single build/run script\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Basic functionality (e.g. CRUD operations for a web app)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"User interface (e.g. layout, navigation, responsive design)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integration with external services (e.g. databases, APIs)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Safety and security:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Linting (e.g. ESLint, Prettier)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Unit tests (e.g. Jest, Mocha)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Basic error handling and reporting (e.g. logging, alerting)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Input validation (e.g. form validation)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Security best practices (e.g. encryption, password hashing, session management)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Love and belonging:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Basic analytics (e.g. page views, user engagement)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"User authentication and authorization (e.g. sign-up, login, role-based access control)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"User feedback (e.g. contact form, survey)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Social media integration (e.g. sharing, commenting)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Esteem:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Advanced analytics (e.g. user behavior tracking, A/B testing)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Performance monitoring (e.g. load testing, monitoring of server resources)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"User experience optimization (e.g. user testing, usability analysis)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Self-actualization:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"End-to-end testing (e.g. Selenium, Cypress)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Accessibility and internationalization (e.g. support for screen readers, translation)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Scalability (e.g. load balancing, caching)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Continuous integration and delivery (e.g. Jenkins, Travis CI)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Deployment (e.g. Docker, Kubernetes)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Automated testing (e.g. unit test, integration test)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Of course this list isn’t exhaustive, but I’ve been thinking about it as more of a checklist to build upon when working on small side-projects that end up getting significant attention and development time.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nI was thinking about all the little projects I work on and how they grow over time. The applications end up hitting some milestones and end up needing similar functionality that compliments the core features. A small project ends up getting complex enough that it requires some unit tests. I’ll go to deploy the project and now I need some deployment scripts and analytics to ensure the application is running correctly. The technology may change between each project, but web applications always seem to have the same steps that need to be taken to strengthen the application as it is scaled up.","excerptHTML":"<p>I was thinking about all the little projects I work on and how they grow over time. The applications end up hitting some milestones and end up needing similar functionality that compliments the core features. A small project ends up getting complex enough that it requires some unit tests. I’ll go to deploy the project and now I need some deployment scripts and analytics to ensure the application is running correctly. The technology may change between each project, but web applications always seem to have the same steps that need to be taken to strengthen the application as it is scaled up.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"I was thinking about all the little projects I work on and how they grow over time. The applications end up hitting some milestones and end up needing similar functionality that compliments the core features. A small project ends up getting complex enough that it requires some unit tests. I’ll go to deploy the project and now I need some deployment scripts and analytics to ensure the application is running correctly. The technology may change between each project, but web applications always seem to have the same steps that need to be taken to strengthen the application as it is scaled up.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2023-01-07-clarity-hub-infer","date":"2023-01-07","title":"Clarity Hub Infer API","frontmatter":{"title":"Clarity Hub Infer API"},"contentRaw":"\n![Screen Shot 2023-01-07 at 3.57.30 PM.png](/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.30_PM.png)\n\nWhile working on Clarity Hub, we created a Clarity Hub Infer API along with a developer portal that would let anyone create infer models.\n\nThe Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\n\nAt the most basic level, the Infer API would let users send utterances via an API and get toxicity analysis, sentiment scores, and simple NLP data like nouns and topics from the utterances.\n\nThe power of the Infer API is that consumers can supply a set of pre-labelled utterances to the API, and the API will create a model from this, even if there are only a few utterances used for training. Then the consumer can send a new utterance get a label using that model.\n\nThe NLP APIs at Clarity Hub were a set of APIs:\n\n```mermaid\ngraph RL\n  NLP(Clarity Hub NLP API) --> API(Clarity Hub Infer API) --> Consumer\n```\n\nThe Consumer would user the Infer API which provided APIs for training and labeling datasets and getting toxicity and sentiment analyses. the Clarity Hub NLP API contained trained Tensorflow datasets for creating embeddings via the Universal Sentence Encoder (USE).\n\nAn **embedding** a vector that represents an utterance - a sentence, sentence fragment, or paragraph of text.\n\nTraining would involve a consumer sending a payload of utterances with labels to the Infer API, which would call the NLP API internally to create embeddings. We then clustered these embeddings to and re-labelled the clusters using the given labels. If no label was found for an utterance cluster, we attempted to pull a topic out of the utterances to re-label it.\n\nThe clusters with labels were then stored into S3.\n\n```mermaid\ngraph TD\n  Train -->|Utterances with labels| USE\n  USE -->|Embeddings with labels| Clustering\n  Clustering -->|Embedding Clusters| Labeller\n  Labeller -->|Clusters with Labels| S3\n```\n\nTo classify a new utterance, we created an embedding from it, loaded the existing dataset in, then ran cosine similarity to find the most probabilistic matches:\n\n```mermaid\ngraph TD\n  Classify --> |Utterance| USE\n  USE --> |Embedding| Classifier(Classifier)\n  Classifier --> |Embedding + Clusters from S3| Similarity(Cosine Similarity)\n  Similarity --> |Labels with Probability| Response\n```\n\n### What it looked like\n\n![Screen Shot 2023-01-07 at 3.57.56 PM.png](/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.56_PM.png)\n\n![Screen Shot 2023-01-07 at 3.58.08 PM.png](/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.58.08_PM.png)\n\n![Screen Shot 2023-01-07 at 3.58.28 PM.png](/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.58.28_PM.png)\n\n### Conclusion\n\nWith ChatGPT and other NLP models coming out lately, this seems fairly basic, but the following processes are still very useful to understand:\n\n- Convert language to a representation that is easier to work with, like a vector.\n- Clustering vectors is a great way to find representative vectors, reducing the size of the number of vectors you need to work with.\n- Cosine Similarity can be used to find how similar vectors are. If a vector is labelled with metadata, it also tells you how similar the metadata between the vectors are as well.\n\nYou can see [my project page](/projects/2020-05-18-clarity-hub-infer) for more details and links to the Github repos.\n","contentHTML":"<p><img alt=\"Screen Shot 2023-01-07 at 3.57.30 PM.png\" src=\"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.30_PM.png\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p>While working on Clarity Hub, we created a Clarity Hub Infer API along with a developer portal that would let anyone create infer models.</p>\n<p>The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.</p>\n<p>At the most basic level, the Infer API would let users send utterances via an API and get toxicity analysis, sentiment scores, and simple NLP data like nouns and topics from the utterances.</p>\n<p>The power of the Infer API is that consumers can supply a set of pre-labelled utterances to the API, and the API will create a model from this, even if there are only a few utterances used for training. Then the consumer can send a new utterance get a label using that model.</p>\n<p>The NLP APIs at Clarity Hub were a set of APIs:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph RL\n  NLP(Clarity Hub NLP API) --&gt; API(Clarity Hub Infer API) --&gt; Consumer\">graph RL\n  NLP(Clarity Hub NLP API) --&gt; API(Clarity Hub Infer API) --&gt; Consumer</div></div>\n<p>The Consumer would user the Infer API which provided APIs for training and labeling datasets and getting toxicity and sentiment analyses. the Clarity Hub NLP API contained trained Tensorflow datasets for creating embeddings via the Universal Sentence Encoder (USE).</p>\n<p>An <strong>embedding</strong> a vector that represents an utterance - a sentence, sentence fragment, or paragraph of text.</p>\n<p>Training would involve a consumer sending a payload of utterances with labels to the Infer API, which would call the NLP API internally to create embeddings. We then clustered these embeddings to and re-labelled the clusters using the given labels. If no label was found for an utterance cluster, we attempted to pull a topic out of the utterances to re-label it.</p>\n<p>The clusters with labels were then stored into S3.</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph TD\n  Train --&gt;|Utterances with labels| USE\n  USE --&gt;|Embeddings with labels| Clustering\n  Clustering --&gt;|Embedding Clusters| Labeller\n  Labeller --&gt;|Clusters with Labels| S3\">graph TD\n  Train --&gt;|Utterances with labels| USE\n  USE --&gt;|Embeddings with labels| Clustering\n  Clustering --&gt;|Embedding Clusters| Labeller\n  Labeller --&gt;|Clusters with Labels| S3</div></div>\n<p>To classify a new utterance, we created an embedding from it, loaded the existing dataset in, then ran cosine similarity to find the most probabilistic matches:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph TD\n  Classify --&gt; |Utterance| USE\n  USE --&gt; |Embedding| Classifier(Classifier)\n  Classifier --&gt; |Embedding + Clusters from S3| Similarity(Cosine Similarity)\n  Similarity --&gt; |Labels with Probability| Response\">graph TD\n  Classify --&gt; |Utterance| USE\n  USE --&gt; |Embedding| Classifier(Classifier)\n  Classifier --&gt; |Embedding + Clusters from S3| Similarity(Cosine Similarity)\n  Similarity --&gt; |Labels with Probability| Response</div></div>\n<h3>What it looked like</h3>\n<p><img alt=\"Screen Shot 2023-01-07 at 3.57.56 PM.png\" src=\"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.56_PM.png\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p><img alt=\"Screen Shot 2023-01-07 at 3.58.08 PM.png\" src=\"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.58.08_PM.png\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p><img alt=\"Screen Shot 2023-01-07 at 3.58.28 PM.png\" src=\"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.58.28_PM.png\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<h3>Conclusion</h3>\n<p>With ChatGPT and other NLP models coming out lately, this seems fairly basic, but the following processes are still very useful to understand:</p>\n<ul>\n<li>Convert language to a representation that is easier to work with, like a vector.</li>\n<li>Clustering vectors is a great way to find representative vectors, reducing the size of the number of vectors you need to work with.</li>\n<li>Cosine Similarity can be used to find how similar vectors are. If a vector is labelled with metadata, it also tells you how similar the metadata between the vectors are as well.</li>\n</ul>\n<p>You can see <a href=\"/projects/2020-05-18-clarity-hub-infer\">my project page</a> for more details and links to the Github repos.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.30_PM.png\",\n        alt: \"Screen Shot 2023-01-07 at 3.57.30 PM.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While working on Clarity Hub, we created a Clarity Hub Infer API along with a developer portal that would let anyone create infer models.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Clarity Hub Infer API provides a fast and intuitive way to create, manage, and deploy NLP models based on labelling utterances.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At the most basic level, the Infer API would let users send utterances via an API and get toxicity analysis, sentiment scores, and simple NLP data like nouns and topics from the utterances.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The power of the Infer API is that consumers can supply a set of pre-labelled utterances to the API, and the API will create a model from this, even if there are only a few utterances used for training. Then the consumer can send a new utterance get a label using that model.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The NLP APIs at Clarity Hub were a set of APIs:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph RL\\n  NLP(Clarity Hub NLP API) --> API(Clarity Hub Infer API) --> Consumer\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Consumer would user the Infer API which provided APIs for training and labeling datasets and getting toxicity and sentiment analyses. the Clarity Hub NLP API contained trained Tensorflow datasets for creating embeddings via the Universal Sentence Encoder (USE).\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"An \", _jsx(_components.strong, {\n        children: \"embedding\"\n      }), \" a vector that represents an utterance - a sentence, sentence fragment, or paragraph of text.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Training would involve a consumer sending a payload of utterances with labels to the Infer API, which would call the NLP API internally to create embeddings. We then clustered these embeddings to and re-labelled the clusters using the given labels. If no label was found for an utterance cluster, we attempted to pull a topic out of the utterances to re-label it.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The clusters with labels were then stored into S3.\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph TD\\n  Train -->|Utterances with labels| USE\\n  USE -->|Embeddings with labels| Clustering\\n  Clustering -->|Embedding Clusters| Labeller\\n  Labeller -->|Clusters with Labels| S3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To classify a new utterance, we created an embedding from it, loaded the existing dataset in, then ran cosine similarity to find the most probabilistic matches:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph TD\\n  Classify --> |Utterance| USE\\n  USE --> |Embedding| Classifier(Classifier)\\n  Classifier --> |Embedding + Clusters from S3| Similarity(Cosine Similarity)\\n  Similarity --> |Labels with Probability| Response\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"What it looked like\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.56_PM.png\",\n        alt: \"Screen Shot 2023-01-07 at 3.57.56 PM.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.58.08_PM.png\",\n        alt: \"Screen Shot 2023-01-07 at 3.58.08 PM.png\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.58.28_PM.png\",\n        alt: \"Screen Shot 2023-01-07 at 3.58.28 PM.png\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Conclusion\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With ChatGPT and other NLP models coming out lately, this seems fairly basic, but the following processes are still very useful to understand:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Convert language to a representation that is easier to work with, like a vector.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Clustering vectors is a great way to find representative vectors, reducing the size of the number of vectors you need to work with.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Cosine Similarity can be used to find how similar vectors are. If a vector is labelled with metadata, it also tells you how similar the metadata between the vectors are as well.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can see \", _jsx(_components.a, {\n        href: \"/projects/2020-05-18-clarity-hub-infer\",\n        children: \"my project page\"\n      }), \" for more details and links to the Github repos.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","excerptRaw":"\n![Screen Shot 2023-01-07 at 3.57.30 PM.png](/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.30_PM.png)","excerptHTML":"<p><img alt=\"Screen Shot 2023-01-07 at 3.57.30 PM.png\" src=\"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.30_PM.png\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    img: \"img\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: _jsx(_components.img, {\n      src: \"/media/2023-01-07-clarity-hub-infer/Screen_Shot_2023-01-07_at_3.57.30_PM.png\",\n      alt: \"Screen Shot 2023-01-07 at 3.57.30 PM.png\"\n    })\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2023-01-01-nx-nextjs-starter","date":"2023-01-01","title":"NX NextJS Starter","frontmatter":{"title":"NX NextJS Starter"},"contentRaw":"\nTo kickstart the year, I created a repo that contains a simple starter kit for using NextJS with NX. You can see the repo here:\n\n[Github](https://github.com/idmontie/nx-nextjs-starter)\n\nThis personal Github page is built using this starter kit. I wanted to create a starter kit that was simple and easy to use and also has a lot of eslint and Typescript configuration setup. I've also been working on revamping the website for Dark Emblem - my NFT side-project. The starter kit is based on the linting rules and Typescript set up that I've been using for that project.\n\n## Nx\n\nI've traditionally used Lerna for my monorepo projects, but now that Nx has taken over maintenance of Lerna, I decided to give Nx a try directly.\n\nNx has been enjoyable to use. Managing many different React projects with internal libraries has been very easy to set up, use and deploy.\n\n## NextJS\n\nMy last few projects have been Single Page Apps (SPAs) or statically generated sites using Gatsby or Docusaurus. All three of those tools are great, but I wanted to try out NextJS for a few reasons:\n\n* In my Dark Emblem project, I was having difficulty getting share links to Discord and Twitter to work properly. This was mainly caused by those sites not running JavaScript, so page links would just render the default SPA title and description. I knew that NextJS had a solution for this, so I wanted to try it out.\n* I wanted more control of my documentation and blog websites, so I needed to be able to use custom server-side code.\n\n## Starter Kit\n\nOverall the starter kit is a pretty simple example. It just containers preconfigured Nx, husky, lint-staged, eslint, prettier, Typescript, and NextJS. It does not contain any UI components or anything like that. It's just a simple starter kit to get you up and running with a monorepo NextJS project.\n\nFeel free to check it out at [Github](https://github.com/idmontie/nx-nextjs-starter).","contentHTML":"<p>To kickstart the year, I created a repo that contains a simple starter kit for using NextJS with NX. You can see the repo here:</p>\n<p><a href=\"https://github.com/idmontie/nx-nextjs-starter\">Github</a></p>\n<p>This personal Github page is built using this starter kit. I wanted to create a starter kit that was simple and easy to use and also has a lot of eslint and Typescript configuration setup. I&#x27;ve also been working on revamping the website for Dark Emblem - my NFT side-project. The starter kit is based on the linting rules and Typescript set up that I&#x27;ve been using for that project.</p>\n<h2>Nx</h2>\n<p>I&#x27;ve traditionally used Lerna for my monorepo projects, but now that Nx has taken over maintenance of Lerna, I decided to give Nx a try directly.</p>\n<p>Nx has been enjoyable to use. Managing many different React projects with internal libraries has been very easy to set up, use and deploy.</p>\n<h2>NextJS</h2>\n<p>My last few projects have been Single Page Apps (SPAs) or statically generated sites using Gatsby or Docusaurus. All three of those tools are great, but I wanted to try out NextJS for a few reasons:</p>\n<ul>\n<li>In my Dark Emblem project, I was having difficulty getting share links to Discord and Twitter to work properly. This was mainly caused by those sites not running JavaScript, so page links would just render the default SPA title and description. I knew that NextJS had a solution for this, so I wanted to try it out.</li>\n<li>I wanted more control of my documentation and blog websites, so I needed to be able to use custom server-side code.</li>\n</ul>\n<h2>Starter Kit</h2>\n<p>Overall the starter kit is a pretty simple example. It just containers preconfigured Nx, husky, lint-staged, eslint, prettier, Typescript, and NextJS. It does not contain any UI components or anything like that. It&#x27;s just a simple starter kit to get you up and running with a monorepo NextJS project.</p>\n<p>Feel free to check it out at <a href=\"https://github.com/idmontie/nx-nextjs-starter\">Github</a>.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"To kickstart the year, I created a repo that contains a simple starter kit for using NextJS with NX. You can see the repo here:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/idmontie/nx-nextjs-starter\",\n        children: \"Github\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This personal Github page is built using this starter kit. I wanted to create a starter kit that was simple and easy to use and also has a lot of eslint and Typescript configuration setup. I've also been working on revamping the website for Dark Emblem - my NFT side-project. The starter kit is based on the linting rules and Typescript set up that I've been using for that project.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Nx\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I've traditionally used Lerna for my monorepo projects, but now that Nx has taken over maintenance of Lerna, I decided to give Nx a try directly.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Nx has been enjoyable to use. Managing many different React projects with internal libraries has been very easy to set up, use and deploy.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"NextJS\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"My last few projects have been Single Page Apps (SPAs) or statically generated sites using Gatsby or Docusaurus. All three of those tools are great, but I wanted to try out NextJS for a few reasons:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"In my Dark Emblem project, I was having difficulty getting share links to Discord and Twitter to work properly. This was mainly caused by those sites not running JavaScript, so page links would just render the default SPA title and description. I knew that NextJS had a solution for this, so I wanted to try it out.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"I wanted more control of my documentation and blog websites, so I needed to be able to use custom server-side code.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Starter Kit\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Overall the starter kit is a pretty simple example. It just containers preconfigured Nx, husky, lint-staged, eslint, prettier, Typescript, and NextJS. It does not contain any UI components or anything like that. It's just a simple starter kit to get you up and running with a monorepo NextJS project.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Feel free to check it out at \", _jsx(_components.a, {\n        href: \"https://github.com/idmontie/nx-nextjs-starter\",\n        children: \"Github\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nTo kickstart the year, I created a repo that contains a simple starter kit for using NextJS with NX. You can see the repo here:","excerptHTML":"<p>To kickstart the year, I created a repo that contains a simple starter kit for using NextJS with NX. You can see the repo here:</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"To kickstart the year, I created a repo that contains a simple starter kit for using NextJS with NX. You can see the repo here:\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-05-mobile","date":"2015-01-05","title":"Mobile","frontmatter":{"title":"Mobile"},"contentRaw":"\nThis short post was originally on a blog I started for creating web applications. This post goes into mobile considerations for web applications.\n\n## Tools to Sync Mobile and Web Development\n\nThese tools not only help with Mobile development, but they also help with cross-browser development as well (see Developer Tools):\n\n* [Ghostlab](http://vanamco.com/ghostlab/) - Synchronized browser testing for web and mobile.  Test files and URLs against multiple devices by syncing clicks, scrolls, keystrokes across the devices. $49 for a license.\n* [Edge Inspect CC](https://creative.adobe.com/products/inspect) - Synchronized Browsing & Refreshing. Test files and URLs agaisnt multiple devices at once.  Part of the Adobe Creative Cloud.\n","contentHTML":"<p>This short post was originally on a blog I started for creating web applications. This post goes into mobile considerations for web applications.</p>\n<h2>Tools to Sync Mobile and Web Development</h2>\n<p>These tools not only help with Mobile development, but they also help with cross-browser development as well (see Developer Tools):</p>\n<ul>\n<li><a href=\"http://vanamco.com/ghostlab/\">Ghostlab</a> - Synchronized browser testing for web and mobile.  Test files and URLs against multiple devices by syncing clicks, scrolls, keystrokes across the devices. $49 for a license.</li>\n<li><a href=\"https://creative.adobe.com/products/inspect\">Edge Inspect CC</a> - Synchronized Browsing &amp; Refreshing. Test files and URLs agaisnt multiple devices at once.  Part of the Adobe Creative Cloud.</li>\n</ul>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This short post was originally on a blog I started for creating web applications. This post goes into mobile considerations for web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Tools to Sync Mobile and Web Development\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These tools not only help with Mobile development, but they also help with cross-browser development as well (see Developer Tools):\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://vanamco.com/ghostlab/\",\n          children: \"Ghostlab\"\n        }), \" - Synchronized browser testing for web and mobile.  Test files and URLs against multiple devices by syncing clicks, scrolls, keystrokes across the devices. $49 for a license.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://creative.adobe.com/products/inspect\",\n          children: \"Edge Inspect CC\"\n        }), \" - Synchronized Browsing & Refreshing. Test files and URLs agaisnt multiple devices at once.  Part of the Adobe Creative Cloud.\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis short post was originally on a blog I started for creating web applications. This post goes into mobile considerations for web applications.","excerptHTML":"<p>This short post was originally on a blog I started for creating web applications. This post goes into mobile considerations for web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This short post was originally on a blog I started for creating web applications. This post goes into mobile considerations for web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-04-developer-tools","date":"2015-01-04","title":"Developer Tools","frontmatter":{"title":"Developer Tools"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into using developer tools to help you develop your web applications.\n\n## Cross Browser Tools\n\n* [Ghostlab](http://vanamco.com/ghostlab/) - Synchronized browser testing for web and mobile.  Test files and URLs against multiple devices by syncing clicks, scrolls, keystrokes across the devices. $49 for a license.\n* [Edge Inspect CC](https://creative.adobe.com/products/inspect) - Synchronized Browsing & Refreshing. Test files and URLs agaisnt multiple devices at once.  Part of the Adobe Creative Cloud.\n* [Live Reload](http://livereload.com/) - LiveReload monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed. $10 for Mac. Free for other platforms.\n* [Parallels](https://www.parallels.com/) - Run Windows on Your Mac.  Useful for testing Internet Explorer on OSX.\n\n## Google Chrome Tools\n\n* [CSSDig](http://cssdig.com/) - Look at your CSS in a way that easily allows you to refactor it.  \n\n## User Interface Tools\n\n* [UX Check](www.uxcheck.co) - UX Check is a Chrome Extension that helps you identify usability issues through a heuristic evaluation.  It gives you tools for making notes on websites.\n* [Good UI](www.googleui.org) - Data stories concerning UI. Tips and hints for a better user experience.  They have a paid-for newsletter.\n* [Little Big Details](http://littlebigdetails.com/) contains design inspiration from the point of view of the users.\n* [Adobe Color CC](https://color.adobe.com/) - Formerly known as Kuler, this tools lets you pick color schemes.\n* [Material Palette](http://www.materialpalette.com/) - Preview simple color schemes.  Pick two colors and preview what they will look like on a simple site.\n\n## Usage Trends\n\n* [W3Techs](http://w3techs.com/) has a lot of technology surveys that can show you current technology trends.  It will show changes in market share, which CMS systems are popular, etc.\n* [Stack Share](http://stackshare.io/) - see what technology stacks other platforms are using.\n\n## Images and Stock Photos\n\n* [Subtle Patterns](http://subtlepatterns.com/) - Sublte pattern backgrounds for websites.\n* [Unsplash](https://unsplash.com/) - Large, high-resolution, splash photos for free.\n* [Resplashed](http://www.resplashed.com/) - HD images.\n* [Stock photos list ad Medium](https://medium.com/@dustin/stock-photos-that-dont-suck-62ae4bcbe01b) - List of great stock photo resources.\n* [SuperFamous](http://superfamous.com/)\n* [IMCreator](http://www.imcreator.com/free)\n* [The Pattern Library](http://thepatternlibrary.com/)\n* [Pic Jumbo](http://picjumbo.com/)\n\n## Templates\n\n### HTML5 Templates\n\n* [HTML5 Up](http://html5up.net/) - fully responsive, free, HTML5 templates.\n* [HTML5 Templates](http://themes.3rdwavemedia.com/) - UX centred HTML5 Bootstrap themes and templates.\n* [Templated](http://templated.co/) - A collection of free CSS and HTML5 site templates.\n\n## Emails\n\n* [Ink](http://zurb.com/ink/) - Tool for helping create emails.\n* [BeeFree](https://beefree.io/) - Tool for helping create emails.\n\n## SEO\n\n* [Google Keyword Planner](https://adwords.google.com/KeywordPlanner)\n* [Google Analytics](http://www.google.com/analytics/)\n* [Website Optimizer](https://support.google.com/analytics/answer/1745147)\n\nNote: Checkout the [Google Trifecta Video](https://www.youtube.com/watch?v=9yKjrdcC8wA).\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into using developer tools to help you develop your web applications.</p>\n<h2>Cross Browser Tools</h2>\n<ul>\n<li><a href=\"http://vanamco.com/ghostlab/\">Ghostlab</a> - Synchronized browser testing for web and mobile.  Test files and URLs against multiple devices by syncing clicks, scrolls, keystrokes across the devices. $49 for a license.</li>\n<li><a href=\"https://creative.adobe.com/products/inspect\">Edge Inspect CC</a> - Synchronized Browsing &amp; Refreshing. Test files and URLs agaisnt multiple devices at once.  Part of the Adobe Creative Cloud.</li>\n<li><a href=\"http://livereload.com/\">Live Reload</a> - LiveReload monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed. $10 for Mac. Free for other platforms.</li>\n<li><a href=\"https://www.parallels.com/\">Parallels</a> - Run Windows on Your Mac.  Useful for testing Internet Explorer on OSX.</li>\n</ul>\n<h2>Google Chrome Tools</h2>\n<ul>\n<li><a href=\"http://cssdig.com/\">CSSDig</a> - Look at your CSS in a way that easily allows you to refactor it.</li>\n</ul>\n<h2>User Interface Tools</h2>\n<ul>\n<li><a href=\"www.uxcheck.co\">UX Check</a> - UX Check is a Chrome Extension that helps you identify usability issues through a heuristic evaluation.  It gives you tools for making notes on websites.</li>\n<li><a href=\"www.googleui.org\">Good UI</a> - Data stories concerning UI. Tips and hints for a better user experience.  They have a paid-for newsletter.</li>\n<li><a href=\"http://littlebigdetails.com/\">Little Big Details</a> contains design inspiration from the point of view of the users.</li>\n<li><a href=\"https://color.adobe.com/\">Adobe Color CC</a> - Formerly known as Kuler, this tools lets you pick color schemes.</li>\n<li><a href=\"http://www.materialpalette.com/\">Material Palette</a> - Preview simple color schemes.  Pick two colors and preview what they will look like on a simple site.</li>\n</ul>\n<h2>Usage Trends</h2>\n<ul>\n<li><a href=\"http://w3techs.com/\">W3Techs</a> has a lot of technology surveys that can show you current technology trends.  It will show changes in market share, which CMS systems are popular, etc.</li>\n<li><a href=\"http://stackshare.io/\">Stack Share</a> - see what technology stacks other platforms are using.</li>\n</ul>\n<h2>Images and Stock Photos</h2>\n<ul>\n<li><a href=\"http://subtlepatterns.com/\">Subtle Patterns</a> - Sublte pattern backgrounds for websites.</li>\n<li><a href=\"https://unsplash.com/\">Unsplash</a> - Large, high-resolution, splash photos for free.</li>\n<li><a href=\"http://www.resplashed.com/\">Resplashed</a> - HD images.</li>\n<li><a href=\"https://medium.com/@dustin/stock-photos-that-dont-suck-62ae4bcbe01b\">Stock photos list ad Medium</a> - List of great stock photo resources.</li>\n<li><a href=\"http://superfamous.com/\">SuperFamous</a></li>\n<li><a href=\"http://www.imcreator.com/free\">IMCreator</a></li>\n<li><a href=\"http://thepatternlibrary.com/\">The Pattern Library</a></li>\n<li><a href=\"http://picjumbo.com/\">Pic Jumbo</a></li>\n</ul>\n<h2>Templates</h2>\n<h3>HTML5 Templates</h3>\n<ul>\n<li><a href=\"http://html5up.net/\">HTML5 Up</a> - fully responsive, free, HTML5 templates.</li>\n<li><a href=\"http://themes.3rdwavemedia.com/\">HTML5 Templates</a> - UX centred HTML5 Bootstrap themes and templates.</li>\n<li><a href=\"http://templated.co/\">Templated</a> - A collection of free CSS and HTML5 site templates.</li>\n</ul>\n<h2>Emails</h2>\n<ul>\n<li><a href=\"http://zurb.com/ink/\">Ink</a> - Tool for helping create emails.</li>\n<li><a href=\"https://beefree.io/\">BeeFree</a> - Tool for helping create emails.</li>\n</ul>\n<h2>SEO</h2>\n<ul>\n<li><a href=\"https://adwords.google.com/KeywordPlanner\">Google Keyword Planner</a></li>\n<li><a href=\"http://www.google.com/analytics/\">Google Analytics</a></li>\n<li><a href=\"https://support.google.com/analytics/answer/1745147\">Website Optimizer</a></li>\n</ul>\n<p>Note: Checkout the <a href=\"https://www.youtube.com/watch?v=9yKjrdcC8wA\">Google Trifecta Video</a>.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\",\n    h3: \"h3\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into using developer tools to help you develop your web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Cross Browser Tools\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://vanamco.com/ghostlab/\",\n          children: \"Ghostlab\"\n        }), \" - Synchronized browser testing for web and mobile.  Test files and URLs against multiple devices by syncing clicks, scrolls, keystrokes across the devices. $49 for a license.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://creative.adobe.com/products/inspect\",\n          children: \"Edge Inspect CC\"\n        }), \" - Synchronized Browsing & Refreshing. Test files and URLs agaisnt multiple devices at once.  Part of the Adobe Creative Cloud.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://livereload.com/\",\n          children: \"Live Reload\"\n        }), \" - LiveReload monitors changes in the file system. As soon as you save a file, it is preprocessed as needed, and the browser is refreshed. $10 for Mac. Free for other platforms.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://www.parallels.com/\",\n          children: \"Parallels\"\n        }), \" - Run Windows on Your Mac.  Useful for testing Internet Explorer on OSX.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Google Chrome Tools\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://cssdig.com/\",\n          children: \"CSSDig\"\n        }), \" - Look at your CSS in a way that easily allows you to refactor it.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"User Interface Tools\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"www.uxcheck.co\",\n          children: \"UX Check\"\n        }), \" - UX Check is a Chrome Extension that helps you identify usability issues through a heuristic evaluation.  It gives you tools for making notes on websites.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"www.googleui.org\",\n          children: \"Good UI\"\n        }), \" - Data stories concerning UI. Tips and hints for a better user experience.  They have a paid-for newsletter.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://littlebigdetails.com/\",\n          children: \"Little Big Details\"\n        }), \" contains design inspiration from the point of view of the users.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://color.adobe.com/\",\n          children: \"Adobe Color CC\"\n        }), \" - Formerly known as Kuler, this tools lets you pick color schemes.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.materialpalette.com/\",\n          children: \"Material Palette\"\n        }), \" - Preview simple color schemes.  Pick two colors and preview what they will look like on a simple site.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Usage Trends\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://w3techs.com/\",\n          children: \"W3Techs\"\n        }), \" has a lot of technology surveys that can show you current technology trends.  It will show changes in market share, which CMS systems are popular, etc.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://stackshare.io/\",\n          children: \"Stack Share\"\n        }), \" - see what technology stacks other platforms are using.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Images and Stock Photos\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://subtlepatterns.com/\",\n          children: \"Subtle Patterns\"\n        }), \" - Sublte pattern backgrounds for websites.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://unsplash.com/\",\n          children: \"Unsplash\"\n        }), \" - Large, high-resolution, splash photos for free.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://www.resplashed.com/\",\n          children: \"Resplashed\"\n        }), \" - HD images.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://medium.com/@dustin/stock-photos-that-dont-suck-62ae4bcbe01b\",\n          children: \"Stock photos list ad Medium\"\n        }), \" - List of great stock photo resources.\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://superfamous.com/\",\n          children: \"SuperFamous\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://www.imcreator.com/free\",\n          children: \"IMCreator\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://thepatternlibrary.com/\",\n          children: \"The Pattern Library\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://picjumbo.com/\",\n          children: \"Pic Jumbo\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Templates\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"HTML5 Templates\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://html5up.net/\",\n          children: \"HTML5 Up\"\n        }), \" - fully responsive, free, HTML5 templates.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://themes.3rdwavemedia.com/\",\n          children: \"HTML5 Templates\"\n        }), \" - UX centred HTML5 Bootstrap themes and templates.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://templated.co/\",\n          children: \"Templated\"\n        }), \" - A collection of free CSS and HTML5 site templates.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Emails\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"http://zurb.com/ink/\",\n          children: \"Ink\"\n        }), \" - Tool for helping create emails.\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.a, {\n          href: \"https://beefree.io/\",\n          children: \"BeeFree\"\n        }), \" - Tool for helping create emails.\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"SEO\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://adwords.google.com/KeywordPlanner\",\n          children: \"Google Keyword Planner\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://www.google.com/analytics/\",\n          children: \"Google Analytics\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://support.google.com/analytics/answer/1745147\",\n          children: \"Website Optimizer\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Note: Checkout the \", _jsx(_components.a, {\n        href: \"https://www.youtube.com/watch?v=9yKjrdcC8wA\",\n        children: \"Google Trifecta Video\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into using developer tools to help you develop your web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into using developer tools to help you develop your web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into using developer tools to help you develop your web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-04-user-interface","date":"2015-01-04","title":"User Interface","frontmatter":{"title":"User Interface"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into User Interface design for web applications.\n\nUser Experience is one of the most important parts of web applications.\n\nThe following are tips and questions to consider when working on your web application user interface.\n\n## Test for Consistency Between Browsers\n\nAre there tests for consistency with:\n\n- [ ] The [Gecko](http://en.wikipedia.org/wiki/Gecko_%28layout_engine%29) engine - i.e. [Firefox](http://firefox.com/).\n- [ ] The Webkit engine - i.e. [Safari](http://www.apple.com/safari/).\n- [ ] [Chrome](http://www.google.com/chrome).\n- [ ] [Opera](http://www.opera.com/).\n- [ ] IE Browsers - take advantage of the [Application Compatibility VPC Images](http://www.microsoft.com/Downloads/details.aspx?FamilyID=21eabb90-958f-4b64-b5f1-73d0a413c8ef&displaylang=en).\n\nFor IE Browsers, there is a Github project call [ievms](https://github.com/xdissent/ievms) which provides Virtual Machines with IE6, IE7, IE8, IE8, IE10, and IE11.\n\nAlso consider how the same browser will render your site on differnet operating systems. Consider a service like [Browsershots](http://www.browsershots.org/) or [Litmus](https://litmus.com/).\n\n## Do your Positive, Negative, and Neutral Buttons look different?\n\nImage from [UX Movement](http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/).\n\nHave your Positive Action buttons and your Neutral and Negative Action buttons look distinctly different.  Notice that in the above example, not only are the colors different, but one is bordered and ther other is filled in, making it accessible to those with color-blindness.\n\n## Test for Mobile Consistency\n\nAre there tests for consistency with:\n\n- [ ] Android phones and tablets\n- [ ] iOS phones and tablets\n- [ ] Screen readers\n- [ ] Search engines\n\nFor more information, check out Mobile and Developer Tools.\n\n## Do you have a staging environment?\n\nCan you deploy updates without affecting your users?\n\nTesting and staging environments are important for being able to test features, architecture, etc without breaking the user's session.\n\nHave an automated way of deploying approved changes to the live site. Consider using a version control system with an automated build system (something like [Maven](http://maven.apache.org/)).\n\n## Are errors handled in a friendly matter?\n\nUsers should receive easy to read error messages.\n\nUsers should never see:\n\n- Out Of Memory errors\n- Raw 404 pages\n- Stack Traces\n\n## Is user info crawlable on public pages?\n\nTry not to have users' email in plain text on public facing pages.  They might get spammed.\n\n## Is the `rel=\"nofollow\"` attribute on user-generated links?\n\nAvoid spam by putting the [nofollow](http://en.wikipedia.org/wiki/Nofollow) on user generated links.\n\n## Does your site have built in rate limiting and velocity checking?\n\nAny user actions should have rate limiting and velocity checking built in.  This is also a security issue.\n\nLook into [Coding Horror's post on rate limiting and velocity checking](http://blog.codinghorror.com/rate-limiting-and-velocity-checking/) for more information.\n\n## No inline styles\n\nAll CSS should be in stylesheets.\n\n## Accessibility\n\nCheck to make sure your website is navigable from screen readers.\n\nIf you are using [Twitter Bootstrap](http://getbootstrap.com/), look into the [Bootstrap accessibility plugin](http://paypal.github.io/bootstrap-accessibility-plugin/).\n\nIf you are using [Foundation](http://foundation.zurb.com/), look into how [Foundation is built around accessibility](http://zurb.com/article/1337/foundation-now-helps-you-build-accessible).\n\nFor more on accessibility, see the full page on Accessibility.\n\n## Are you using HTML5?\n\nIf you can, start out by using HTML5.  If you do so, remember to include the [HTML5 Shiv](http://en.wikipedia.org/wiki/HTML5_Shiv) (or Shim) so that IE version before 9 can use HTML5 elements.\n\nLook into [HTML5 Boilerplate](http://html5boilerplate.com/) or [Initialzr](http://www.initializr.com/) for an HTML5 boilerplate that comes with the HTML5 shim, normalize.css, and Modernizr.\n\n## Consider Using Normalize.css\n\nConsider reseting the browser style sheets or using [normalize.css](http://necolas.github.io/normalize.css/) for consistency between browsers.\n\n## Are you using Semantic HTML?\n\nRecent HTML standards discourage the use of the `<i>` in preference for the `<em>` tag. Other HTML5 tas to consider using are:\n\n- `<article>`\n- `<aside>`\n- `<details>`\n- `<figcaption>`\n- `<figure>`\n- `<footer>`\n- `<header>`\n- `<main>`\n- `<mark>`\n- `<nav>`\n- `<section>`\n- `<summary>`\n- `<time>`\n\n## Redirect after a POST\n\nAfter a user POSTs data, redirect to a success page, to prevent a refresh from submitting data again.\n\n## Use Progressive Enhancement\n\nAllow graceful degradation of your website.\n\n- [ ] Basic content should be accessible to all web browsers\n- [ ] Basic functionality should be accessible to all web browsers\n- [ ] Sparse, semantic markup contains all content\n- [ ] Enhanced layout is provided by externally linked CSS\n- [ ] Enhanced behavior is provided by unobtrusive, externally linked JavaScript\n- [ ] End-user web browser preferences are respected\n\nSee [Progressive Enhancement](http://en.wikipedia.org/wiki/Progressive_enhancement) for more information.\n\n## Validate Forms\n\nGoing along with Security, make sure to validate all form input on the server side and give useful errors back to the user.  Once proper form security handling has been implemented, add in client side validation.  You can use HTML5's simple validation to add a small layer of responsive validation:\n\n```html\n<input id=\"username\" placeholder=\"John Jones\" required>\n```\n\nYou can use the `required` attribute to let users know on the client side before they submit their form that a field is required.\n\nYou can use the new input type to help with input validation as well:\n\n```html\n<input type=\"email\" required>\n```\n\nYou can mark invalid input with CSS as well:\n\n```css\ninput:required:invalid {\n  background: red;\n}\n```\n\nCheckout [Form Validation in HTML 5](http://basicuse.net/articles/pl/textile/html_css/form_validation_in_html5) for more information.\n\n## Use CSS Animations over JavaScript Animations\n\nYou can now use CSS animations instead of relying on JavaScript.  You can read more about CSS animations on the [Mozilla Developer Network](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations).\n\n## Look at Little Big Details\n\n[Little Big Details](http://littlebigdetails.com/) contains design inspiration from the point of view of the users.\n\nFor more websites about UI, look at our developer tools list.\n\n## Responsive Grids\n\nHaving a responsve layout is great for creating one application that looks good on mobile and desktop devices.  A Responsive Layout can be achieved by using popular frameworks like:\n\n- [Bootstrap](http://getbootstrap.com/)\n- [SemanticUI](http://semantic-ui.com/)\n- [Foundation](http://foundation.zurb.com/)\n\nand more.\n\nYou can also create a custom grid if the above frameworks are too large for you to use.  Check out [this tutorial on Minimal Responsive Grids](http://jordanlev.github.io/grid/).\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into User Interface design for web applications.</p>\n<p>User Experience is one of the most important parts of web applications.</p>\n<p>The following are tips and questions to consider when working on your web application user interface.</p>\n<h2>Test for Consistency Between Browsers</h2>\n<p>Are there tests for consistency with:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->The <a href=\"http://en.wikipedia.org/wiki/Gecko_%28layout_engine%29\">Gecko</a> engine - i.e. <a href=\"http://firefox.com/\">Firefox</a>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->The Webkit engine - i.e. <a href=\"http://www.apple.com/safari/\">Safari</a>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <a href=\"http://www.google.com/chrome\">Chrome</a>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <a href=\"http://www.opera.com/\">Opera</a>.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->IE Browsers - take advantage of the <a href=\"http://www.microsoft.com/Downloads/details.aspx?FamilyID=21eabb90-958f-4b64-b5f1-73d0a413c8ef&amp;displaylang=en\">Application Compatibility VPC Images</a>.</li>\n</ul>\n<p>For IE Browsers, there is a Github project call <a href=\"https://github.com/xdissent/ievms\">ievms</a> which provides Virtual Machines with IE6, IE7, IE8, IE8, IE10, and IE11.</p>\n<p>Also consider how the same browser will render your site on differnet operating systems. Consider a service like <a href=\"http://www.browsershots.org/\">Browsershots</a> or <a href=\"https://litmus.com/\">Litmus</a>.</p>\n<h2>Do your Positive, Negative, and Neutral Buttons look different?</h2>\n<p>Image from <a href=\"http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/\">UX Movement</a>.</p>\n<p>Have your Positive Action buttons and your Neutral and Negative Action buttons look distinctly different.  Notice that in the above example, not only are the colors different, but one is bordered and ther other is filled in, making it accessible to those with color-blindness.</p>\n<h2>Test for Mobile Consistency</h2>\n<p>Are there tests for consistency with:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Android phones and tablets</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->iOS phones and tablets</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Screen readers</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Search engines</li>\n</ul>\n<p>For more information, check out Mobile and Developer Tools.</p>\n<h2>Do you have a staging environment?</h2>\n<p>Can you deploy updates without affecting your users?</p>\n<p>Testing and staging environments are important for being able to test features, architecture, etc without breaking the user&#x27;s session.</p>\n<p>Have an automated way of deploying approved changes to the live site. Consider using a version control system with an automated build system (something like <a href=\"http://maven.apache.org/\">Maven</a>).</p>\n<h2>Are errors handled in a friendly matter?</h2>\n<p>Users should receive easy to read error messages.</p>\n<p>Users should never see:</p>\n<ul>\n<li>Out Of Memory errors</li>\n<li>Raw 404 pages</li>\n<li>Stack Traces</li>\n</ul>\n<h2>Is user info crawlable on public pages?</h2>\n<p>Try not to have users&#x27; email in plain text on public facing pages.  They might get spammed.</p>\n<h2>Is the <code>rel=&quot;nofollow&quot;</code> attribute on user-generated links?</h2>\n<p>Avoid spam by putting the <a href=\"http://en.wikipedia.org/wiki/Nofollow\">nofollow</a> on user generated links.</p>\n<h2>Does your site have built in rate limiting and velocity checking?</h2>\n<p>Any user actions should have rate limiting and velocity checking built in.  This is also a security issue.</p>\n<p>Look into <a href=\"http://blog.codinghorror.com/rate-limiting-and-velocity-checking/\">Coding Horror&#x27;s post on rate limiting and velocity checking</a> for more information.</p>\n<h2>No inline styles</h2>\n<p>All CSS should be in stylesheets.</p>\n<h2>Accessibility</h2>\n<p>Check to make sure your website is navigable from screen readers.</p>\n<p>If you are using <a href=\"http://getbootstrap.com/\">Twitter Bootstrap</a>, look into the <a href=\"http://paypal.github.io/bootstrap-accessibility-plugin/\">Bootstrap accessibility plugin</a>.</p>\n<p>If you are using <a href=\"http://foundation.zurb.com/\">Foundation</a>, look into how <a href=\"http://zurb.com/article/1337/foundation-now-helps-you-build-accessible\">Foundation is built around accessibility</a>.</p>\n<p>For more on accessibility, see the full page on Accessibility.</p>\n<h2>Are you using HTML5?</h2>\n<p>If you can, start out by using HTML5.  If you do so, remember to include the <a href=\"http://en.wikipedia.org/wiki/HTML5_Shiv\">HTML5 Shiv</a> (or Shim) so that IE version before 9 can use HTML5 elements.</p>\n<p>Look into <a href=\"http://html5boilerplate.com/\">HTML5 Boilerplate</a> or <a href=\"http://www.initializr.com/\">Initialzr</a> for an HTML5 boilerplate that comes with the HTML5 shim, normalize.css, and Modernizr.</p>\n<h2>Consider Using Normalize.css</h2>\n<p>Consider reseting the browser style sheets or using <a href=\"http://necolas.github.io/normalize.css/\">normalize.css</a> for consistency between browsers.</p>\n<h2>Are you using Semantic HTML?</h2>\n<p>Recent HTML standards discourage the use of the <code>&lt;i&gt;</code> in preference for the <code>&lt;em&gt;</code> tag. Other HTML5 tas to consider using are:</p>\n<ul>\n<li><code>&lt;article&gt;</code></li>\n<li><code>&lt;aside&gt;</code></li>\n<li><code>&lt;details&gt;</code></li>\n<li><code>&lt;figcaption&gt;</code></li>\n<li><code>&lt;figure&gt;</code></li>\n<li><code>&lt;footer&gt;</code></li>\n<li><code>&lt;header&gt;</code></li>\n<li><code>&lt;main&gt;</code></li>\n<li><code>&lt;mark&gt;</code></li>\n<li><code>&lt;nav&gt;</code></li>\n<li><code>&lt;section&gt;</code></li>\n<li><code>&lt;summary&gt;</code></li>\n<li><code>&lt;time&gt;</code></li>\n</ul>\n<h2>Redirect after a POST</h2>\n<p>After a user POSTs data, redirect to a success page, to prevent a refresh from submitting data again.</p>\n<h2>Use Progressive Enhancement</h2>\n<p>Allow graceful degradation of your website.</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Basic content should be accessible to all web browsers</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Basic functionality should be accessible to all web browsers</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Sparse, semantic markup contains all content</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Enhanced layout is provided by externally linked CSS</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->Enhanced behavior is provided by unobtrusive, externally linked JavaScript</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- -->End-user web browser preferences are respected</li>\n</ul>\n<p>See <a href=\"http://en.wikipedia.org/wiki/Progressive_enhancement\">Progressive Enhancement</a> for more information.</p>\n<h2>Validate Forms</h2>\n<p>Going along with Security, make sure to validate all form input on the server side and give useful errors back to the user.  Once proper form security handling has been implemented, add in client side validation.  You can use HTML5&#x27;s simple validation to add a small layer of responsive validation:</p>\n<pre><code class=\"language-html\">&lt;input id=&quot;username&quot; placeholder=&quot;John Jones&quot; required&gt;\n</code></pre>\n<p>You can use the <code>required</code> attribute to let users know on the client side before they submit their form that a field is required.</p>\n<p>You can use the new input type to help with input validation as well:</p>\n<pre><code class=\"language-html\">&lt;input type=&quot;email&quot; required&gt;\n</code></pre>\n<p>You can mark invalid input with CSS as well:</p>\n<pre><code class=\"language-css\">input:required:invalid {\n  background: red;\n}\n</code></pre>\n<p>Checkout <a href=\"http://basicuse.net/articles/pl/textile/html_css/form_validation_in_html5\">Form Validation in HTML 5</a> for more information.</p>\n<h2>Use CSS Animations over JavaScript Animations</h2>\n<p>You can now use CSS animations instead of relying on JavaScript.  You can read more about CSS animations on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations\">Mozilla Developer Network</a>.</p>\n<h2>Look at Little Big Details</h2>\n<p><a href=\"http://littlebigdetails.com/\">Little Big Details</a> contains design inspiration from the point of view of the users.</p>\n<p>For more websites about UI, look at our developer tools list.</p>\n<h2>Responsive Grids</h2>\n<p>Having a responsve layout is great for creating one application that looks good on mobile and desktop devices.  A Responsive Layout can be achieved by using popular frameworks like:</p>\n<ul>\n<li><a href=\"http://getbootstrap.com/\">Bootstrap</a></li>\n<li><a href=\"http://semantic-ui.com/\">SemanticUI</a></li>\n<li><a href=\"http://foundation.zurb.com/\">Foundation</a></li>\n</ul>\n<p>and more.</p>\n<p>You can also create a custom grid if the above frameworks are too large for you to use.  Check out <a href=\"http://jordanlev.github.io/grid/\">this tutorial on Minimal Responsive Grids</a>.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    input: \"input\",\n    a: \"a\",\n    code: \"code\",\n    pre: \"pre\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into User Interface design for web applications.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"User Experience is one of the most important parts of web applications.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The following are tips and questions to consider when working on your web application user interface.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Test for Consistency Between Browsers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Are there tests for consistency with:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"The \", _jsx(_components.a, {\n          href: \"http://en.wikipedia.org/wiki/Gecko_%28layout_engine%29\",\n          children: \"Gecko\"\n        }), \" engine - i.e. \", _jsx(_components.a, {\n          href: \"http://firefox.com/\",\n          children: \"Firefox\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"The Webkit engine - i.e. \", _jsx(_components.a, {\n          href: \"http://www.apple.com/safari/\",\n          children: \"Safari\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", _jsx(_components.a, {\n          href: \"http://www.google.com/chrome\",\n          children: \"Chrome\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", _jsx(_components.a, {\n          href: \"http://www.opera.com/\",\n          children: \"Opera\"\n        }), \".\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"IE Browsers - take advantage of the \", _jsx(_components.a, {\n          href: \"http://www.microsoft.com/Downloads/details.aspx?FamilyID=21eabb90-958f-4b64-b5f1-73d0a413c8ef&displaylang=en\",\n          children: \"Application Compatibility VPC Images\"\n        }), \".\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"For IE Browsers, there is a Github project call \", _jsx(_components.a, {\n        href: \"https://github.com/xdissent/ievms\",\n        children: \"ievms\"\n      }), \" which provides Virtual Machines with IE6, IE7, IE8, IE8, IE10, and IE11.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Also consider how the same browser will render your site on differnet operating systems. Consider a service like \", _jsx(_components.a, {\n        href: \"http://www.browsershots.org/\",\n        children: \"Browsershots\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"https://litmus.com/\",\n        children: \"Litmus\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do your Positive, Negative, and Neutral Buttons look different?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Image from \", _jsx(_components.a, {\n        href: \"http://uxmovement.com/buttons/how-button-color-contrast-guides-users-to-action/\",\n        children: \"UX Movement\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Have your Positive Action buttons and your Neutral and Negative Action buttons look distinctly different.  Notice that in the above example, not only are the colors different, but one is bordered and ther other is filled in, making it accessible to those with color-blindness.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Test for Mobile Consistency\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Are there tests for consistency with:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Android phones and tablets\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"iOS phones and tablets\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Screen readers\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Search engines\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For more information, check out Mobile and Developer Tools.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do you have a staging environment?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Can you deploy updates without affecting your users?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Testing and staging environments are important for being able to test features, architecture, etc without breaking the user's session.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Have an automated way of deploying approved changes to the live site. Consider using a version control system with an automated build system (something like \", _jsx(_components.a, {\n        href: \"http://maven.apache.org/\",\n        children: \"Maven\"\n      }), \").\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Are errors handled in a friendly matter?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Users should receive easy to read error messages.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Users should never see:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Out Of Memory errors\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Raw 404 pages\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Stack Traces\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Is user info crawlable on public pages?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Try not to have users' email in plain text on public facing pages.  They might get spammed.\"\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"Is the \", _jsx(_components.code, {\n        children: \"rel=\\\"nofollow\\\"\"\n      }), \" attribute on user-generated links?\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Avoid spam by putting the \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Nofollow\",\n        children: \"nofollow\"\n      }), \" on user generated links.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Does your site have built in rate limiting and velocity checking?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Any user actions should have rate limiting and velocity checking built in.  This is also a security issue.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Look into \", _jsx(_components.a, {\n        href: \"http://blog.codinghorror.com/rate-limiting-and-velocity-checking/\",\n        children: \"Coding Horror's post on rate limiting and velocity checking\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"No inline styles\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"All CSS should be in stylesheets.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Accessibility\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Check to make sure your website is navigable from screen readers.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using \", _jsx(_components.a, {\n        href: \"http://getbootstrap.com/\",\n        children: \"Twitter Bootstrap\"\n      }), \", look into the \", _jsx(_components.a, {\n        href: \"http://paypal.github.io/bootstrap-accessibility-plugin/\",\n        children: \"Bootstrap accessibility plugin\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you are using \", _jsx(_components.a, {\n        href: \"http://foundation.zurb.com/\",\n        children: \"Foundation\"\n      }), \", look into how \", _jsx(_components.a, {\n        href: \"http://zurb.com/article/1337/foundation-now-helps-you-build-accessible\",\n        children: \"Foundation is built around accessibility\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For more on accessibility, see the full page on Accessibility.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Are you using HTML5?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you can, start out by using HTML5.  If you do so, remember to include the \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/HTML5_Shiv\",\n        children: \"HTML5 Shiv\"\n      }), \" (or Shim) so that IE version before 9 can use HTML5 elements.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Look into \", _jsx(_components.a, {\n        href: \"http://html5boilerplate.com/\",\n        children: \"HTML5 Boilerplate\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"http://www.initializr.com/\",\n        children: \"Initialzr\"\n      }), \" for an HTML5 boilerplate that comes with the HTML5 shim, normalize.css, and Modernizr.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Consider Using Normalize.css\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Consider reseting the browser style sheets or using \", _jsx(_components.a, {\n        href: \"http://necolas.github.io/normalize.css/\",\n        children: \"normalize.css\"\n      }), \" for consistency between browsers.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Are you using Semantic HTML?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Recent HTML standards discourage the use of the \", _jsx(_components.code, {\n        children: \"<i>\"\n      }), \" in preference for the \", _jsx(_components.code, {\n        children: \"<em>\"\n      }), \" tag. Other HTML5 tas to consider using are:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<article>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<aside>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<details>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<figcaption>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<figure>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<footer>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<header>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<main>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<mark>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<nav>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<section>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<summary>\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.code, {\n          children: \"<time>\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Redirect after a POST\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After a user POSTs data, redirect to a success page, to prevent a refresh from submitting data again.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use Progressive Enhancement\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Allow graceful degradation of your website.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Basic content should be accessible to all web browsers\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Basic functionality should be accessible to all web browsers\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Sparse, semantic markup contains all content\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Enhanced layout is provided by externally linked CSS\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"Enhanced behavior is provided by unobtrusive, externally linked JavaScript\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \"End-user web browser preferences are respected\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Progressive_enhancement\",\n        children: \"Progressive Enhancement\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validate Forms\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Going along with Security, make sure to validate all form input on the server side and give useful errors back to the user.  Once proper form security handling has been implemented, add in client side validation.  You can use HTML5's simple validation to add a small layer of responsive validation:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<input id=\\\"username\\\" placeholder=\\\"John Jones\\\" required>\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can use the \", _jsx(_components.code, {\n        children: \"required\"\n      }), \" attribute to let users know on the client side before they submit their form that a field is required.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can use the new input type to help with input validation as well:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<input type=\\\"email\\\" required>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can mark invalid input with CSS as well:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \"input:required:invalid {\\n  background: red;\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Checkout \", _jsx(_components.a, {\n        href: \"http://basicuse.net/articles/pl/textile/html_css/form_validation_in_html5\",\n        children: \"Form Validation in HTML 5\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use CSS Animations over JavaScript Animations\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can now use CSS animations instead of relying on JavaScript.  You can read more about CSS animations on the \", _jsx(_components.a, {\n        href: \"https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Using_CSS_animations\",\n        children: \"Mozilla Developer Network\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Look at Little Big Details\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.a, {\n        href: \"http://littlebigdetails.com/\",\n        children: \"Little Big Details\"\n      }), \" contains design inspiration from the point of view of the users.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For more websites about UI, look at our developer tools list.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Responsive Grids\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Having a responsve layout is great for creating one application that looks good on mobile and desktop devices.  A Responsive Layout can be achieved by using popular frameworks like:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://getbootstrap.com/\",\n          children: \"Bootstrap\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://semantic-ui.com/\",\n          children: \"SemanticUI\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"http://foundation.zurb.com/\",\n          children: \"Foundation\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and more.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also create a custom grid if the above frameworks are too large for you to use.  Check out \", _jsx(_components.a, {\n        href: \"http://jordanlev.github.io/grid/\",\n        children: \"this tutorial on Minimal Responsive Grids\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into User Interface design for web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into User Interface design for web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into User Interface design for web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-04-web-standards","date":"2015-01-04","title":"Web Standards","frontmatter":{"title":"Web Standards"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into using web standards and best practices.\n\n## Check that GET and POST Requests are Used Properly\n\n`GET` request should be for requesting information.\n\n`POST` requests should be for sending information.\n\nA `GET` request should not change the object that is being requests.\n\n## Validate your HTML and CSS\n\nWrite your [XHTML](http://www.w3.org/TR/xhtml1/) or [HTML](http://www.w3.org/TR/REC-html40/) and [CSS](http://www.w3.org/TR/CSS2/) according to [the W3C specifications](http://www.w3.org/TR/) and make sure they [validate](http://validator.w3.org/).\n\nAvoid browser quirks modes by doing this.\n\n## Use 301 and 302 Redirects Correctly\n\nAccording to [Bigoak Inc](http://www.bigoakinc.com/blog/when-to-use-a-301-vs-302-redirect/):\n\n> All three major search engines handle 301 redirects the same, that is to say they ignore the original URL and instead index the destination URL.\n\n> The three major engines handle 302 redirects very differently, and because of this 302s are typically not recommended.\n\nBest practice is to use 301 redirects (which are permanent and are usually cached by the browser).  For temporary moves, use 302 redirects.\n\n## Force IE to Use Unicode for Parameters\n\nIf you have ever seen `utf8=✓` in the parameter listing of a url, it's in order to [force Internet Explorer (5, 6, 7 and 8) to encode its parameters as unicode](http://stackoverflow.com/questions/3222013/what-is-the-snowman-param-in-ruby-on-rails-3-forms-for/3348524#3348524).  \n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into using web standards and best practices.</p>\n<h2>Check that GET and POST Requests are Used Properly</h2>\n<p><code>GET</code> request should be for requesting information.</p>\n<p><code>POST</code> requests should be for sending information.</p>\n<p>A <code>GET</code> request should not change the object that is being requests.</p>\n<h2>Validate your HTML and CSS</h2>\n<p>Write your <a href=\"http://www.w3.org/TR/xhtml1/\">XHTML</a> or <a href=\"http://www.w3.org/TR/REC-html40/\">HTML</a> and <a href=\"http://www.w3.org/TR/CSS2/\">CSS</a> according to <a href=\"http://www.w3.org/TR/\">the W3C specifications</a> and make sure they <a href=\"http://validator.w3.org/\">validate</a>.</p>\n<p>Avoid browser quirks modes by doing this.</p>\n<h2>Use 301 and 302 Redirects Correctly</h2>\n<p>According to <a href=\"http://www.bigoakinc.com/blog/when-to-use-a-301-vs-302-redirect/\">Bigoak Inc</a>:</p>\n<blockquote>\n<p>All three major search engines handle 301 redirects the same, that is to say they ignore the original URL and instead index the destination URL.</p>\n</blockquote>\n<blockquote>\n<p>The three major engines handle 302 redirects very differently, and because of this 302s are typically not recommended.</p>\n</blockquote>\n<p>Best practice is to use 301 redirects (which are permanent and are usually cached by the browser).  For temporary moves, use 302 redirects.</p>\n<h2>Force IE to Use Unicode for Parameters</h2>\n<p>If you have ever seen <code>utf8=✓</code> in the parameter listing of a url, it&#x27;s in order to <a href=\"http://stackoverflow.com/questions/3222013/what-is-the-snowman-param-in-ruby-on-rails-3-forms-for/3348524#3348524\">force Internet Explorer (5, 6, 7 and 8) to encode its parameters as unicode</a>.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    code: \"code\",\n    a: \"a\",\n    blockquote: \"blockquote\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into using web standards and best practices.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Check that GET and POST Requests are Used Properly\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"GET\"\n      }), \" request should be for requesting information.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"POST\"\n      }), \" requests should be for sending information.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A \", _jsx(_components.code, {\n        children: \"GET\"\n      }), \" request should not change the object that is being requests.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Validate your HTML and CSS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Write your \", _jsx(_components.a, {\n        href: \"http://www.w3.org/TR/xhtml1/\",\n        children: \"XHTML\"\n      }), \" or \", _jsx(_components.a, {\n        href: \"http://www.w3.org/TR/REC-html40/\",\n        children: \"HTML\"\n      }), \" and \", _jsx(_components.a, {\n        href: \"http://www.w3.org/TR/CSS2/\",\n        children: \"CSS\"\n      }), \" according to \", _jsx(_components.a, {\n        href: \"http://www.w3.org/TR/\",\n        children: \"the W3C specifications\"\n      }), \" and make sure they \", _jsx(_components.a, {\n        href: \"http://validator.w3.org/\",\n        children: \"validate\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Avoid browser quirks modes by doing this.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use 301 and 302 Redirects Correctly\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"According to \", _jsx(_components.a, {\n        href: \"http://www.bigoakinc.com/blog/when-to-use-a-301-vs-302-redirect/\",\n        children: \"Bigoak Inc\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"All three major search engines handle 301 redirects the same, that is to say they ignore the original URL and instead index the destination URL.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"The three major engines handle 302 redirects very differently, and because of this 302s are typically not recommended.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Best practice is to use 301 redirects (which are permanent and are usually cached by the browser).  For temporary moves, use 302 redirects.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Force IE to Use Unicode for Parameters\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If you have ever seen \", _jsx(_components.code, {\n        children: \"utf8=✓\"\n      }), \" in the parameter listing of a url, it's in order to \", _jsx(_components.a, {\n        href: \"http://stackoverflow.com/questions/3222013/what-is-the-snowman-param-in-ruby-on-rails-3-forms-for/3348524#3348524\",\n        children: \"force Internet Explorer (5, 6, 7 and 8) to encode its parameters as unicode\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into using web standards and best practices.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into using web standards and best practices.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into using web standards and best practices.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},{"slug":"2015-01-03-security","date":"2015-01-03","title":"Security","frontmatter":{"title":"Security"},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into security for web applications.\n\n## Prevent Against SQL Injection\n\nRead about [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) and learn how to prevent it for the langauge and database you are using.\n\n## All User Input is Filtered\n\nNever trust user input.  This includes cookies and hidden form field values.\n\n## Read the Open Web Application Security Project\n\nRead [the Open Web Application Security Project](https://www.owasp.org/index.php/Category:OWASP_Guide_Project).\n\n## All Passwords are Hashed with a Salt\n\nHash all passwords using a [salt](http://security.stackexchange.com/q/21263/396) and all salts are different to prevent against [rainbow attacks](http://en.wikipedia.org/wiki/Rainbow_table).\n\nThe hashing algorithm should be bcrypt or scrypt for storing passwords.  Look into [How To Safely Sroe a Password](http://codahale.com/how-to-safely-store-a-password/).\n\nDo **not** use MD5 or any SHA algorithm.  SHA algorithms are meant to be fast, which should not be used for trying to securely store passwords.\n\n## Use a Standard Authentication System\n\nDo not role your own authentication system.\n\n## Process Credit Card Information Correctly\n\nLook into the [PCI Security Standards](https://www.pcisecuritystandards.org/) for financial security information.\n\n## Use HTTPS for Sensitive Data\n\nSet up your [SSL](http://www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt)/[HTTPS](http://en.wikipedia.org/wiki/Https) certs correctly and check it against [SSL Labs Server Test](https://www.ssllabs.com/ssltest/).\n\n## Prevent Session Hijacking\n\nBuilt in session systems are usually premade to handle these types of attacks. It is not recommended that you roll your own, but it should have the following features:\n\n- Encrypted data traffic.  The session key in particular should be encrypted, but ideally all traffic should be encrypted by using SSL/TLS.\n- Long random session key.  Attackers should not be able to guess valid session keys.\n- Regenerating the session id after a successful login.  Prevents [session fixation](http://en.wikipedia.org/wiki/Session_fixation].\n- Change the cookie value with each and every request.  This reduces the window for an attacker to hijack the session.\n\n## Prevent Cross Site Scripting (XSS)\n\nUnfiltered query parameters that are added to the DOM are an easy way for attackers to use cross site scripting to pull data from your users.  Filter all query parameters; see [Cross-site Scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) for more information on common attacks and prevention methods.\n\n## Prevent Page Embedding\n\nYou can prevent page embedding with the following header:\n\n```\nX-Frame-Options: DENY\n```\n\nThis will cause browsers to refuse requests for framing in that page.\n\nYou can also prevent page embedding with JavaScript to prevent users from accessing your website in an iframe.  Look into this [StackOverflow solution](http://stackoverflow.com/questions/7776281/javascript-jquery-how-to-detect-if-a-page-is-embedded-by-others).\n\n## Prevent Cross Site Request Forgeries\n\nCross site request forgeries are attacks by a malicious user whereby they craft a link to a site which a user is know to have been authenticated.  For example, say your site is a bank website; the malicious user may craft a URL for you site that when a user clicks on it, deposits money into the attacker's account.  The attacker then sends the link to users who may have been logged into your bank website.\n\nAccording to [Wikipedia](http://en.wikipedia.org/wiki/Cross-site_request_forgery):\n\n> At risk are web applications that perform actions based on input from trusted and authenticated users without requiring the user to authorize the specific action. A user who is authenticated by a cookie saved in the user's web browser could unknowingly send an HTTP request to a site that trusts the user and thereby causes an unwanted action.\n\n## Prevent Click Jacking\n\nSimilar to [Page Embedding](#prevent-page-embedding), click jacking works by:\n\n> A user might receive an email with a link to a video about a news item, but another valid page, say a product page on Amazon.com, can be \"hidden\" on top or underneath the \"PLAY\" button of the news video. The user tries to \"play\" the video but actually \"buys\" the product from Amazon.\n\nOther known exploits include:\n\n- Tricking users into enabling their webcam and microphone through Flash\n- Tricking users into making their social networking profile information public\n- Making users follow someone on Twitter[8]\n- Sharing links on Facebook\n\nSee [Wikipedia](http://en.wikipedia.org/wiki/Clickjacking) for more information.\n\n## Verify That Server Software is Up to Date\n\nMake sure that the software on your system is up to date with the latest patches.\n\n## Verify That Packages, Modules, Plugins, etc are Up to Date\n\nMake sure that the latest software used by your projest is up to date with the latest patches.\n\n## Verify That Your Database is Secured\n\nMake sure that connections to the database are at least password protected.  Verify that only the least amount of permissions are being used.\n\nMake sure that confidential information is encrypted or hashed.\n\n## Attempt to Make Your App Run As Non-Root\n\nApply [the principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege) and try to have your app run as non-root as often as possible.\n\n## Use the Content-Security-Policy Header\n\nSpecify the following header to make the browser only run certain content depending on its origin:\n\n**example**\n\n```\nContent-Security-Policy: script-src 'self' https://apis.google.com\n```\n\nYou can also specify the following type of content:\n\n- script-src (JavaScript)\n- connect-src (XMLHttpRequest, WebSockets, and EventSource)\n- font-src (Fonts)\n- frame-src (Frame Urls)\n- img-src (Images)\n- media-src (Audio and Videos)\n- object-src (Flash)\n- style-src (CSS)\n\n## Do Not Allow Mime Sniffing with User Uploaded Content\n\nYou can tell browsers to not try to guess Mime Types of files with the following header:\n\n```\nX-CONTENT-TYPE-OPTIONS: nosniff\n```\n\nFor example, say a user uploads an HTML file. You intend to serve it to users as a text file, but the browser will attempt to serve it as an HTML page.  You can tell the browser that you know what you are doing and that the Mime Type you are providing is indeed correct by using the above header.\n\n## Force HTTPS Traffic\n\nYou can force HTTPS Traffic with the following header:\n\n```\nScrict-Transport-Security: max-age=31536000; includeSubDomains\n```\n\nThis will force `https://website.com` even when typing in `http://website.com`\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into security for web applications.</p>\n<h2>Prevent Against SQL Injection</h2>\n<p>Read about <a href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL injection</a> and learn how to prevent it for the langauge and database you are using.</p>\n<h2>All User Input is Filtered</h2>\n<p>Never trust user input.  This includes cookies and hidden form field values.</p>\n<h2>Read the Open Web Application Security Project</h2>\n<p>Read <a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\">the Open Web Application Security Project</a>.</p>\n<h2>All Passwords are Hashed with a Salt</h2>\n<p>Hash all passwords using a <a href=\"http://security.stackexchange.com/q/21263/396\">salt</a> and all salts are different to prevent against <a href=\"http://en.wikipedia.org/wiki/Rainbow_table\">rainbow attacks</a>.</p>\n<p>The hashing algorithm should be bcrypt or scrypt for storing passwords.  Look into <a href=\"http://codahale.com/how-to-safely-store-a-password/\">How To Safely Sroe a Password</a>.</p>\n<p>Do <strong>not</strong> use MD5 or any SHA algorithm.  SHA algorithms are meant to be fast, which should not be used for trying to securely store passwords.</p>\n<h2>Use a Standard Authentication System</h2>\n<p>Do not role your own authentication system.</p>\n<h2>Process Credit Card Information Correctly</h2>\n<p>Look into the <a href=\"https://www.pcisecuritystandards.org/\">PCI Security Standards</a> for financial security information.</p>\n<h2>Use HTTPS for Sensitive Data</h2>\n<p>Set up your <a href=\"http://www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt\">SSL</a>/<a href=\"http://en.wikipedia.org/wiki/Https\">HTTPS</a> certs correctly and check it against <a href=\"https://www.ssllabs.com/ssltest/\">SSL Labs Server Test</a>.</p>\n<h2>Prevent Session Hijacking</h2>\n<p>Built in session systems are usually premade to handle these types of attacks. It is not recommended that you roll your own, but it should have the following features:</p>\n<ul>\n<li>Encrypted data traffic.  The session key in particular should be encrypted, but ideally all traffic should be encrypted by using SSL/TLS.</li>\n<li>Long random session key.  Attackers should not be able to guess valid session keys.</li>\n<li>Regenerating the session id after a successful login.  Prevents [session fixation](<a href=\"http://en.wikipedia.org/wiki/Session_fixation%5D\">http://en.wikipedia.org/wiki/Session_fixation]</a>.</li>\n<li>Change the cookie value with each and every request.  This reduces the window for an attacker to hijack the session.</li>\n</ul>\n<h2>Prevent Cross Site Scripting (XSS)</h2>\n<p>Unfiltered query parameters that are added to the DOM are an easy way for attackers to use cross site scripting to pull data from your users.  Filter all query parameters; see <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site Scripting</a> for more information on common attacks and prevention methods.</p>\n<h2>Prevent Page Embedding</h2>\n<p>You can prevent page embedding with the following header:</p>\n<pre><code>X-Frame-Options: DENY\n</code></pre>\n<p>This will cause browsers to refuse requests for framing in that page.</p>\n<p>You can also prevent page embedding with JavaScript to prevent users from accessing your website in an iframe.  Look into this <a href=\"http://stackoverflow.com/questions/7776281/javascript-jquery-how-to-detect-if-a-page-is-embedded-by-others\">StackOverflow solution</a>.</p>\n<h2>Prevent Cross Site Request Forgeries</h2>\n<p>Cross site request forgeries are attacks by a malicious user whereby they craft a link to a site which a user is know to have been authenticated.  For example, say your site is a bank website; the malicious user may craft a URL for you site that when a user clicks on it, deposits money into the attacker&#x27;s account.  The attacker then sends the link to users who may have been logged into your bank website.</p>\n<p>According to <a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">Wikipedia</a>:</p>\n<blockquote>\n<p>At risk are web applications that perform actions based on input from trusted and authenticated users without requiring the user to authorize the specific action. A user who is authenticated by a cookie saved in the user&#x27;s web browser could unknowingly send an HTTP request to a site that trusts the user and thereby causes an unwanted action.</p>\n</blockquote>\n<h2>Prevent Click Jacking</h2>\n<p>Similar to <a href=\"#prevent-page-embedding\">Page Embedding</a>, click jacking works by:</p>\n<blockquote>\n<p>A user might receive an email with a link to a video about a news item, but another valid page, say a product page on Amazon.com, can be &quot;hidden&quot; on top or underneath the &quot;PLAY&quot; button of the news video. The user tries to &quot;play&quot; the video but actually &quot;buys&quot; the product from Amazon.</p>\n</blockquote>\n<p>Other known exploits include:</p>\n<ul>\n<li>Tricking users into enabling their webcam and microphone through Flash</li>\n<li>Tricking users into making their social networking profile information public</li>\n<li>Making users follow someone on Twitter[8]</li>\n<li>Sharing links on Facebook</li>\n</ul>\n<p>See <a href=\"http://en.wikipedia.org/wiki/Clickjacking\">Wikipedia</a> for more information.</p>\n<h2>Verify That Server Software is Up to Date</h2>\n<p>Make sure that the software on your system is up to date with the latest patches.</p>\n<h2>Verify That Packages, Modules, Plugins, etc are Up to Date</h2>\n<p>Make sure that the latest software used by your projest is up to date with the latest patches.</p>\n<h2>Verify That Your Database is Secured</h2>\n<p>Make sure that connections to the database are at least password protected.  Verify that only the least amount of permissions are being used.</p>\n<p>Make sure that confidential information is encrypted or hashed.</p>\n<h2>Attempt to Make Your App Run As Non-Root</h2>\n<p>Apply <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a> and try to have your app run as non-root as often as possible.</p>\n<h2>Use the Content-Security-Policy Header</h2>\n<p>Specify the following header to make the browser only run certain content depending on its origin:</p>\n<p><strong>example</strong></p>\n<pre><code>Content-Security-Policy: script-src &#x27;self&#x27; https://apis.google.com\n</code></pre>\n<p>You can also specify the following type of content:</p>\n<ul>\n<li>script-src (JavaScript)</li>\n<li>connect-src (XMLHttpRequest, WebSockets, and EventSource)</li>\n<li>font-src (Fonts)</li>\n<li>frame-src (Frame Urls)</li>\n<li>img-src (Images)</li>\n<li>media-src (Audio and Videos)</li>\n<li>object-src (Flash)</li>\n<li>style-src (CSS)</li>\n</ul>\n<h2>Do Not Allow Mime Sniffing with User Uploaded Content</h2>\n<p>You can tell browsers to not try to guess Mime Types of files with the following header:</p>\n<pre><code>X-CONTENT-TYPE-OPTIONS: nosniff\n</code></pre>\n<p>For example, say a user uploads an HTML file. You intend to serve it to users as a text file, but the browser will attempt to serve it as an HTML page.  You can tell the browser that you know what you are doing and that the Mime Type you are providing is indeed correct by using the above header.</p>\n<h2>Force HTTPS Traffic</h2>\n<p>You can force HTTPS Traffic with the following header:</p>\n<pre><code>Scrict-Transport-Security: max-age=31536000; includeSubDomains\n</code></pre>\n<p>This will force <code>https://website.com</code> even when typing in <code>http://website.com</code></p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    a: \"a\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    blockquote: \"blockquote\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into security for web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Against SQL Injection\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read about \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/SQL_injection\",\n        children: \"SQL injection\"\n      }), \" and learn how to prevent it for the langauge and database you are using.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"All User Input is Filtered\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Never trust user input.  This includes cookies and hidden form field values.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Read the Open Web Application Security Project\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read \", _jsx(_components.a, {\n        href: \"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\",\n        children: \"the Open Web Application Security Project\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"All Passwords are Hashed with a Salt\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hash all passwords using a \", _jsx(_components.a, {\n        href: \"http://security.stackexchange.com/q/21263/396\",\n        children: \"salt\"\n      }), \" and all salts are different to prevent against \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Rainbow_table\",\n        children: \"rainbow attacks\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The hashing algorithm should be bcrypt or scrypt for storing passwords.  Look into \", _jsx(_components.a, {\n        href: \"http://codahale.com/how-to-safely-store-a-password/\",\n        children: \"How To Safely Sroe a Password\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Do \", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" use MD5 or any SHA algorithm.  SHA algorithms are meant to be fast, which should not be used for trying to securely store passwords.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use a Standard Authentication System\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Do not role your own authentication system.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Process Credit Card Information Correctly\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Look into the \", _jsx(_components.a, {\n        href: \"https://www.pcisecuritystandards.org/\",\n        children: \"PCI Security Standards\"\n      }), \" for financial security information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use HTTPS for Sensitive Data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set up your \", _jsx(_components.a, {\n        href: \"http://www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt\",\n        children: \"SSL\"\n      }), \"/\", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Https\",\n        children: \"HTTPS\"\n      }), \" certs correctly and check it against \", _jsx(_components.a, {\n        href: \"https://www.ssllabs.com/ssltest/\",\n        children: \"SSL Labs Server Test\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Session Hijacking\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Built in session systems are usually premade to handle these types of attacks. It is not recommended that you roll your own, but it should have the following features:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Encrypted data traffic.  The session key in particular should be encrypted, but ideally all traffic should be encrypted by using SSL/TLS.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Long random session key.  Attackers should not be able to guess valid session keys.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Regenerating the session id after a successful login.  Prevents [session fixation](\", _jsx(_components.a, {\n          href: \"http://en.wikipedia.org/wiki/Session_fixation%5D\",\n          children: \"http://en.wikipedia.org/wiki/Session_fixation]\"\n        }), \".\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Change the cookie value with each and every request.  This reduces the window for an attacker to hijack the session.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Cross Site Scripting (XSS)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Unfiltered query parameters that are added to the DOM are an easy way for attackers to use cross site scripting to pull data from your users.  Filter all query parameters; see \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Cross-site_scripting\",\n        children: \"Cross-site Scripting\"\n      }), \" for more information on common attacks and prevention methods.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Page Embedding\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can prevent page embedding with the following header:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"X-Frame-Options: DENY\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will cause browsers to refuse requests for framing in that page.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also prevent page embedding with JavaScript to prevent users from accessing your website in an iframe.  Look into this \", _jsx(_components.a, {\n        href: \"http://stackoverflow.com/questions/7776281/javascript-jquery-how-to-detect-if-a-page-is-embedded-by-others\",\n        children: \"StackOverflow solution\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Cross Site Request Forgeries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cross site request forgeries are attacks by a malicious user whereby they craft a link to a site which a user is know to have been authenticated.  For example, say your site is a bank website; the malicious user may craft a URL for you site that when a user clicks on it, deposits money into the attacker's account.  The attacker then sends the link to users who may have been logged into your bank website.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"According to \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Cross-site_request_forgery\",\n        children: \"Wikipedia\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"At risk are web applications that perform actions based on input from trusted and authenticated users without requiring the user to authorize the specific action. A user who is authenticated by a cookie saved in the user's web browser could unknowingly send an HTTP request to a site that trusts the user and thereby causes an unwanted action.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Click Jacking\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similar to \", _jsx(_components.a, {\n        href: \"#prevent-page-embedding\",\n        children: \"Page Embedding\"\n      }), \", click jacking works by:\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"A user might receive an email with a link to a video about a news item, but another valid page, say a product page on Amazon.com, can be \\\"hidden\\\" on top or underneath the \\\"PLAY\\\" button of the news video. The user tries to \\\"play\\\" the video but actually \\\"buys\\\" the product from Amazon.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Other known exploits include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Tricking users into enabling their webcam and microphone through Flash\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Tricking users into making their social networking profile information public\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Making users follow someone on Twitter[8]\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Sharing links on Facebook\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Clickjacking\",\n        children: \"Wikipedia\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Verify That Server Software is Up to Date\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that the software on your system is up to date with the latest patches.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Verify That Packages, Modules, Plugins, etc are Up to Date\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that the latest software used by your projest is up to date with the latest patches.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Verify That Your Database is Secured\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that connections to the database are at least password protected.  Verify that only the least amount of permissions are being used.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that confidential information is encrypted or hashed.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Attempt to Make Your App Run As Non-Root\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Apply \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Principle_of_least_privilege\",\n        children: \"the principle of least privilege\"\n      }), \" and try to have your app run as non-root as often as possible.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use the Content-Security-Policy Header\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Specify the following header to make the browser only run certain content depending on its origin:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"example\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Content-Security-Policy: script-src 'self' https://apis.google.com\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also specify the following type of content:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"script-src (JavaScript)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"connect-src (XMLHttpRequest, WebSockets, and EventSource)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"font-src (Fonts)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"frame-src (Frame Urls)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"img-src (Images)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"media-src (Audio and Videos)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"object-src (Flash)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"style-src (CSS)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do Not Allow Mime Sniffing with User Uploaded Content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can tell browsers to not try to guess Mime Types of files with the following header:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"X-CONTENT-TYPE-OPTIONS: nosniff\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, say a user uploads an HTML file. You intend to serve it to users as a text file, but the browser will attempt to serve it as an HTML page.  You can tell the browser that you know what you are doing and that the Mime Type you are providing is indeed correct by using the above header.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Force HTTPS Traffic\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can force HTTPS Traffic with the following header:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Scrict-Transport-Security: max-age=31536000; includeSubDomains\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will force \", _jsx(_components.code, {\n        children: \"https://website.com\"\n      }), \" even when typing in \", _jsx(_components.code, {\n        children: \"http://website.com\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into security for web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into security for web applications.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into security for web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"}],"hasNextPage":false,"hasPreviousPage":true},"__N_SSG":true}