{"pageProps":{"headTitle":"Clarity Hub - idmontie's Portfolio","project":{"slug":"2018-03-05-clarity-hub.md","date":"2018-03-05","title":"Clarity Hub","frontmatter":{"title":"Clarity Hub","description":"Clarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\n","image":"/images/project-clarity-hub.png","view_link":"https://clarityhub.io","github_link":"https://github.com/clarityhub","language_tags":["javascript","es2015+","css"],"framework_tags":["aws","react","serverless","redux"]},"contentRaw":"\nClarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\n\nClarity Hub was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.","contentHTML":"<p>Clarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.</p>\n<p>Clarity Hub was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Clarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Clarity Hub was built on AWS using S3, SNS, SQS, RDS, PostgreSQL, MongoDB, Elasticsearch, and React. We created a webapp, extensions, and a microservice backend to bring real time suggestions to customer success agents using Intercom.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nClarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.","excerptHTML":"<p>Clarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Clarity Hub finds the best answers that have worked in the past and suggests them to teams using Intercom when answering similar questions.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"next":{"slug":"2016-08-21-react-cornea.md","date":"2016-08-21","title":"react-cornea","frontmatter":{"title":"react-cornea","description":"A testing utility for generating visual diffs of your React components.\n","image":"/images/project-react-cornea.png","github_link":"https://github.com/gios-asu/react-cornea","language_tags":["javascript"],"framework_tags":["react"]},"contentRaw":"\nI made react-cornea to do image diffing of react components for CI/CD environments.\n","contentHTML":"<p>I made react-cornea to do image diffing of react components for CI/CD environments.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"I made react-cornea to do image diffing of react components for CI/CD environments.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nI made react-cornea to do image diffing of react components for CI/CD environments.","excerptHTML":"<p>I made react-cornea to do image diffing of react components for CI/CD environments.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"I made react-cornea to do image diffing of react components for CI/CD environments.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n"},"previous":null},"__N_SSG":true}