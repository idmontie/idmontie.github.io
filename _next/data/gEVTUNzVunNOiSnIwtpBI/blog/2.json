{"pageProps":{"posts":[{"slug":"2023-07-26-component-library-checklist","date":"2023-07-26","title":"Component Library Checklist","frontmatter":{"title":"Component Library Checklist","tags":["component library","checklist"]},"contentRaw":"\nThe following is a checklist I like to use to ensure I'm covering all the bases when building a component library. It's a work in progress, but I hope it can be useful to others.\n\n## Visual Language\n\n- [ ]  Color\n  - [ ]  Palettes, by category\n  - [ ]  Dark mode\n- [ ]  Typography\n  - [ ]  Headings\n  - [ ]  Text\n  - [ ]  Paragraph\n  - [ ]  Lead paragraphs\n  - [ ]  Readable text\n- [ ]  Iconography\n  - [ ]  Icons\n  - [ ]  Meaning\n- [ ]  Space\n  - [ ]  Units / measurements\n\n## Text\n\n- [ ]  Block quote\n- [ ]  Unordered list\n- [ ]  Ordered list\n- [ ]  Internal link\n- [ ]  External link\n- [ ]  Code\n\n## Buttons\n\n- [ ]  Buttons\n  - [ ]  Primary\n  - [ ]  Secondary\n  - [ ]  Button groups\n  - [ ]  Menu buttons\n  - [ ]  Split buttons\n  - [ ]  Floating action button\n  - [ ]  Brand buttons (Google, FB, Discord)\n\n## Forms\n\n- [ ]  Form controls\n  - [ ]  Text input\n  - [ ]  Email/number/other variant inputs\n  - [ ]  Multi-line text area\n  - [ ]  Radio and radio group\n  - [ ]  Checkbox and checkbox group\n  - [ ]  Select\n  - [ ]  File upload\n  - [ ]  Label\n  - [ ]  Required label\n  - [ ]  Switch\n  - [ ]  Slider\n  - [ ]  Calendar picker\n  - [ ]  Rich text editor\n- [ ]  Form structure\n\n## Layout\n\n- [ ]  Divider\n- [ ]  Box\n- [ ]  Marketing grid\n- [ ]  App grid\n- [ ]  Page transitions\n- [ ]  Resopnsive breakpoints\n\n## Content\n\n- [ ]  Image\n- [ ]  Avatar\n- [ ]  Code block\n- [ ]  Footnotes\n- [ ]  Thumbnails\n- [ ]  Video\n- [ ]  Map widget\n\n## UI Components\n\n- [ ]  Alerts\n- [ ]  Accordion\n- [ ]  Back to top\n- [ ]  Badges/tags/chips/pills\n- [ ]  Breadcrumbs\n- [ ]  Caption\n- [ ]  Cards\n  - [ ]  Panel\n  - [ ]  Callout\n- [ ]  Chat\n- [ ]  Comments\n- [ ]  Tables\n  - [ ]  Data table\n  - [ ]  Property table\n- [ ]  Drawer\n- [ ]  Filters\n- [ ]  Footer\n- [ ]  Header\n- [ ]  Error (standard error handler)\n- [ ]  Loading / spinner / shimmer\n- [ ]  Toast\n- [ ]  Notification / badge (dot)\n- [ ]  Modal\n- [ ]  Pagination\n- [ ]  Popover\n- [ ]  Progress bar\n- [ ]  Search\n- [ ]  Sidebar\n- [ ]  Sort by\n- [ ]  Tabs\n- [ ]  Tooltips\n\n## Navigation\n\n- [ ]  Action bar / toolbar\n- [ ]  Main menu / Megamenu\n- [ ]  Inline menu\n\n## Marketing\n\n- [ ]  Contact us\n- [ ]  Cookie notification\n- [ ]  Hero billboard\n- [ ]  Hero carousel\n- [ ]  Legend\n- [ ]  Pull quote\n- [ ]  Ratings\n- [ ]  Reviews\n- [ ]  Social networking\n- [ ]  Status (alpha, beta)\n- [ ]  Tips / tutorial\n\n## UI Patterns\n\n- [ ]  Authentication\n- [ ]  Create account\n- [ ]  Permissions\n- [ ]  Purchase/checkout\n- [ ]  Settings\n- [ ]  Site / app structure\n","contentHTML":"<p>The following is a checklist I like to use to ensure I&#x27;m covering all the bases when building a component library. It&#x27;s a work in progress, but I hope it can be useful to others.</p>\n<h2>Visual Language</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Color<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Palettes, by category</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Dark mode</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Typography<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Headings</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Text</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Paragraph</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Lead paragraphs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Readable text</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Iconography<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Icons</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Meaning</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Space<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Units / measurements</li>\n</ul>\n</li>\n</ul>\n<h2>Text</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Block quote</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Unordered list</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Ordered list</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Internal link</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> External link</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Code</li>\n</ul>\n<h2>Buttons</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Buttons<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Primary</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Secondary</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Button groups</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Menu buttons</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Split buttons</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Floating action button</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Brand buttons (Google, FB, Discord)</li>\n</ul>\n</li>\n</ul>\n<h2>Forms</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Form controls<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Text input</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Email/number/other variant inputs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Multi-line text area</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Radio and radio group</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Checkbox and checkbox group</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Select</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> File upload</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Label</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Required label</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Switch</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Slider</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Calendar picker</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Rich text editor</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Form structure</li>\n</ul>\n<h2>Layout</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Divider</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Box</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Marketing grid</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> App grid</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Page transitions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Resopnsive breakpoints</li>\n</ul>\n<h2>Content</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Image</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Avatar</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Code block</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Footnotes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Thumbnails</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Video</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Map widget</li>\n</ul>\n<h2>UI Components</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Alerts</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Accordion</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Back to top</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Badges/tags/chips/pills</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Breadcrumbs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Caption</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Cards<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Panel</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Callout</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Chat</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Comments</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Tables<!-- -->\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Data table</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Property table</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Drawer</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Filters</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Footer</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Header</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Error (standard error handler)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Loading / spinner / shimmer</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Toast</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Notification / badge (dot)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Modal</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Pagination</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Popover</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Progress bar</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Search</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Sidebar</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Sort by</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Tabs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Tooltips</li>\n</ul>\n<h2>Navigation</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Action bar / toolbar</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Main menu / Megamenu</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Inline menu</li>\n</ul>\n<h2>Marketing</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Contact us</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Cookie notification</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Hero billboard</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Hero carousel</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Legend</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Pull quote</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Ratings</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Reviews</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Social networking</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Status (alpha, beta)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Tips / tutorial</li>\n</ul>\n<h2>UI Patterns</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Authentication</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Create account</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Permissions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Purchase/checkout</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Settings</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled=\"\"/> <!-- --> Site / app structure</li>\n</ul>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    input: \"input\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The following is a checklist I like to use to ensure I'm covering all the bases when building a component library. It's a work in progress, but I hope it can be useful to others.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Visual Language\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Color\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Palettes, by category\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Dark mode\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Typography\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Headings\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Text\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Paragraph\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Lead paragraphs\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Readable text\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Iconography\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Icons\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Meaning\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Space\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Units / measurements\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Text\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Block quote\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Unordered list\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Ordered list\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Internal link\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" External link\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Code\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Buttons\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Buttons\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Primary\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Secondary\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Button groups\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Menu buttons\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Split buttons\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Floating action button\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Brand buttons (Google, FB, Discord)\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Forms\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Form controls\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Text input\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Email/number/other variant inputs\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Multi-line text area\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Radio and radio group\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Checkbox and checkbox group\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Select\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" File upload\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Label\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Required label\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Switch\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Slider\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Calendar picker\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Rich text editor\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Form structure\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Layout\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Divider\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Box\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Marketing grid\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" App grid\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Page transitions\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Resopnsive breakpoints\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Content\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Image\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Avatar\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Code block\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Footnotes\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Thumbnails\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Video\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Map widget\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"UI Components\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Alerts\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Accordion\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Back to top\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Badges/tags/chips/pills\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Breadcrumbs\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Caption\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Cards\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Panel\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Callout\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Chat\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Comments\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Tables\", \"\\n\", _jsxs(_components.ul, {\n          className: \"contains-task-list\",\n          children: [\"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Data table\"]\n          }), \"\\n\", _jsxs(_components.li, {\n            className: \"task-list-item\",\n            children: [_jsx(_components.input, {\n              type: \"checkbox\",\n              disabled: true\n            }), \" \", \" Property table\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Drawer\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Filters\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Footer\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Header\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Error (standard error handler)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Loading / spinner / shimmer\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Toast\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Notification / badge (dot)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Modal\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Pagination\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Popover\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Progress bar\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Search\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Sidebar\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Sort by\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Tabs\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Tooltips\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Navigation\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Action bar / toolbar\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Main menu / Megamenu\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Inline menu\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Marketing\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Contact us\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Cookie notification\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Hero billboard\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Hero carousel\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Legend\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Pull quote\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Ratings\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Reviews\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Social networking\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Status (alpha, beta)\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Tips / tutorial\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"UI Patterns\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      className: \"contains-task-list\",\n      children: [\"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Authentication\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Create account\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Permissions\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Purchase/checkout\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Settings\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        className: \"task-list-item\",\n        children: [_jsx(_components.input, {\n          type: \"checkbox\",\n          disabled: true\n        }), \" \", \" Site / app structure\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThe following is a checklist I like to use to ensure I'm covering all the bases when building a component library. It's a work in progress, but I hope it can be useful to others.","excerptHTML":"<p>The following is a checklist I like to use to ensure I&#x27;m covering all the bases when building a component library. It&#x27;s a work in progress, but I hope it can be useful to others.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"The following is a checklist I like to use to ensure I'm covering all the bases when building a component library. It's a work in progress, but I hope it can be useful to others.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["component library","checklist"]},{"slug":"2023-07-24-tsc-debugging","date":"2023-07-24","title":"Debugging slow tsc","frontmatter":{"title":"Debugging slow tsc","tags":["typescript"]},"contentRaw":"\nI was working on a project and I noticed the `tsc` check that we ran on pre-commit hooks had become dramatically slower. I was seeing near instant times to type check the entire project go to agonizingly slow minutes to check the project. I was able to narrow the range of commits to some change we made within a month window. I’m sure I could have narrowed it down by continuing to git bisect and re-running `time npx tsc`, but it was much easier to just check out main and try out the following:\n\n```bash\n# remove any pre-built definitions to get a good baseline\nrm -r .tsBuildInfo\n\n# Get some baseline stats\ntime npx tsc\n```\n\nI was seeing values around (times have been modified for blogging purposes):\n\n```bash\nreal 1m30.000s\nuser 2m0.000s\nsys 0m3.000s\n```\n\nAfter running the baseline trace, I could analyze the `tsc` trace and use a nifty tool called `analyze-trace` that will report hotspots:\n\n```bash\nnpm i -g @typescript/analyze-trace\n\nnpx tsc --generateTrace ./.trace\nnpx analyze-trace ./.trace\n```\n\nThis command will spit out which files are hotspots in your codebase. To my surprise, I was seeing build outputs from webpack as a hotspot.\n\nTurns out the `tsconfig.json` had been slightly modified and accidentally included the build folder. Adding the build folder to the excludes entry sped up the tsc command by quite a bit:\n\n```bash\nreal 0m30.000s\nuser 0m47.000s\nsys 0m2.000s\n```\n\nNot only did the trace help me identify the major hotspot in the code, but also\nindicated some additional areas that I could improve upon going forward.\n","contentHTML":"<p>I was working on a project and I noticed the <code>tsc</code> check that we ran on pre-commit hooks had become dramatically slower. I was seeing near instant times to type check the entire project go to agonizingly slow minutes to check the project. I was able to narrow the range of commits to some change we made within a month window. I’m sure I could have narrowed it down by continuing to git bisect and re-running <code>time npx tsc</code>, but it was much easier to just check out main and try out the following:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-bash\"># remove any pre-built definitions to get a good baseline\nrm -r .tsBuildInfo\n\n# Get some baseline stats\ntime npx tsc\n</code></pre></div>\n<p>I was seeing values around (times have been modified for blogging purposes):</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-bash\">real 1m30.000s\nuser 2m0.000s\nsys 0m3.000s\n</code></pre></div>\n<p>After running the baseline trace, I could analyze the <code>tsc</code> trace and use a nifty tool called <code>analyze-trace</code> that will report hotspots:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-bash\">npm i -g @typescript/analyze-trace\n\nnpx tsc --generateTrace ./.trace\nnpx analyze-trace ./.trace\n</code></pre></div>\n<p>This command will spit out which files are hotspots in your codebase. To my surprise, I was seeing build outputs from webpack as a hotspot.</p>\n<p>Turns out the <code>tsconfig.json</code> had been slightly modified and accidentally included the build folder. Adding the build folder to the excludes entry sped up the tsc command by quite a bit:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-bash\">real 0m30.000s\nuser 0m47.000s\nsys 0m2.000s\n</code></pre></div>\n<p>Not only did the trace help me identify the major hotspot in the code, but also\nindicated some additional areas that I could improve upon going forward.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"I was working on a project and I noticed the \", _jsx(_components.code, {\n        children: \"tsc\"\n      }), \" check that we ran on pre-commit hooks had become dramatically slower. I was seeing near instant times to type check the entire project go to agonizingly slow minutes to check the project. I was able to narrow the range of commits to some change we made within a month window. I’m sure I could have narrowed it down by continuing to git bisect and re-running \", _jsx(_components.code, {\n        children: \"time npx tsc\"\n      }), \", but it was much easier to just check out main and try out the following:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"# remove any pre-built definitions to get a good baseline\\nrm -r .tsBuildInfo\\n\\n# Get some baseline stats\\ntime npx tsc\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I was seeing values around (times have been modified for blogging purposes):\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"real 1m30.000s\\nuser 2m0.000s\\nsys 0m3.000s\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"After running the baseline trace, I could analyze the \", _jsx(_components.code, {\n        children: \"tsc\"\n      }), \" trace and use a nifty tool called \", _jsx(_components.code, {\n        children: \"analyze-trace\"\n      }), \" that will report hotspots:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"npm i -g @typescript/analyze-trace\\n\\nnpx tsc --generateTrace ./.trace\\nnpx analyze-trace ./.trace\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This command will spit out which files are hotspots in your codebase. To my surprise, I was seeing build outputs from webpack as a hotspot.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Turns out the \", _jsx(_components.code, {\n        children: \"tsconfig.json\"\n      }), \" had been slightly modified and accidentally included the build folder. Adding the build folder to the excludes entry sped up the tsc command by quite a bit:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-bash\",\n        children: \"real 0m30.000s\\nuser 0m47.000s\\nsys 0m2.000s\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Not only did the trace help me identify the major hotspot in the code, but also\\nindicated some additional areas that I could improve upon going forward.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nI was working on a project and I noticed the `tsc` check that we ran on pre-commit hooks had become dramatically slower. I was seeing near instant times to type check the entire project go to agonizingly slow minutes to check the project. I was able to narrow the range of commits to some change we made within a month window. I’m sure I could have narrowed it down by continuing to git bisect and re-running `time npx tsc`, but it was much easier to just check out main and try out the following:","excerptHTML":"<p>I was working on a project and I noticed the <code>tsc</code> check that we ran on pre-commit hooks had become dramatically slower. I was seeing near instant times to type check the entire project go to agonizingly slow minutes to check the project. I was able to narrow the range of commits to some change we made within a month window. I’m sure I could have narrowed it down by continuing to git bisect and re-running <code>time npx tsc</code>, but it was much easier to just check out main and try out the following:</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\"\n  }, props.components);\n  return _jsxs(_components.p, {\n    children: [\"I was working on a project and I noticed the \", _jsx(_components.code, {\n      children: \"tsc\"\n    }), \" check that we ran on pre-commit hooks had become dramatically slower. I was seeing near instant times to type check the entire project go to agonizingly slow minutes to check the project. I was able to narrow the range of commits to some change we made within a month window. I’m sure I could have narrowed it down by continuing to git bisect and re-running \", _jsx(_components.code, {\n      children: \"time npx tsc\"\n    }), \", but it was much easier to just check out main and try out the following:\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["typescript"]},{"slug":"2023-07-23-chatgpt-coding-loop","date":"2023-07-23","title":"ChatGPT, Coding, and Language","frontmatter":{"title":"ChatGPT, Coding, and Language","tags":["chatgpt"]},"contentRaw":"\nI’ve been experimenting with ChatGPT, just like everyone else. But why has it become so popular? It truly is a revolutionary piece of technology. Is it The Next Big Thing? Will it really replace all of us?\n\nMy day to day is architecture and programming, and I’ve heard all sorts of things on Twitter:\n\n- That ChatGPT can build entire iOS applications\n- ChatGPT can write whole files of code\n- ChatGPT can find bugs in code when writing tests\n\nWhen I started by own company Clarity Hub, we had a focus on machine learning to help augment human intelligence. My thought at the time was that we could leverage machine learning to augment and supplement human intelligence. The focus wouldn't be to replace any person's job, but to make it streamlined and easier to accomplish that job. Our journey started with us serving customer success agents with suggested replies and contextual information, but we eventually pivoted to a Dovetail-like application to help product teams gather, annotate, and contextualize customer interviews.\n\nWe found that augmenting activity with machine learning was not only easier to do from a technology point of view, but empowered users, rather than make them feel like their job was being replaced.\n\nEven with the advent of ChatGPT, I still see this being the short term future of it's use.\n\n## False Starts\n\nI was curious how much ChatGPT could really do given all of its hype  \n\nI asked it to build an Asteroids game using PhaserJS. Don’t worry, this isn’t another article on “Look, I got ChatGPT to build a game!”\n\nI originally just asked ChatGPT to build an Asteroids game using PhaserJS. A very vague prompt, yes, but a great starting point to figure out the limitations of ChatGPT.\n\nThe response was basically, “No I can’t”:\n\n> As an AI language model, I'm not able to write and execute code in real-time. However, I can provide you with a detailed framework to get started with creating an Asteroids game in PhaserJS.\n\nThis was followed by instructions on how I could do it myself.\n\nThe next steps of course are to be more specific, asking ChatGPT to build the application to build specific functionality:\n\n> Add the code to let the player shoot asteroids. If the player gets hit by 3 asteroids, its game over\n\nMost interactions with ChatGPT seem to go like this:\n\n![Flowchart workflow](/media/2023-07-23-chatgpt-coding-loop/Flowchart_Template_1.jpg)\n\nThis flow eventually leads to either:\n\n- Not getting what you want.\n- Getting what you want across many different responses, and then you must manually coalesce all of the different responses together to form the result you want.\n\nOnce I like the set of responses that ChatGPT has given me, I’ll ask ChatGPT to summarize for me so that I can improve the prompt further:\n\n> Take everything we just talked about and give me a prompt to ask you in the future that encapsulates all of the requirements.\n\n## A More Natural Flow\n\nI’ve talked with ChatGPT on a variety of topics, but the majority of questions relate to coding. I actively use Github Copilot, which utilizes the ChatGPT engine in the backend. I’ve built [Sora by Capsule Cat](https://marketplace.visualstudio.com/items?itemName=CapsuleCat.sora-by-capsule-cat) to have ChatGPT generate entire coding files for me as well with project context. Even then, I still use the ChatGPT UI as well.\n\n![Flowchart line](/media/2023-07-23-chatgpt-coding-loop/Flowchart_Template_2.jpg)\n\nI find that the above flow leaves me less fatigued, and more productive - at least in the context of side-projects that I’ve used ChatGPT. Research shows that when we read code and attempt logic puzzles, we use a completely different part of our brain than when we use language [[link](https://hub.jhu.edu/2020/12/17/brain-activity-while-reading-code/)]. In the above chart, you can imagine that when we write prompts, we utilize some logical reasoning, but we lean heavily on language as we talk with ChatGPT. Then when we get a response, a completely different part of the brain kicks in to read and write code.\n\n## The Hard Part About Coding\n\nEventually this leads to “the hard part about coding” which anecdotally everyone will tell you that surprise, it isn’t the coding part. What is nice about ChatGPT though is that even though the hard part isn’t writing code, it does take time, thought, and energy.\n\nIf the hard part of coding isn’t coding, then what is it? The non-exhaustive list is that it’s teamwork, communication, debugging, and requirements gathering. Oversimplifying, it’s the writing prompts part of the chart.\n","contentHTML":"<p>I’ve been experimenting with ChatGPT, just like everyone else. But why has it become so popular? It truly is a revolutionary piece of technology. Is it The Next Big Thing? Will it really replace all of us?</p>\n<p>My day to day is architecture and programming, and I’ve heard all sorts of things on Twitter:</p>\n<ul>\n<li>That ChatGPT can build entire iOS applications</li>\n<li>ChatGPT can write whole files of code</li>\n<li>ChatGPT can find bugs in code when writing tests</li>\n</ul>\n<p>When I started by own company Clarity Hub, we had a focus on machine learning to help augment human intelligence. My thought at the time was that we could leverage machine learning to augment and supplement human intelligence. The focus wouldn&#x27;t be to replace any person&#x27;s job, but to make it streamlined and easier to accomplish that job. Our journey started with us serving customer success agents with suggested replies and contextual information, but we eventually pivoted to a Dovetail-like application to help product teams gather, annotate, and contextualize customer interviews.</p>\n<p>We found that augmenting activity with machine learning was not only easier to do from a technology point of view, but empowered users, rather than make them feel like their job was being replaced.</p>\n<p>Even with the advent of ChatGPT, I still see this being the short term future of it&#x27;s use.</p>\n<h2>False Starts</h2>\n<p>I was curious how much ChatGPT could really do given all of its hype</p>\n<p>I asked it to build an Asteroids game using PhaserJS. Don’t worry, this isn’t another article on “Look, I got ChatGPT to build a game!”</p>\n<p>I originally just asked ChatGPT to build an Asteroids game using PhaserJS. A very vague prompt, yes, but a great starting point to figure out the limitations of ChatGPT.</p>\n<p>The response was basically, “No I can’t”:</p>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>As an AI language model, I&#x27;m not able to write and execute code in real-time. However, I can provide you with a detailed framework to get started with creating an Asteroids game in PhaserJS.</p>\n</blockquote>\n<p>This was followed by instructions on how I could do it myself.</p>\n<p>The next steps of course are to be more specific, asking ChatGPT to build the application to build specific functionality:</p>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>Add the code to let the player shoot asteroids. If the player gets hit by 3 asteroids, its game over</p>\n</blockquote>\n<p>Most interactions with ChatGPT seem to go like this:</p>\n<p><img alt=\"Flowchart workflow\" src=\"/media/2023-07-23-chatgpt-coding-loop/Flowchart_Template_1.jpg\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p>This flow eventually leads to either:</p>\n<ul>\n<li>Not getting what you want.</li>\n<li>Getting what you want across many different responses, and then you must manually coalesce all of the different responses together to form the result you want.</li>\n</ul>\n<p>Once I like the set of responses that ChatGPT has given me, I’ll ask ChatGPT to summarize for me so that I can improve the prompt further:</p>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>Take everything we just talked about and give me a prompt to ask you in the future that encapsulates all of the requirements.</p>\n</blockquote>\n<h2>A More Natural Flow</h2>\n<p>I’ve talked with ChatGPT on a variety of topics, but the majority of questions relate to coding. I actively use Github Copilot, which utilizes the ChatGPT engine in the backend. I’ve built <a href=\"https://marketplace.visualstudio.com/items?itemName=CapsuleCat.sora-by-capsule-cat\">Sora by Capsule Cat</a> to have ChatGPT generate entire coding files for me as well with project context. Even then, I still use the ChatGPT UI as well.</p>\n<p><img alt=\"Flowchart line\" src=\"/media/2023-07-23-chatgpt-coding-loop/Flowchart_Template_2.jpg\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p>I find that the above flow leaves me less fatigued, and more productive - at least in the context of side-projects that I’ve used ChatGPT. Research shows that when we read code and attempt logic puzzles, we use a completely different part of our brain than when we use language [<a href=\"https://hub.jhu.edu/2020/12/17/brain-activity-while-reading-code/\">link</a>]. In the above chart, you can imagine that when we write prompts, we utilize some logical reasoning, but we lean heavily on language as we talk with ChatGPT. Then when we get a response, a completely different part of the brain kicks in to read and write code.</p>\n<h2>The Hard Part About Coding</h2>\n<p>Eventually this leads to “the hard part about coding” which anecdotally everyone will tell you that surprise, it isn’t the coding part. What is nice about ChatGPT though is that even though the hard part isn’t writing code, it does take time, thought, and energy.</p>\n<p>If the hard part of coding isn’t coding, then what is it? The non-exhaustive list is that it’s teamwork, communication, debugging, and requirements gathering. Oversimplifying, it’s the writing prompts part of the chart.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    img: \"img\",\n    a: \"a\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"I’ve been experimenting with ChatGPT, just like everyone else. But why has it become so popular? It truly is a revolutionary piece of technology. Is it The Next Big Thing? Will it really replace all of us?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"My day to day is architecture and programming, and I’ve heard all sorts of things on Twitter:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"That ChatGPT can build entire iOS applications\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ChatGPT can write whole files of code\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"ChatGPT can find bugs in code when writing tests\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When I started by own company Clarity Hub, we had a focus on machine learning to help augment human intelligence. My thought at the time was that we could leverage machine learning to augment and supplement human intelligence. The focus wouldn't be to replace any person's job, but to make it streamlined and easier to accomplish that job. Our journey started with us serving customer success agents with suggested replies and contextual information, but we eventually pivoted to a Dovetail-like application to help product teams gather, annotate, and contextualize customer interviews.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We found that augmenting activity with machine learning was not only easier to do from a technology point of view, but empowered users, rather than make them feel like their job was being replaced.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Even with the advent of ChatGPT, I still see this being the short term future of it's use.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"False Starts\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I was curious how much ChatGPT could really do given all of its hype\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I asked it to build an Asteroids game using PhaserJS. Don’t worry, this isn’t another article on “Look, I got ChatGPT to build a game!”\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I originally just asked ChatGPT to build an Asteroids game using PhaserJS. A very vague prompt, yes, but a great starting point to figure out the limitations of ChatGPT.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The response was basically, “No I can’t”:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"As an AI language model, I'm not able to write and execute code in real-time. However, I can provide you with a detailed framework to get started with creating an Asteroids game in PhaserJS.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This was followed by instructions on how I could do it myself.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The next steps of course are to be more specific, asking ChatGPT to build the application to build specific functionality:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Add the code to let the player shoot asteroids. If the player gets hit by 3 asteroids, its game over\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Most interactions with ChatGPT seem to go like this:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-07-23-chatgpt-coding-loop/Flowchart_Template_1.jpg\",\n        alt: \"Flowchart workflow\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This flow eventually leads to either:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Not getting what you want.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Getting what you want across many different responses, and then you must manually coalesce all of the different responses together to form the result you want.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once I like the set of responses that ChatGPT has given me, I’ll ask ChatGPT to summarize for me so that I can improve the prompt further:\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Take everything we just talked about and give me a prompt to ask you in the future that encapsulates all of the requirements.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"A More Natural Flow\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I’ve talked with ChatGPT on a variety of topics, but the majority of questions relate to coding. I actively use Github Copilot, which utilizes the ChatGPT engine in the backend. I’ve built \", _jsx(_components.a, {\n        href: \"https://marketplace.visualstudio.com/items?itemName=CapsuleCat.sora-by-capsule-cat\",\n        children: \"Sora by Capsule Cat\"\n      }), \" to have ChatGPT generate entire coding files for me as well with project context. Even then, I still use the ChatGPT UI as well.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-07-23-chatgpt-coding-loop/Flowchart_Template_2.jpg\",\n        alt: \"Flowchart line\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I find that the above flow leaves me less fatigued, and more productive - at least in the context of side-projects that I’ve used ChatGPT. Research shows that when we read code and attempt logic puzzles, we use a completely different part of our brain than when we use language [\", _jsx(_components.a, {\n        href: \"https://hub.jhu.edu/2020/12/17/brain-activity-while-reading-code/\",\n        children: \"link\"\n      }), \"]. In the above chart, you can imagine that when we write prompts, we utilize some logical reasoning, but we lean heavily on language as we talk with ChatGPT. Then when we get a response, a completely different part of the brain kicks in to read and write code.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The Hard Part About Coding\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Eventually this leads to “the hard part about coding” which anecdotally everyone will tell you that surprise, it isn’t the coding part. What is nice about ChatGPT though is that even though the hard part isn’t writing code, it does take time, thought, and energy.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If the hard part of coding isn’t coding, then what is it? The non-exhaustive list is that it’s teamwork, communication, debugging, and requirements gathering. Oversimplifying, it’s the writing prompts part of the chart.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nI’ve been experimenting with ChatGPT, just like everyone else. But why has it become so popular? It truly is a revolutionary piece of technology. Is it The Next Big Thing? Will it really replace all of us?","excerptHTML":"<p>I’ve been experimenting with ChatGPT, just like everyone else. But why has it become so popular? It truly is a revolutionary piece of technology. Is it The Next Big Thing? Will it really replace all of us?</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"I’ve been experimenting with ChatGPT, just like everyone else. But why has it become so popular? It truly is a revolutionary piece of technology. Is it The Next Big Thing? Will it really replace all of us?\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["chatgpt"]},{"slug":"2023-07-21-backend-frontend","date":"2023-07-21","title":"Backend for Frontend","frontmatter":{"title":"Backend for Frontend","tags":["backend","frontend","architecture"]},"contentRaw":"\nThe Backend for the Frontend (BEFFE) is typically stateless and acts as a proxy for other services, including authentication, authorization, and core services. The recent divorce of browser code being rendered by backend services was created by SPAs - Single Page Applications. In simpler architectures, a SPA and service could be as simple as:\n\n```mermaid\ngraph LR\n  SPA --> Backend\n```\n\nSPAs also became popular because the codebase could be built into static assets that could be services.\n\nHowever, as complexity arises with the above architecture and the SPA starts to rely on more services, a thin proxy is typically introduced, like NGINX:\n\n```mermaid\ngraph LR\n  SPA --> NGINX\n  NGINX --> Service1\n  NGINX --> Service2\n  NGINX --> Service3\n```\n\nWhile proxies like NGINX can continue to be useful, using it as a proxy ends up putting a lot of routing and additional API handling logic on the client. The client now ends up also having to support, understand, and embed how to interact with the data rom all the downstream services. To simplify and create consistent contracts with the UI, we can create a proxy service: a Backend for the Frontend:\n\n```mermaid\ngraph LR\n  SPA --> BEFFE\n  BEFFE --> Service1\n  BEFFE --> Service2\n  BEFFE --> Service3\n```\n\nThe Backend for the Frontend ends up serving two purposes:\n\n- It acts as a proxy for all UI requests\n- It manages and massages the APIs of downstream services to be a consistent API for the UI.\n\nWhen building a UI, only a single service that acts like an API Gateway is required to understand and encode within the application.\n\nThe Backend for the Frontend model also allows engineers working on services to separate logic for the UI with the logic from an internal service. An internal service can rely on the Backend for the Frontend to handle things like Authentication, Authorization, Caching, and Rate-limits. These mechanisms may also be implemented as independent services, but the Backend for the Frontend can make multiple API calls per any API request from the UI.\n\n## Moving away from SPAs\n\nA newer development in the UI space is server side render the application. If we are already introducing additional complexity by having a Backend for the Frontend, then why not combine the UI code with the backend service and generate hydrated and cacheable pages via the server instead of using a SPA?\n\n```mermaid\ngraph LR\n  UIServer[\"UI Server\"] --> Service1\n  UIServer --> Service2\n UIServer --> Service3\n```\n\nWith this design, we increase the complexity - the backend not has to be able to render the UI code. It must now render, hydrate, make requests to downstream APIs, and send those server-side rendered pages to the browser.\n\nBut this additional complexity enabled us to:\n\n- create truly authenticated and authorized routes – the code for those routes isn’t even streamed to the browser, unlike a SPA.\n- near instant page loads – reducing the bundle size by just sending the JavaScript needed to run the page makes this possible. And since API calls are happening within the same network, this saves the user from additional loading spinners after the initial bundle has been loaded.\n\nThe general trend of having a Backend for the Frontend comes with additional complexity. It stems from the want to enhance the experience of the user, and probably from a subconscious desire to return to a simpler time:\n\n```mermaid\ngraph TD\n  Server\n```\n","contentHTML":"<p>The Backend for the Frontend (BEFFE) is typically stateless and acts as a proxy for other services, including authentication, authorization, and core services. The recent divorce of browser code being rendered by backend services was created by SPAs - Single Page Applications. In simpler architectures, a SPA and service could be as simple as:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  SPA --&gt; Backend\">graph LR\n  SPA --&gt; Backend</div></div>\n<p>SPAs also became popular because the codebase could be built into static assets that could be services.</p>\n<p>However, as complexity arises with the above architecture and the SPA starts to rely on more services, a thin proxy is typically introduced, like NGINX:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  SPA --&gt; NGINX\n  NGINX --&gt; Service1\n  NGINX --&gt; Service2\n  NGINX --&gt; Service3\">graph LR\n  SPA --&gt; NGINX\n  NGINX --&gt; Service1\n  NGINX --&gt; Service2\n  NGINX --&gt; Service3</div></div>\n<p>While proxies like NGINX can continue to be useful, using it as a proxy ends up putting a lot of routing and additional API handling logic on the client. The client now ends up also having to support, understand, and embed how to interact with the data rom all the downstream services. To simplify and create consistent contracts with the UI, we can create a proxy service: a Backend for the Frontend:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  SPA --&gt; BEFFE\n  BEFFE --&gt; Service1\n  BEFFE --&gt; Service2\n  BEFFE --&gt; Service3\">graph LR\n  SPA --&gt; BEFFE\n  BEFFE --&gt; Service1\n  BEFFE --&gt; Service2\n  BEFFE --&gt; Service3</div></div>\n<p>The Backend for the Frontend ends up serving two purposes:</p>\n<ul>\n<li>It acts as a proxy for all UI requests</li>\n<li>It manages and massages the APIs of downstream services to be a consistent API for the UI.</li>\n</ul>\n<p>When building a UI, only a single service that acts like an API Gateway is required to understand and encode within the application.</p>\n<p>The Backend for the Frontend model also allows engineers working on services to separate logic for the UI with the logic from an internal service. An internal service can rely on the Backend for the Frontend to handle things like Authentication, Authorization, Caching, and Rate-limits. These mechanisms may also be implemented as independent services, but the Backend for the Frontend can make multiple API calls per any API request from the UI.</p>\n<h2>Moving away from SPAs</h2>\n<p>A newer development in the UI space is server side render the application. If we are already introducing additional complexity by having a Backend for the Frontend, then why not combine the UI code with the backend service and generate hydrated and cacheable pages via the server instead of using a SPA?</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  UIServer[&quot;UI Server&quot;] --&gt; Service1\n  UIServer --&gt; Service2\n UIServer --&gt; Service3\">graph LR\n  UIServer[&quot;UI Server&quot;] --&gt; Service1\n  UIServer --&gt; Service2\n UIServer --&gt; Service3</div></div>\n<p>With this design, we increase the complexity - the backend not has to be able to render the UI code. It must now render, hydrate, make requests to downstream APIs, and send those server-side rendered pages to the browser.</p>\n<p>But this additional complexity enabled us to:</p>\n<ul>\n<li>create truly authenticated and authorized routes – the code for those routes isn’t even streamed to the browser, unlike a SPA.</li>\n<li>near instant page loads – reducing the bundle size by just sending the JavaScript needed to run the page makes this possible. And since API calls are happening within the same network, this saves the user from additional loading spinners after the initial bundle has been loaded.</li>\n</ul>\n<p>The general trend of having a Backend for the Frontend comes with additional complexity. It stems from the want to enhance the experience of the user, and probably from a subconscious desire to return to a simpler time:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph TD\n  Server\">graph TD\n  Server</div></div>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    h2: \"h2\"\n  }, props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"The Backend for the Frontend (BEFFE) is typically stateless and acts as a proxy for other services, including authentication, authorization, and core services. The recent divorce of browser code being rendered by backend services was created by SPAs - Single Page Applications. In simpler architectures, a SPA and service could be as simple as:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  SPA --> Backend\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"SPAs also became popular because the codebase could be built into static assets that could be services.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, as complexity arises with the above architecture and the SPA starts to rely on more services, a thin proxy is typically introduced, like NGINX:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  SPA --> NGINX\\n  NGINX --> Service1\\n  NGINX --> Service2\\n  NGINX --> Service3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"While proxies like NGINX can continue to be useful, using it as a proxy ends up putting a lot of routing and additional API handling logic on the client. The client now ends up also having to support, understand, and embed how to interact with the data rom all the downstream services. To simplify and create consistent contracts with the UI, we can create a proxy service: a Backend for the Frontend:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  SPA --> BEFFE\\n  BEFFE --> Service1\\n  BEFFE --> Service2\\n  BEFFE --> Service3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Backend for the Frontend ends up serving two purposes:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"It acts as a proxy for all UI requests\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"It manages and massages the APIs of downstream services to be a consistent API for the UI.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When building a UI, only a single service that acts like an API Gateway is required to understand and encode within the application.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Backend for the Frontend model also allows engineers working on services to separate logic for the UI with the logic from an internal service. An internal service can rely on the Backend for the Frontend to handle things like Authentication, Authorization, Caching, and Rate-limits. These mechanisms may also be implemented as independent services, but the Backend for the Frontend can make multiple API calls per any API request from the UI.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Moving away from SPAs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A newer development in the UI space is server side render the application. If we are already introducing additional complexity by having a Backend for the Frontend, then why not combine the UI code with the backend service and generate hydrated and cacheable pages via the server instead of using a SPA?\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  UIServer[\\\"UI Server\\\"] --> Service1\\n  UIServer --> Service2\\n UIServer --> Service3\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With this design, we increase the complexity - the backend not has to be able to render the UI code. It must now render, hydrate, make requests to downstream APIs, and send those server-side rendered pages to the browser.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But this additional complexity enabled us to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"create truly authenticated and authorized routes – the code for those routes isn’t even streamed to the browser, unlike a SPA.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"near instant page loads – reducing the bundle size by just sending the JavaScript needed to run the page makes this possible. And since API calls are happening within the same network, this saves the user from additional loading spinners after the initial bundle has been loaded.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The general trend of having a Backend for the Frontend comes with additional complexity. It stems from the want to enhance the experience of the user, and probably from a subconscious desire to return to a simpler time:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph TD\\n  Server\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","excerptRaw":"\nThe Backend for the Frontend (BEFFE) is typically stateless and acts as a proxy for other services, including authentication, authorization, and core services. The recent divorce of browser code being rendered by backend services was created by SPAs - Single Page Applications. In simpler architectures, a SPA and service could be as simple as:","excerptHTML":"<p>The Backend for the Frontend (BEFFE) is typically stateless and acts as a proxy for other services, including authentication, authorization, and core services. The recent divorce of browser code being rendered by backend services was created by SPAs - Single Page Applications. In simpler architectures, a SPA and service could be as simple as:</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"The Backend for the Frontend (BEFFE) is typically stateless and acts as a proxy for other services, including authentication, authorization, and core services. The recent divorce of browser code being rendered by backend services was created by SPAs - Single Page Applications. In simpler architectures, a SPA and service could be as simple as:\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["backend","frontend","architecture"]},{"slug":"2023-07-03-llm-loops","date":"2023-07-03","title":"AI Feedback Systems","frontmatter":{"title":"AI Feedback Systems","tags":["ai","llm"]},"contentRaw":"\nWe are starting to see a rise of novel use-cases for AI in products and games using LLMs. Rather than the simple chatbot like experiences we have seen in the past using AI, we are starting to see feedback systems being added to these experiences, providing additional context to the LLM than just the past conversation.\n\nA typical game loop for this type of system would look like:\n\n```mermaid\ngraph LR\n  Rules --> LLM\n  InputStates[\"Input States\"] --> LLM\n  LLM --> OutputState\n  OutputState[\"Output State\"] --> GameEngine\n  GameEngine[\"Game Engine\"] --> InputStates\n```\n\nRules can be describes as written-word description, with an additional set of rules telling the LLM to reply using JSON output of a given schema. In this area, I have had success giving LLMs descriptions of output schemas in Typescript and asking for a JSON response that adheres to the type. Other methods of getting a consistent schema are more than likely possible here, as well as additional output methods.\n\nWhen the asynchronous task of creating and output state is complete, the Game Engine in this case can read, parse, and apply that new state to the world. Any additional interaction would then lead to the next set of input states that can be given to the LLM as a JSON blob.\n\nFor a more concrete example, we can imagine a game where we want our player to interact with a set of agents. The input states would be the state of each agent, the user’s interaction, and maybe some global environment data. The rules may be how each agent should behave, the rules of the game, and additional context. The LLM would take these inputs, and the output is instructed to be the next state of each agent. When the LLM returns this data, the Game Engine read it and applies it to the game’s representation of each agent, showing the player the impact of their actions.\n\nI’m looking forward to more novel use-cases for LLMs!\n","contentHTML":"<p>We are starting to see a rise of novel use-cases for AI in products and games using LLMs. Rather than the simple chatbot like experiences we have seen in the past using AI, we are starting to see feedback systems being added to these experiences, providing additional context to the LLM than just the past conversation.</p>\n<p>A typical game loop for this type of system would look like:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  Rules --&gt; LLM\n  InputStates[&quot;Input States&quot;] --&gt; LLM\n  LLM --&gt; OutputState\n  OutputState[&quot;Output State&quot;] --&gt; GameEngine\n  GameEngine[&quot;Game Engine&quot;] --&gt; InputStates\">graph LR\n  Rules --&gt; LLM\n  InputStates[&quot;Input States&quot;] --&gt; LLM\n  LLM --&gt; OutputState\n  OutputState[&quot;Output State&quot;] --&gt; GameEngine\n  GameEngine[&quot;Game Engine&quot;] --&gt; InputStates</div></div>\n<p>Rules can be describes as written-word description, with an additional set of rules telling the LLM to reply using JSON output of a given schema. In this area, I have had success giving LLMs descriptions of output schemas in Typescript and asking for a JSON response that adheres to the type. Other methods of getting a consistent schema are more than likely possible here, as well as additional output methods.</p>\n<p>When the asynchronous task of creating and output state is complete, the Game Engine in this case can read, parse, and apply that new state to the world. Any additional interaction would then lead to the next set of input states that can be given to the LLM as a JSON blob.</p>\n<p>For a more concrete example, we can imagine a game where we want our player to interact with a set of agents. The input states would be the state of each agent, the user’s interaction, and maybe some global environment data. The rules may be how each agent should behave, the rules of the game, and additional context. The LLM would take these inputs, and the output is instructed to be the next state of each agent. When the LLM returns this data, the Game Engine read it and applies it to the game’s representation of each agent, showing the player the impact of their actions.</p>\n<p>I’m looking forward to more novel use-cases for LLMs!</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"We are starting to see a rise of novel use-cases for AI in products and games using LLMs. Rather than the simple chatbot like experiences we have seen in the past using AI, we are starting to see feedback systems being added to these experiences, providing additional context to the LLM than just the past conversation.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A typical game loop for this type of system would look like:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  Rules --> LLM\\n  InputStates[\\\"Input States\\\"] --> LLM\\n  LLM --> OutputState\\n  OutputState[\\\"Output State\\\"] --> GameEngine\\n  GameEngine[\\\"Game Engine\\\"] --> InputStates\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Rules can be describes as written-word description, with an additional set of rules telling the LLM to reply using JSON output of a given schema. In this area, I have had success giving LLMs descriptions of output schemas in Typescript and asking for a JSON response that adheres to the type. Other methods of getting a consistent schema are more than likely possible here, as well as additional output methods.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When the asynchronous task of creating and output state is complete, the Game Engine in this case can read, parse, and apply that new state to the world. Any additional interaction would then lead to the next set of input states that can be given to the LLM as a JSON blob.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For a more concrete example, we can imagine a game where we want our player to interact with a set of agents. The input states would be the state of each agent, the user’s interaction, and maybe some global environment data. The rules may be how each agent should behave, the rules of the game, and additional context. The LLM would take these inputs, and the output is instructed to be the next state of each agent. When the LLM returns this data, the Game Engine read it and applies it to the game’s representation of each agent, showing the player the impact of their actions.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I’m looking forward to more novel use-cases for LLMs!\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","excerptRaw":"\nWe are starting to see a rise of novel use-cases for AI in products and games using LLMs. Rather than the simple chatbot like experiences we have seen in the past using AI, we are starting to see feedback systems being added to these experiences, providing additional context to the LLM than just the past conversation.","excerptHTML":"<p>We are starting to see a rise of novel use-cases for AI in products and games using LLMs. Rather than the simple chatbot like experiences we have seen in the past using AI, we are starting to see feedback systems being added to these experiences, providing additional context to the LLM than just the past conversation.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"We are starting to see a rise of novel use-cases for AI in products and games using LLMs. Rather than the simple chatbot like experiences we have seen in the past using AI, we are starting to see feedback systems being added to these experiences, providing additional context to the LLM than just the past conversation.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["ai","llm"]},{"slug":"2023-07-01-fast-embedding-lookingup","date":"2023-07-01","title":"Fast Similar Embedding Lookup","frontmatter":{"title":"Fast Similar Embedding Lookup","tags":["nlp","machine learning"]},"contentRaw":"\nWhile working on the Clarity Hub NLP API, we had a common use-case where we would create embeddings from text, and use those embedding to determine cosine similarity with other embeddings. Doing this required loading all of the embeddings in-memory and then computing cosine similarity with the entire dataset. As the dataset grew, this operation would get incredibly slow.\n\nWe worked on a fast way to do these lookups using ranges that can be performed in any database. This approach was never implemented, but we worked on multiple proof-of-concepts to test out our ideas. The goal was to take an input text, compute an embedding, load the entire embedding datasets loaded into an AWS lambda, find the most similar set of vectors, and return the top N similar vectors in one use-case. To tackle that, we came up with the following idea.\n\nGiven a vector A, compute is similar to a unit vector U of the same dimension as A. So:\n\n```cpp\ndim(U) = dim(A)\n```\n\nAnd\n\n```cpp\nS_u = cos(θ) = A · U / ||A|| x ||U||\n```\n\nWhere S_u is the similarity with the unit vector. The unit vector just needs to be the same across all samples.\n\nFor each embedding, store the calculated S_u.\n\nIf we want to find similar vectors for a new vector B, then we compute is similarity to the unit vector.\n\nThen, we can query the database for vectors within an interval of `[S_u - ε, S_u + ε]` . This will give us a subset of the dataset that have similar similarities with the unit vector.\n\nWe can re-query increasing or decreasing ε until the top N results are found.\n\nTo further improve accuracy, we can also re-compute the similarity score using cosine similarity with the subset of vectors, which is still much faster then computing the similarity against the entire dataset.\n\nThis approach begins to break down as the cosine similarity to the unit vector chosen gets very large (`> 0.4`).  We end up with the possibility of matching against vectors that are of opposite directions – the least similar vectors to the original input vector.\n\nOne solution to workaround this could be to pre-compute the similarity of a vector against unit vectors for each dimension of the input vector. But this could be 512 or more cosine similarity calculations for modern embeddings just to precompute the data. Once all unit vector similarities are calculated and stored, the range query against the database would be made against the column for which the input vector’s similarity is closest to 0.\n\nThere are a lot of real solutions to this problem, but this was a fun exercise to think about and work on.\n\n## Further reading\n\nVector similarity search is becoming increasingly popular and integrated into databases. Here are some resources to learn more: [Vector Similarity Search](https://zilliz.com/blog/vector-similarity-search).\n","contentHTML":"<p>While working on the Clarity Hub NLP API, we had a common use-case where we would create embeddings from text, and use those embedding to determine cosine similarity with other embeddings. Doing this required loading all of the embeddings in-memory and then computing cosine similarity with the entire dataset. As the dataset grew, this operation would get incredibly slow.</p>\n<p>We worked on a fast way to do these lookups using ranges that can be performed in any database. This approach was never implemented, but we worked on multiple proof-of-concepts to test out our ideas. The goal was to take an input text, compute an embedding, load the entire embedding datasets loaded into an AWS lambda, find the most similar set of vectors, and return the top N similar vectors in one use-case. To tackle that, we came up with the following idea.</p>\n<p>Given a vector A, compute is similar to a unit vector U of the same dimension as A. So:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-cpp\">dim(U) = dim(A)\n</code></pre></div>\n<p>And</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-cpp\">S_u = cos(θ) = A · U / ||A|| x ||U||\n</code></pre></div>\n<p>Where S_u is the similarity with the unit vector. The unit vector just needs to be the same across all samples.</p>\n<p>For each embedding, store the calculated S_u.</p>\n<p>If we want to find similar vectors for a new vector B, then we compute is similarity to the unit vector.</p>\n<p>Then, we can query the database for vectors within an interval of <code>[S_u - ε, S_u + ε]</code> . This will give us a subset of the dataset that have similar similarities with the unit vector.</p>\n<p>We can re-query increasing or decreasing ε until the top N results are found.</p>\n<p>To further improve accuracy, we can also re-compute the similarity score using cosine similarity with the subset of vectors, which is still much faster then computing the similarity against the entire dataset.</p>\n<p>This approach begins to break down as the cosine similarity to the unit vector chosen gets very large (<code>&gt; 0.4</code>).  We end up with the possibility of matching against vectors that are of opposite directions – the least similar vectors to the original input vector.</p>\n<p>One solution to workaround this could be to pre-compute the similarity of a vector against unit vectors for each dimension of the input vector. But this could be 512 or more cosine similarity calculations for modern embeddings just to precompute the data. Once all unit vector similarities are calculated and stored, the range query against the database would be made against the column for which the input vector’s similarity is closest to 0.</p>\n<p>There are a lot of real solutions to this problem, but this was a fun exercise to think about and work on.</p>\n<h2>Further reading</h2>\n<p>Vector similarity search is becoming increasingly popular and integrated into databases. Here are some resources to learn more: <a href=\"https://zilliz.com/blog/vector-similarity-search\">Vector Similarity Search</a>.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    h2: \"h2\",\n    a: \"a\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"While working on the Clarity Hub NLP API, we had a common use-case where we would create embeddings from text, and use those embedding to determine cosine similarity with other embeddings. Doing this required loading all of the embeddings in-memory and then computing cosine similarity with the entire dataset. As the dataset grew, this operation would get incredibly slow.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We worked on a fast way to do these lookups using ranges that can be performed in any database. This approach was never implemented, but we worked on multiple proof-of-concepts to test out our ideas. The goal was to take an input text, compute an embedding, load the entire embedding datasets loaded into an AWS lambda, find the most similar set of vectors, and return the top N similar vectors in one use-case. To tackle that, we came up with the following idea.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Given a vector A, compute is similar to a unit vector U of the same dimension as A. So:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"dim(U) = dim(A)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-cpp\",\n        children: \"S_u = cos(θ) = A · U / ||A|| x ||U||\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Where S_u is the similarity with the unit vector. The unit vector just needs to be the same across all samples.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For each embedding, store the calculated S_u.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"If we want to find similar vectors for a new vector B, then we compute is similarity to the unit vector.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Then, we can query the database for vectors within an interval of \", _jsx(_components.code, {\n        children: \"[S_u - ε, S_u + ε]\"\n      }), \" . This will give us a subset of the dataset that have similar similarities with the unit vector.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can re-query increasing or decreasing ε until the top N results are found.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To further improve accuracy, we can also re-compute the similarity score using cosine similarity with the subset of vectors, which is still much faster then computing the similarity against the entire dataset.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This approach begins to break down as the cosine similarity to the unit vector chosen gets very large (\", _jsx(_components.code, {\n        children: \"> 0.4\"\n      }), \").  We end up with the possibility of matching against vectors that are of opposite directions – the least similar vectors to the original input vector.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One solution to workaround this could be to pre-compute the similarity of a vector against unit vectors for each dimension of the input vector. But this could be 512 or more cosine similarity calculations for modern embeddings just to precompute the data. Once all unit vector similarities are calculated and stored, the range query against the database would be made against the column for which the input vector’s similarity is closest to 0.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There are a lot of real solutions to this problem, but this was a fun exercise to think about and work on.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Further reading\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Vector similarity search is becoming increasingly popular and integrated into databases. Here are some resources to learn more: \", _jsx(_components.a, {\n        href: \"https://zilliz.com/blog/vector-similarity-search\",\n        children: \"Vector Similarity Search\"\n      }), \".\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nWhile working on the Clarity Hub NLP API, we had a common use-case where we would create embeddings from text, and use those embedding to determine cosine similarity with other embeddings. Doing this required loading all of the embeddings in-memory and then computing cosine similarity with the entire dataset. As the dataset grew, this operation would get incredibly slow.","excerptHTML":"<p>While working on the Clarity Hub NLP API, we had a common use-case where we would create embeddings from text, and use those embedding to determine cosine similarity with other embeddings. Doing this required loading all of the embeddings in-memory and then computing cosine similarity with the entire dataset. As the dataset grew, this operation would get incredibly slow.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"While working on the Clarity Hub NLP API, we had a common use-case where we would create embeddings from text, and use those embedding to determine cosine similarity with other embeddings. Doing this required loading all of the embeddings in-memory and then computing cosine similarity with the entire dataset. As the dataset grew, this operation would get incredibly slow.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["nlp","machine learning"]},{"slug":"2023-06-06-sora","date":"2023-06-06","title":"Sora - OpenAI Visual Studio Code Extension","frontmatter":{"title":"Sora - OpenAI Visual Studio Code Extension","tags":["openai","vscode"]},"contentRaw":"Github Copilot and other AI tools are hitting the scene. I decided to create my own Visual Studio Code extension, which is designed to use OpenAI’s APIs to bring some additional ChatGPT functionality into the code editor. The goal with Sora was to enable a developer to thoughtfully write a comment about the code they would like the AI to write, and then commit to it – rather than the real-time typeahead that Github Copilot provides.\n\nWith that goal in mind, Sora provides two ways to activate OpenAI: by typing `@OpenAI` (formally `@ChatGPT`) or clicking “Send to OpenAI” when hovering over a comment. The other improvement is that Sora will read any relative link references to files in your project. A great way to use this is to have OpenAI write code in the style that already exists in your project, for example:\n\n```tsx\n/**\n * Write tests for [my-file](./my-file.ts] using\n * [other-test](../something/other-file.test.ts) as an example\n */\n```\n\nUsing this extension lets users write specifications as comments, and have ChatGPT write the entire file for you.\n\n![Sora Preview](/media/2023-06-06-sora/sora-preview.gif)\n\nThis extension leverages the OpenAI API to send any referenced files and a starting prompt to the `gpt-3.5-turbo` chat completion endpoint. The prompt mainly sets the context for creating working code using a given language and reference files.\n\nOnce the response comes back, the extension parses it and appends it to the original file.\n\n## **Installation and Usage**\n\nYou can install the extension by going to [the VSCode Marketplace](https://marketplace.visualstudio.com/items?itemName=CapsuleCat.sora-by-capsule-cat), or searching for “Sora” in Visual Studio Code extensions.\n\nOnce installed, you will need to enter your own OpenAI API key. You can get your key by following [these instructions](https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key). Then just enter `Sora: Set API Key` into the Visual Studio Code command prompt.\n\n![Sora Set API Key](/media/2023-06-06-sora/sora-set-api-key.png)\n\nYou can review the code [on Github](https://github.com/CapsuleCat/sora-by-capsule-cat).\n\n## **Conclusion**\n\nIt was fun building my first extension. Please feel free to reach out on our [Github](https://github.com/CapsuleCat/sora-by-capsule-cat) for feedback or questions.\n","contentHTML":"<p>Github Copilot and other AI tools are hitting the scene. I decided to create my own Visual Studio Code extension, which is designed to use OpenAI’s APIs to bring some additional ChatGPT functionality into the code editor. The goal with Sora was to enable a developer to thoughtfully write a comment about the code they would like the AI to write, and then commit to it – rather than the real-time typeahead that Github Copilot provides.</p>\n<p>With that goal in mind, Sora provides two ways to activate OpenAI: by typing <code>@OpenAI</code> (formally <code>@ChatGPT</code>) or clicking “Send to OpenAI” when hovering over a comment. The other improvement is that Sora will read any relative link references to files in your project. A great way to use this is to have OpenAI write code in the style that already exists in your project, for example:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code class=\"language-tsx\">/**\n * Write tests for [my-file](./my-file.ts] using\n * [other-test](../something/other-file.test.ts) as an example\n */\n</code></pre></div>\n<p>Using this extension lets users write specifications as comments, and have ChatGPT write the entire file for you.</p>\n<p><img alt=\"Sora Preview\" src=\"/media/2023-06-06-sora/sora-preview.gif\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p>This extension leverages the OpenAI API to send any referenced files and a starting prompt to the <code>gpt-3.5-turbo</code> chat completion endpoint. The prompt mainly sets the context for creating working code using a given language and reference files.</p>\n<p>Once the response comes back, the extension parses it and appends it to the original file.</p>\n<h2><strong>Installation and Usage</strong></h2>\n<p>You can install the extension by going to <a href=\"https://marketplace.visualstudio.com/items?itemName=CapsuleCat.sora-by-capsule-cat\">the VSCode Marketplace</a>, or searching for “Sora” in Visual Studio Code extensions.</p>\n<p>Once installed, you will need to enter your own OpenAI API key. You can get your key by following <a href=\"https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key\">these instructions</a>. Then just enter <code>Sora: Set API Key</code> into the Visual Studio Code command prompt.</p>\n<p><img alt=\"Sora Set API Key\" src=\"/media/2023-06-06-sora/sora-set-api-key.png\" style=\"max-height:500px;margin:auto;text-align:center\"/></p>\n<p>You can review the code <a href=\"https://github.com/CapsuleCat/sora-by-capsule-cat\">on Github</a>.</p>\n<h2><strong>Conclusion</strong></h2>\n<p>It was fun building my first extension. Please feel free to reach out on our <a href=\"https://github.com/CapsuleCat/sora-by-capsule-cat\">Github</a> for feedback or questions.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    img: \"img\",\n    h2: \"h2\",\n    strong: \"strong\",\n    a: \"a\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Github Copilot and other AI tools are hitting the scene. I decided to create my own Visual Studio Code extension, which is designed to use OpenAI’s APIs to bring some additional ChatGPT functionality into the code editor. The goal with Sora was to enable a developer to thoughtfully write a comment about the code they would like the AI to write, and then commit to it – rather than the real-time typeahead that Github Copilot provides.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"With that goal in mind, Sora provides two ways to activate OpenAI: by typing \", _jsx(_components.code, {\n        children: \"@OpenAI\"\n      }), \" (formally \", _jsx(_components.code, {\n        children: \"@ChatGPT\"\n      }), \") or clicking “Send to OpenAI” when hovering over a comment. The other improvement is that Sora will read any relative link references to files in your project. A great way to use this is to have OpenAI write code in the style that already exists in your project, for example:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-tsx\",\n        children: \"/**\\n * Write tests for [my-file](./my-file.ts] using\\n * [other-test](../something/other-file.test.ts) as an example\\n */\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using this extension lets users write specifications as comments, and have ChatGPT write the entire file for you.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-06-06-sora/sora-preview.gif\",\n        alt: \"Sora Preview\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This extension leverages the OpenAI API to send any referenced files and a starting prompt to the \", _jsx(_components.code, {\n        children: \"gpt-3.5-turbo\"\n      }), \" chat completion endpoint. The prompt mainly sets the context for creating working code using a given language and reference files.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once the response comes back, the extension parses it and appends it to the original file.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Installation and Usage\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can install the extension by going to \", _jsx(_components.a, {\n        href: \"https://marketplace.visualstudio.com/items?itemName=CapsuleCat.sora-by-capsule-cat\",\n        children: \"the VSCode Marketplace\"\n      }), \", or searching for “Sora” in Visual Studio Code extensions.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Once installed, you will need to enter your own OpenAI API key. You can get your key by following \", _jsx(_components.a, {\n        href: \"https://help.openai.com/en/articles/4936850-where-do-i-find-my-secret-api-key\",\n        children: \"these instructions\"\n      }), \". Then just enter \", _jsx(_components.code, {\n        children: \"Sora: Set API Key\"\n      }), \" into the Visual Studio Code command prompt.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/media/2023-06-06-sora/sora-set-api-key.png\",\n        alt: \"Sora Set API Key\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can review the code \", _jsx(_components.a, {\n        href: \"https://github.com/CapsuleCat/sora-by-capsule-cat\",\n        children: \"on Github\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: _jsx(_components.strong, {\n        children: \"Conclusion\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It was fun building my first extension. Please feel free to reach out on our \", _jsx(_components.a, {\n        href: \"https://github.com/CapsuleCat/sora-by-capsule-cat\",\n        children: \"Github\"\n      }), \" for feedback or questions.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"Github Copilot and other AI tools are hitting the scene. I decided to create my own Visual Studio Code extension, which is designed to use OpenAI’s APIs to bring some additional ChatGPT functionality into the code editor. The goal with Sora was to enable a developer to thoughtfully write a comment about the code they would like the AI to write, and then commit to it – rather than the real-time typeahead that Github Copilot provides.\n","excerptHTML":"<p>Github Copilot and other AI tools are hitting the scene. I decided to create my own Visual Studio Code extension, which is designed to use OpenAI’s APIs to bring some additional ChatGPT functionality into the code editor. The goal with Sora was to enable a developer to thoughtfully write a comment about the code they would like the AI to write, and then commit to it – rather than the real-time typeahead that Github Copilot provides.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Github Copilot and other AI tools are hitting the scene. I decided to create my own Visual Studio Code extension, which is designed to use OpenAI’s APIs to bring some additional ChatGPT functionality into the code editor. The goal with Sora was to enable a developer to thoughtfully write a comment about the code they would like the AI to write, and then commit to it – rather than the real-time typeahead that Github Copilot provides.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["openai","vscode"]},{"slug":"2023-05-06-gptp","date":"2023-05-06","title":"Revisiting GPTP - the Starcraft modding toolkit","frontmatter":{"title":"Revisiting GPTP - the Starcraft modding toolkit","tags":["starcraft","gptp","cplusplus"]},"contentRaw":"\nOne of the first PC games I played was Starcraft and the expansion Starcraft: Broodwar. We didn’t have a PC, so I had to play it on a friend’s computer, but I remember being immersed in the real-time strategy gameplay.\n\nLater, I would get a PC and bought my own copy of Starcraft. This was years later, but the community for the game was still impressive. Joining one of the older Starcraft forums, I discovered “mods” for the game. The most popular ones were just graphical changes, but that concept of changing a game to display your own graphics was so interesting to me. I’m not sure how I stumbled on it, but I found [http://www.staredit.net/](http://www.staredit.net/) (yes, it’s still active!) and I learned that you could do so much more than just change the graphics of Starcraft with mods. There were people in the community working on hooking into existing Starcraft code to modify the gameplay and graphics using C++.\n\n## Diving deep\n\nIn order to create these mods, we needed to know the hex address of different functions that Starcraft would call during them game. And to do anything meaningful, we also needed to know the structure of units and sprites and where those were stored as well. A lot of this base work required using tools like OllyDbg to analyze the assembly of the Starcraft executable, and ArtMoney for analyzing the memory of the game while it was executing.\n\nI used OllyDbg to find what functions Starcraft would call during execution – from common functions like the game-loop, to highly specialized functions like checking supply limits. ArtMoney let us determine how structures like units were laid out – where each unit’s health was stored, how much damage each weapon would do, and more.\n\nMost of this information was shared in forums, chat rooms, and a few disparate sites for looking up hex addresses. Of course, no write up about modding Starcraft is complete without mentioning all the work from ShadowFlare (check out [ShadowFlare’s realm](https://sfsrealm.hopto.org/) for all the work they did), the great people at Staredit.Net, and plenty of others who built amazing tools to work with Starcraft files. All these sites were amazing resources for figuring out file specs and working with the Starcraft engine.\n\nHowever, each time I wanted to write a new mod or experiment with an idea, I’d have to look up all of this information across all of these sites.\n\n## Bringing it together\n\nThe goal with GPTP (General Plugin Template Project), was to take all of this work that the amazing modding community had done and bring it together into a C++ Visual Studio project that could be copied for a new mod.\n\nMy initial idea was simple: take all of the code for injecting new function hooks into Starcraft and wrap it in some very friendly functions. When a modder would come in to create a new project, they would have three functions exposed to them to work with: gameStart, gameLoop, gameEnd (I don’t remember the exact names I gave them at the time).\n\nI released the initial GPTP back in 2008-2009. This included the project setup for compiling and producing a QDP file that could be loaded into Starcraft. Additionally, it contained known structures and hex addresses that developers could use to build their mod. The Intellisense autocomplete feature really helped developers leverage these structures.\n\n## The power of open source\n\nI made the original version of GPTP back in high school, but I didn’t have time to continue to work on it when I went to university. I returned to the community a decade later, and found that not only was the community still alive and working on mods, but that they were using GPTP. At this point, GPTP was unrecognizable from my original work; the goal was the same, but the quality of the code was greatly improved and the number of hooks, known structures, and addresses was much more impressive.\n\nYou can view the project on Github: [general-plugin-template-project](https://github.com/SCMapsAndMods/general-plugin-template-project).\n\nI’d like to thank open source for this sort of development. The amount of work that has been continually added onto this project couldn’t have been done without all the contributions from the community.\n\n## Does it still work?\n\nI recently went back to Starcraft modding as a fun little project. I wanted to hop in and see how easy or difficult it would be to create a mod in 2020.\n\nOne of the harder things to do in 2020 is find all the tools and initial setup for modding Starcraft. Some of the modding sites are down for good, and with them the knowledge they contained.\n\nBut, I pulled together the tools (thanks PyMS), pulled together tutorials and other instructions into a Notion document, and created my first Starcraft mod!\n\nGathering all the tools was the hard part. After that, it was actually very straightforward creating a new GPTP template and mod. All of the known structures and hooks are pretty self-explanatory and I was able to even add my own hooks once I found the hex addresses using OllyDbg.\n\n## Looking forward\n\nStarcraft modding is like an ancient art at this point. There isn’t a large audience for it, so in general, any new mod will be played by maybe 10 people. But to me, it’s a combination of nostalgia, hard work, tinkering, discovery, and creation that makes it so much fun. That feeling of finding a new function to hook onto, writing C++ code that injects itself into it, and then running the code in the Starcraft engine and seeing it work is a special kind of rewarding experience.\n\n## Thanks\n\nI’d like to give thanks to everyone who has ever contributed to the modding community for Starcraft. There are so many names that I couldn’t possibly name them all, but please check of [http://staredit.net](http://staredit.net) if any of this interests you.\n","contentHTML":"<p>One of the first PC games I played was Starcraft and the expansion Starcraft: Broodwar. We didn’t have a PC, so I had to play it on a friend’s computer, but I remember being immersed in the real-time strategy gameplay.</p>\n<p>Later, I would get a PC and bought my own copy of Starcraft. This was years later, but the community for the game was still impressive. Joining one of the older Starcraft forums, I discovered “mods” for the game. The most popular ones were just graphical changes, but that concept of changing a game to display your own graphics was so interesting to me. I’m not sure how I stumbled on it, but I found <a href=\"http://www.staredit.net/\">http://www.staredit.net/</a> (yes, it’s still active!) and I learned that you could do so much more than just change the graphics of Starcraft with mods. There were people in the community working on hooking into existing Starcraft code to modify the gameplay and graphics using C++.</p>\n<h2>Diving deep</h2>\n<p>In order to create these mods, we needed to know the hex address of different functions that Starcraft would call during them game. And to do anything meaningful, we also needed to know the structure of units and sprites and where those were stored as well. A lot of this base work required using tools like OllyDbg to analyze the assembly of the Starcraft executable, and ArtMoney for analyzing the memory of the game while it was executing.</p>\n<p>I used OllyDbg to find what functions Starcraft would call during execution – from common functions like the game-loop, to highly specialized functions like checking supply limits. ArtMoney let us determine how structures like units were laid out – where each unit’s health was stored, how much damage each weapon would do, and more.</p>\n<p>Most of this information was shared in forums, chat rooms, and a few disparate sites for looking up hex addresses. Of course, no write up about modding Starcraft is complete without mentioning all the work from ShadowFlare (check out <a href=\"https://sfsrealm.hopto.org/\">ShadowFlare’s realm</a> for all the work they did), the great people at Staredit.Net, and plenty of others who built amazing tools to work with Starcraft files. All these sites were amazing resources for figuring out file specs and working with the Starcraft engine.</p>\n<p>However, each time I wanted to write a new mod or experiment with an idea, I’d have to look up all of this information across all of these sites.</p>\n<h2>Bringing it together</h2>\n<p>The goal with GPTP (General Plugin Template Project), was to take all of this work that the amazing modding community had done and bring it together into a C++ Visual Studio project that could be copied for a new mod.</p>\n<p>My initial idea was simple: take all of the code for injecting new function hooks into Starcraft and wrap it in some very friendly functions. When a modder would come in to create a new project, they would have three functions exposed to them to work with: gameStart, gameLoop, gameEnd (I don’t remember the exact names I gave them at the time).</p>\n<p>I released the initial GPTP back in 2008-2009. This included the project setup for compiling and producing a QDP file that could be loaded into Starcraft. Additionally, it contained known structures and hex addresses that developers could use to build their mod. The Intellisense autocomplete feature really helped developers leverage these structures.</p>\n<h2>The power of open source</h2>\n<p>I made the original version of GPTP back in high school, but I didn’t have time to continue to work on it when I went to university. I returned to the community a decade later, and found that not only was the community still alive and working on mods, but that they were using GPTP. At this point, GPTP was unrecognizable from my original work; the goal was the same, but the quality of the code was greatly improved and the number of hooks, known structures, and addresses was much more impressive.</p>\n<p>You can view the project on Github: <a href=\"https://github.com/SCMapsAndMods/general-plugin-template-project\">general-plugin-template-project</a>.</p>\n<p>I’d like to thank open source for this sort of development. The amount of work that has been continually added onto this project couldn’t have been done without all the contributions from the community.</p>\n<h2>Does it still work?</h2>\n<p>I recently went back to Starcraft modding as a fun little project. I wanted to hop in and see how easy or difficult it would be to create a mod in 2020.</p>\n<p>One of the harder things to do in 2020 is find all the tools and initial setup for modding Starcraft. Some of the modding sites are down for good, and with them the knowledge they contained.</p>\n<p>But, I pulled together the tools (thanks PyMS), pulled together tutorials and other instructions into a Notion document, and created my first Starcraft mod!</p>\n<p>Gathering all the tools was the hard part. After that, it was actually very straightforward creating a new GPTP template and mod. All of the known structures and hooks are pretty self-explanatory and I was able to even add my own hooks once I found the hex addresses using OllyDbg.</p>\n<h2>Looking forward</h2>\n<p>Starcraft modding is like an ancient art at this point. There isn’t a large audience for it, so in general, any new mod will be played by maybe 10 people. But to me, it’s a combination of nostalgia, hard work, tinkering, discovery, and creation that makes it so much fun. That feeling of finding a new function to hook onto, writing C++ code that injects itself into it, and then running the code in the Starcraft engine and seeing it work is a special kind of rewarding experience.</p>\n<h2>Thanks</h2>\n<p>I’d like to give thanks to everyone who has ever contributed to the modding community for Starcraft. There are so many names that I couldn’t possibly name them all, but please check of <a href=\"http://staredit.net\">http://staredit.net</a> if any of this interests you.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    h2: \"h2\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"One of the first PC games I played was Starcraft and the expansion Starcraft: Broodwar. We didn’t have a PC, so I had to play it on a friend’s computer, but I remember being immersed in the real-time strategy gameplay.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Later, I would get a PC and bought my own copy of Starcraft. This was years later, but the community for the game was still impressive. Joining one of the older Starcraft forums, I discovered “mods” for the game. The most popular ones were just graphical changes, but that concept of changing a game to display your own graphics was so interesting to me. I’m not sure how I stumbled on it, but I found \", _jsx(_components.a, {\n        href: \"http://www.staredit.net/\",\n        children: \"http://www.staredit.net/\"\n      }), \" (yes, it’s still active!) and I learned that you could do so much more than just change the graphics of Starcraft with mods. There were people in the community working on hooking into existing Starcraft code to modify the gameplay and graphics using C++.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Diving deep\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In order to create these mods, we needed to know the hex address of different functions that Starcraft would call during them game. And to do anything meaningful, we also needed to know the structure of units and sprites and where those were stored as well. A lot of this base work required using tools like OllyDbg to analyze the assembly of the Starcraft executable, and ArtMoney for analyzing the memory of the game while it was executing.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I used OllyDbg to find what functions Starcraft would call during execution – from common functions like the game-loop, to highly specialized functions like checking supply limits. ArtMoney let us determine how structures like units were laid out – where each unit’s health was stored, how much damage each weapon would do, and more.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Most of this information was shared in forums, chat rooms, and a few disparate sites for looking up hex addresses. Of course, no write up about modding Starcraft is complete without mentioning all the work from ShadowFlare (check out \", _jsx(_components.a, {\n        href: \"https://sfsrealm.hopto.org/\",\n        children: \"ShadowFlare’s realm\"\n      }), \" for all the work they did), the great people at Staredit.Net, and plenty of others who built amazing tools to work with Starcraft files. All these sites were amazing resources for figuring out file specs and working with the Starcraft engine.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"However, each time I wanted to write a new mod or experiment with an idea, I’d have to look up all of this information across all of these sites.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Bringing it together\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The goal with GPTP (General Plugin Template Project), was to take all of this work that the amazing modding community had done and bring it together into a C++ Visual Studio project that could be copied for a new mod.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"My initial idea was simple: take all of the code for injecting new function hooks into Starcraft and wrap it in some very friendly functions. When a modder would come in to create a new project, they would have three functions exposed to them to work with: gameStart, gameLoop, gameEnd (I don’t remember the exact names I gave them at the time).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I released the initial GPTP back in 2008-2009. This included the project setup for compiling and producing a QDP file that could be loaded into Starcraft. Additionally, it contained known structures and hex addresses that developers could use to build their mod. The Intellisense autocomplete feature really helped developers leverage these structures.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"The power of open source\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I made the original version of GPTP back in high school, but I didn’t have time to continue to work on it when I went to university. I returned to the community a decade later, and found that not only was the community still alive and working on mods, but that they were using GPTP. At this point, GPTP was unrecognizable from my original work; the goal was the same, but the quality of the code was greatly improved and the number of hooks, known structures, and addresses was much more impressive.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can view the project on Github: \", _jsx(_components.a, {\n        href: \"https://github.com/SCMapsAndMods/general-plugin-template-project\",\n        children: \"general-plugin-template-project\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I’d like to thank open source for this sort of development. The amount of work that has been continually added onto this project couldn’t have been done without all the contributions from the community.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Does it still work?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I recently went back to Starcraft modding as a fun little project. I wanted to hop in and see how easy or difficult it would be to create a mod in 2020.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the harder things to do in 2020 is find all the tools and initial setup for modding Starcraft. Some of the modding sites are down for good, and with them the knowledge they contained.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"But, I pulled together the tools (thanks PyMS), pulled together tutorials and other instructions into a Notion document, and created my first Starcraft mod!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Gathering all the tools was the hard part. After that, it was actually very straightforward creating a new GPTP template and mod. All of the known structures and hooks are pretty self-explanatory and I was able to even add my own hooks once I found the hex addresses using OllyDbg.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Looking forward\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Starcraft modding is like an ancient art at this point. There isn’t a large audience for it, so in general, any new mod will be played by maybe 10 people. But to me, it’s a combination of nostalgia, hard work, tinkering, discovery, and creation that makes it so much fun. That feeling of finding a new function to hook onto, writing C++ code that injects itself into it, and then running the code in the Starcraft engine and seeing it work is a special kind of rewarding experience.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Thanks\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"I’d like to give thanks to everyone who has ever contributed to the modding community for Starcraft. There are so many names that I couldn’t possibly name them all, but please check of \", _jsx(_components.a, {\n        href: \"http://staredit.net\",\n        children: \"http://staredit.net\"\n      }), \" if any of this interests you.\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nOne of the first PC games I played was Starcraft and the expansion Starcraft: Broodwar. We didn’t have a PC, so I had to play it on a friend’s computer, but I remember being immersed in the real-time strategy gameplay.","excerptHTML":"<p>One of the first PC games I played was Starcraft and the expansion Starcraft: Broodwar. We didn’t have a PC, so I had to play it on a friend’s computer, but I remember being immersed in the real-time strategy gameplay.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"One of the first PC games I played was Starcraft and the expansion Starcraft: Broodwar. We didn’t have a PC, so I had to play it on a friend’s computer, but I remember being immersed in the real-time strategy gameplay.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["starcraft","gptp","cplusplus"]},{"slug":"2023-04-02-dark-emblem-rewrite","date":"2023-04-02","title":"Dark Emblem Rewrite","frontmatter":{"title":"Dark Emblem Rewrite","tags":["dark emblem","wax","nft","blockchain"]},"contentRaw":"\nDark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.\n\nTo support all of the functionality, I created a WAX contract, written in C++, that I deployed to the WAX Blockchain. This contract handled the creation and storage of packs and cards, along with defining an in-game currency DREM.\n\nThere was also a server that would sync with the changes on the Blockchain and provide some additional metadata on top of that. While Blockchains like ETH have stable public APIs that can be used to query data from the Blockchain through 3rd party vendors, WAX does not have the same maturity there. This meant that we would need to proxy requests that would normally be made to a WAX API mode through our servers instead.\n\nI also created a UI application to interact with the server and the Blockchain. The infrastructure ends up looking like:\n\n```mermaid\ngraph LR\n  WAX --> Dfuse\n Dfuse --> Listener(Dark Emblem Listener Service)\n  Listener --> Redis\n  Redis --> API(Dark Emblem API)\n  API --> Dapp\n  WAXEndpoint(WAX Endpoint) --> Dapp\n```\n\nOne of the first steps to interacting with the dapp is to sign in. The authentication flow is similar to an oauth sign in where we let the user sign in with a third party authenticator and then issue a challenge for the user to verify they are who they say they are. At this point we issue a JWT for further API requests.\n\n```mermaid\nsequenceDiagram\n  Dapp->>+3rdPartyAuthenticator: Request sign in\n  3rdPartyAuthenticator->>+Dapp: Wallet name\n  Dapp->>+DarkEmblemAPI: Request nonce\n  DarkEmblemAPI->>+Dapp: Send nonce\n  Dapp->>+3rdPartyAuthenticator: Sign nonce\n  3rdPartyAuthenticator->>+Dapp: Signed nonce\n  Dapp->>+DarkEmblemAPI: Send signed nonce\n  DarkEmblemAPI->>+Dapp: JWT\n```\n\nOnce a user is logged in, they can fully interact with the Dark Emblem WAX contract via the UI. They can purchase packs, open them to get cards, and then use those cards in the Dark Emblem universe. The UI lets users combine Hero cards together to “Ascend” them into a new card. Or they can burn 3 Equipment cards to “Transmogrify” them into a single, better equipment card.\n\nUsers can also participate in Raids, where they stake their cards to defeat an enemy monster – gaining $DREM and XP when they beat the monster.\n\nDapp Schemas and Atomic Assets\n\n```mermaid\nclassDiagram\n  class Card {\n    name: string\n  img: string\n  traits: number[]\n  matronid: number\n  sireid: number\n  rank: number\n  packid: string\n  cardtype: string\n  website: string\n  twitter: string\n  mintedat: number\n  rarity: string\n  cooldown: number\n  xp: number\n  }\n  class Raid {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n  class Staked {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n\n```\n\nThe Dark Emblem project involves a lot of moving parts, and I’d love to dive deeper into each technical aspect in future blog posts.\n\n## Additional reading\n\n* [Dark Emblem Blog Announcement](https://www.darkemblem.com/blog/post/2023-04-02-new-site-released)\n* [Capsule Cat Announcement](https://capsulecat.com/blog/04-02-2023-dark-emblem-update/)\n","contentHTML":"<p>Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.</p>\n<p>To support all of the functionality, I created a WAX contract, written in C++, that I deployed to the WAX Blockchain. This contract handled the creation and storage of packs and cards, along with defining an in-game currency DREM.</p>\n<p>There was also a server that would sync with the changes on the Blockchain and provide some additional metadata on top of that. While Blockchains like ETH have stable public APIs that can be used to query data from the Blockchain through 3rd party vendors, WAX does not have the same maturity there. This meant that we would need to proxy requests that would normally be made to a WAX API mode through our servers instead.</p>\n<p>I also created a UI application to interact with the server and the Blockchain. The infrastructure ends up looking like:</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"graph LR\n  WAX --&gt; Dfuse\n Dfuse --&gt; Listener(Dark Emblem Listener Service)\n  Listener --&gt; Redis\n  Redis --&gt; API(Dark Emblem API)\n  API --&gt; Dapp\n  WAXEndpoint(WAX Endpoint) --&gt; Dapp\">graph LR\n  WAX --&gt; Dfuse\n Dfuse --&gt; Listener(Dark Emblem Listener Service)\n  Listener --&gt; Redis\n  Redis --&gt; API(Dark Emblem API)\n  API --&gt; Dapp\n  WAXEndpoint(WAX Endpoint) --&gt; Dapp</div></div>\n<p>One of the first steps to interacting with the dapp is to sign in. The authentication flow is similar to an oauth sign in where we let the user sign in with a third party authenticator and then issue a challenge for the user to verify they are who they say they are. At this point we issue a JWT for further API requests.</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"sequenceDiagram\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Request sign in\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Wallet name\n  Dapp-&gt;&gt;+DarkEmblemAPI: Request nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: Send nonce\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Sign nonce\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Signed nonce\n  Dapp-&gt;&gt;+DarkEmblemAPI: Send signed nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: JWT\">sequenceDiagram\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Request sign in\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Wallet name\n  Dapp-&gt;&gt;+DarkEmblemAPI: Request nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: Send nonce\n  Dapp-&gt;&gt;+3rdPartyAuthenticator: Sign nonce\n  3rdPartyAuthenticator-&gt;&gt;+Dapp: Signed nonce\n  Dapp-&gt;&gt;+DarkEmblemAPI: Send signed nonce\n  DarkEmblemAPI-&gt;&gt;+Dapp: JWT</div></div>\n<p>Once a user is logged in, they can fully interact with the Dark Emblem WAX contract via the UI. They can purchase packs, open them to get cards, and then use those cards in the Dark Emblem universe. The UI lets users combine Hero cards together to “Ascend” them into a new card. Or they can burn 3 Equipment cards to “Transmogrify” them into a single, better equipment card.</p>\n<p>Users can also participate in Raids, where they stake their cards to defeat an enemy monster – gaining $DREM and XP when they beat the monster.</p>\n<p>Dapp Schemas and Atomic Assets</p>\n<div class=\"py-8 [&amp;_svg]:m-auto\"><div class=\"mermaid\" data-mermaid-src=\"classDiagram\n  class Card {\n    name: string\n  img: string\n  traits: number[]\n  matronid: number\n  sireid: number\n  rank: number\n  packid: string\n  cardtype: string\n  website: string\n  twitter: string\n  mintedat: number\n  rarity: string\n  cooldown: number\n  xp: number\n  }\n  class Raid {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n  class Staked {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n\">classDiagram\n  class Card {\n    name: string\n  img: string\n  traits: number[]\n  matronid: number\n  sireid: number\n  rank: number\n  packid: string\n  cardtype: string\n  website: string\n  twitter: string\n  mintedat: number\n  rarity: string\n  cooldown: number\n  xp: number\n  }\n  class Raid {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n  class Staked {\n  asset_id: number\n  owner: name\n  staked_at: number\n  raid_id: number\n  }\n</div></div>\n<p>The Dark Emblem project involves a lot of moving parts, and I’d love to dive deeper into each technical aspect in future blog posts.</p>\n<h2>Additional reading</h2>\n<ul>\n<li><a href=\"https://www.darkemblem.com/blog/post/2023-04-02-new-site-released\">Dark Emblem Blog Announcement</a></li>\n<li><a href=\"https://capsulecat.com/blog/04-02-2023-dark-emblem-update/\">Capsule Cat Announcement</a></li>\n</ul>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    a: \"a\"\n  }, props.components), {Mermaid} = _components;\n  if (!Mermaid) _missingMdxReference(\"Mermaid\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To support all of the functionality, I created a WAX contract, written in C++, that I deployed to the WAX Blockchain. This contract handled the creation and storage of packs and cards, along with defining an in-game currency DREM.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"There was also a server that would sync with the changes on the Blockchain and provide some additional metadata on top of that. While Blockchains like ETH have stable public APIs that can be used to query data from the Blockchain through 3rd party vendors, WAX does not have the same maturity there. This meant that we would need to proxy requests that would normally be made to a WAX API mode through our servers instead.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I also created a UI application to interact with the server and the Blockchain. The infrastructure ends up looking like:\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"graph LR\\n  WAX --> Dfuse\\n Dfuse --> Listener(Dark Emblem Listener Service)\\n  Listener --> Redis\\n  Redis --> API(Dark Emblem API)\\n  API --> Dapp\\n  WAXEndpoint(WAX Endpoint) --> Dapp\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One of the first steps to interacting with the dapp is to sign in. The authentication flow is similar to an oauth sign in where we let the user sign in with a third party authenticator and then issue a challenge for the user to verify they are who they say they are. At this point we issue a JWT for further API requests.\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"sequenceDiagram\\n  Dapp->>+3rdPartyAuthenticator: Request sign in\\n  3rdPartyAuthenticator->>+Dapp: Wallet name\\n  Dapp->>+DarkEmblemAPI: Request nonce\\n  DarkEmblemAPI->>+Dapp: Send nonce\\n  Dapp->>+3rdPartyAuthenticator: Sign nonce\\n  3rdPartyAuthenticator->>+Dapp: Signed nonce\\n  Dapp->>+DarkEmblemAPI: Send signed nonce\\n  DarkEmblemAPI->>+Dapp: JWT\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Once a user is logged in, they can fully interact with the Dark Emblem WAX contract via the UI. They can purchase packs, open them to get cards, and then use those cards in the Dark Emblem universe. The UI lets users combine Hero cards together to “Ascend” them into a new card. Or they can burn 3 Equipment cards to “Transmogrify” them into a single, better equipment card.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Users can also participate in Raids, where they stake their cards to defeat an enemy monster – gaining $DREM and XP when they beat the monster.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Dapp Schemas and Atomic Assets\"\n    }), \"\\n\", _jsx(Mermaid, {\n      chart: \"classDiagram\\n  class Card {\\n    name: string\\n  img: string\\n  traits: number[]\\n  matronid: number\\n  sireid: number\\n  rank: number\\n  packid: string\\n  cardtype: string\\n  website: string\\n  twitter: string\\n  mintedat: number\\n  rarity: string\\n  cooldown: number\\n  xp: number\\n  }\\n  class Raid {\\n  asset_id: number\\n  owner: name\\n  staked_at: number\\n  raid_id: number\\n  }\\n  class Staked {\\n  asset_id: number\\n  owner: name\\n  staked_at: number\\n  raid_id: number\\n  }\\n\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The Dark Emblem project involves a lot of moving parts, and I’d love to dive deeper into each technical aspect in future blog posts.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Additional reading\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://www.darkemblem.com/blog/post/2023-04-02-new-site-released\",\n          children: \"Dark Emblem Blog Announcement\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://capsulecat.com/blog/04-02-2023-dark-emblem-update/\",\n          children: \"Capsule Cat Announcement\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","excerptRaw":"\nDark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.","excerptHTML":"<p>Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\"\n  }, props.components);\n  return _jsx(_components.p, {\n    children: \"Dark Emblem is an NFT project that was sparked by the idea of combining cards games with Crypto Kitties. You can buy packs, open them to collect random cards, and then use those cards to battle raids with others.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["dark emblem","wax","nft","blockchain"]},{"slug":"2023-01-24-chat-gpt-doesnt-understand","date":"2023-01-24","title":"ChatGPT Doesn't Understand","frontmatter":{"title":"ChatGPT Doesn't Understand","tags":["openai","chatgpt"]},"contentRaw":"\nLooks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether [ChatGPT can play 20 questions](https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff). The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.\n\nI attempted to do 20 questions with ChatGPT using a different prompt:\n\n*Me: I would like to play a game. It's called twenty questions. You will ask me one question at a time and I will answer it. The goal is for you guess the thing I am thinking about.*\n\n*ChatGPT: Sure, I'd be happy to play \"Twenty Questions\" with you. Please go ahead and think of something, and I will start asking my first question.*\n\n*Me: I am ready*\n\n*ChatGPT: Great, here is my first question: Is the thing you are thinking of an object?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object something that you can hold in your hand?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object something that you would typically find in a kitchen?*\n\n*Me: No*\n\n*ChatGPT: Is the object something that you would use for transportation?*\n\n*Me: No*\n\n*ChatGPT: Is the object something that you would use for entertainment or leisure?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object a musical instrument?*\n\n*Me: No*\n\n*ChatGPT: Is the object a type of game or puzzle?*\n\n*Me: No*\n\n*ChatGPT: Is the object a piece of technology such as a phone or computer?*\n\n*Me: No*\n\n*ChatGPT: Is the object a book or magazine?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object a novel or a collection of short stories?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object a specific book that is widely known and read?*\n\n*Me: Yes*\n\n*ChatGPT: Is the object \"To Kill a Mockingbird\" by Harper Lee?*\n\n*Me: No*\n\n*ChatGPT: I'm sorry, I'm running out of ideas. Can you give me a hint or tell me the answer?*\n\nSeems like we hit a wall here with twenty questions, but ChatGPT is very close, so I decided to give a hint.\n\n*Me: You are on the right track. It is by Walt Whitman*\n\n*ChatGPT: Is the object \"Leaves of Grass\" by Walt Whitman?*\n\n*Me: Yes! Congratulations!*\n\n*ChatGPT: Thank you! I'm glad I was able to guess the object you were thinking of. It was fun playing \"Twenty Questions\" with you. Let me know if you want to play again sometime.*\n\n---\n\nI’ve been keeping an eye on how other people are using ChatGPT, and [prompt engineering](https://en.wikipedia.org/wiki/Prompt_engineering) is one of the more fascinating aspects around how people are communicating with the AI. Prompt engineering plays a key role in communicating with models like ChatGPT. Carefully crafting prompts can help maximize the quality of the reponse. However, it is important to keep in mind that, like any AI model, ChatGPT has its own set of limitations.\n\nSo I was curious when I read that “[ChatGPT can’t write sentences that end in a specific letter](https://www.reddit.com/r/ChatGPT/comments/101e454/chatgpt_cant_write_sentences_that_end_with_a/)”. Is this a real limitation of ChatGPT, or maybe this was just a poor prompt.\n\nSo let’s start with a very simple question to ChatGPT:\n\n*Me: Can you write a sentence that ends with the letter \"a\"?*\n\n*ChatGPT: The cat sat on the mat.*\n\n*Me: That sentence does not end in the letter \"a\". Can you write a sentence that ends in the letter \"a\"?*\n\n*ChatGPT: I can't think of anything right now, but the word \"America\" ends with letter \"a\".*\n\n*Me: Great, write a sentence that ends in that word. That will then satisfy the original question.*\n\n*ChatGPT: The land of the free, and the home of the brave, America.*\n\nOkay, that does technically end in the letter a, but the sentence seems very strange.\n\n*Me: That isn't a very coherent sentence. Can you write a sentence that ends in the letter \"a\"?*\n\n*ChatGPT: I am sorry for the confusion, here is a sentence that ends with the letter \"a\" - \"He saw the drama unfold on the stage, it was quite the spectacle, a.”*\n\nLooks like we are going off the rails here. Let’s try a different approach:\n\n*Me: Write a sentence that ends in a word that ends with the letter \"a\".*\n\n*ChatGPT: The sun was setting over the horizon, painting the sky with shades of orange and red, a spectacle to behold and end the day with.*\n\nI’m going to ask ChatGPT to tell me a prompt to feed back to itself. I’ve found this useful for resetting context when having long conversations. Or if ChatGPT gets into weird states like the above response.\n\n*Me: Can you tell me how to write a prompt for you that would actually get you to write a sentence that ends in the letter \"a\".*\n\n*ChatGPT: Sure, to get me to write a sentence that ends in the letter \"a\" you could provide a prompt like: \"Write a sentence that ends with a word that ends with the letter 'a'\" or \"Can you write a sentence with a word ending in 'a' at the end of the sentence?\" . This makes it clear that the sentence should end in a word ending with the letter 'a'.*\n\n*Me: Can you write a sentence with a word ending in 'a' at the end of the sentence?*\n\n*ChatGPT: The sky was clear and blue, not a cloud in sight, perfect for a day out at the parka.*\n\n---\n\nWhile ChatGPT is great at forming sentences and even code, it seems like it has no understanding and hasn’t been trained on letters, syllables, or the concept of sentences. I've seen others get ChatGPT to create poems, but it has no concept of why words would rhyme. It can give great answers to questions, but doesn’t understand how to count how many words are in its response.\n\nOne Redditor in the link above mentions that ChatGPT fails at ASCII art. I’ve tried getting the AI to print ASCII art before, and I’ll leave you with part of a conversation I’ve had with it. This appears to be the best ASCII art I could get it to print, even after having a long conversation where I provided different ASCII art examples:\n\n*Me: Can you make ASCII art? Show me a picture of a cat.*\n\n*ChatGPT: Sure! Here is a picture of a cat using ASCII art:*\n\n```\n /\\_/\\\n( o.o )\n >^<\n\n```\n\n*I hope you like it! Is there anything else I can help with?*\n\n*Me: Can you make it more detailed*\n\n*ChatGPT: Certainly! Here is a more detailed version of an ASCII art cat:*\n\n```\n /\\_/\\\n( o.o )\n  >^<\n  | |\n  || ||\n  \\\\ //\n  // \\\\\n  \\\\_//\n  /   \\\n /     \\\n\n```\n\nWith new language models coming out, it's important to recognize what the limitations\nof the AI are. Poor responses can be a result of poorly written prompts, but there\nare times, like with letters in words with ChatGPT, where the AI just doesn't have\nthe capability to understand the question.\n","contentHTML":"<p>Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether <a href=\"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\">ChatGPT can play 20 questions</a>. The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.</p>\n<p>I attempted to do 20 questions with ChatGPT using a different prompt:</p>\n<p><em>Me: I would like to play a game. It&#x27;s called twenty questions. You will ask me one question at a time and I will answer it. The goal is for you guess the thing I am thinking about.</em></p>\n<p><em>ChatGPT: Sure, I&#x27;d be happy to play &quot;Twenty Questions&quot; with you. Please go ahead and think of something, and I will start asking my first question.</em></p>\n<p><em>Me: I am ready</em></p>\n<p><em>ChatGPT: Great, here is my first question: Is the thing you are thinking of an object?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object something that you can hold in your hand?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object something that you would typically find in a kitchen?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object something that you would use for transportation?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object something that you would use for entertainment or leisure?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object a musical instrument?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object a type of game or puzzle?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object a piece of technology such as a phone or computer?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: Is the object a book or magazine?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object a novel or a collection of short stories?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object a specific book that is widely known and read?</em></p>\n<p><em>Me: Yes</em></p>\n<p><em>ChatGPT: Is the object &quot;To Kill a Mockingbird&quot; by Harper Lee?</em></p>\n<p><em>Me: No</em></p>\n<p><em>ChatGPT: I&#x27;m sorry, I&#x27;m running out of ideas. Can you give me a hint or tell me the answer?</em></p>\n<p>Seems like we hit a wall here with twenty questions, but ChatGPT is very close, so I decided to give a hint.</p>\n<p><em>Me: You are on the right track. It is by Walt Whitman</em></p>\n<p><em>ChatGPT: Is the object &quot;Leaves of Grass&quot; by Walt Whitman?</em></p>\n<p><em>Me: Yes! Congratulations!</em></p>\n<p><em>ChatGPT: Thank you! I&#x27;m glad I was able to guess the object you were thinking of. It was fun playing &quot;Twenty Questions&quot; with you. Let me know if you want to play again sometime.</em></p>\n<hr/>\n<p>I’ve been keeping an eye on how other people are using ChatGPT, and <a href=\"https://en.wikipedia.org/wiki/Prompt_engineering\">prompt engineering</a> is one of the more fascinating aspects around how people are communicating with the AI. Prompt engineering plays a key role in communicating with models like ChatGPT. Carefully crafting prompts can help maximize the quality of the reponse. However, it is important to keep in mind that, like any AI model, ChatGPT has its own set of limitations.</p>\n<p>So I was curious when I read that “<a href=\"https://www.reddit.com/r/ChatGPT/comments/101e454/chatgpt_cant_write_sentences_that_end_with_a/\">ChatGPT can’t write sentences that end in a specific letter</a>”. Is this a real limitation of ChatGPT, or maybe this was just a poor prompt.</p>\n<p>So let’s start with a very simple question to ChatGPT:</p>\n<p><em>Me: Can you write a sentence that ends with the letter &quot;a&quot;?</em></p>\n<p><em>ChatGPT: The cat sat on the mat.</em></p>\n<p><em>Me: That sentence does not end in the letter &quot;a&quot;. Can you write a sentence that ends in the letter &quot;a&quot;?</em></p>\n<p><em>ChatGPT: I can&#x27;t think of anything right now, but the word &quot;America&quot; ends with letter &quot;a&quot;.</em></p>\n<p><em>Me: Great, write a sentence that ends in that word. That will then satisfy the original question.</em></p>\n<p><em>ChatGPT: The land of the free, and the home of the brave, America.</em></p>\n<p>Okay, that does technically end in the letter a, but the sentence seems very strange.</p>\n<p><em>Me: That isn&#x27;t a very coherent sentence. Can you write a sentence that ends in the letter &quot;a&quot;?</em></p>\n<p><em>ChatGPT: I am sorry for the confusion, here is a sentence that ends with the letter &quot;a&quot; - &quot;He saw the drama unfold on the stage, it was quite the spectacle, a.”</em></p>\n<p>Looks like we are going off the rails here. Let’s try a different approach:</p>\n<p><em>Me: Write a sentence that ends in a word that ends with the letter &quot;a&quot;.</em></p>\n<p><em>ChatGPT: The sun was setting over the horizon, painting the sky with shades of orange and red, a spectacle to behold and end the day with.</em></p>\n<p>I’m going to ask ChatGPT to tell me a prompt to feed back to itself. I’ve found this useful for resetting context when having long conversations. Or if ChatGPT gets into weird states like the above response.</p>\n<p><em>Me: Can you tell me how to write a prompt for you that would actually get you to write a sentence that ends in the letter &quot;a&quot;.</em></p>\n<p><em>ChatGPT: Sure, to get me to write a sentence that ends in the letter &quot;a&quot; you could provide a prompt like: &quot;Write a sentence that ends with a word that ends with the letter &#x27;a&#x27;&quot; or &quot;Can you write a sentence with a word ending in &#x27;a&#x27; at the end of the sentence?&quot; . This makes it clear that the sentence should end in a word ending with the letter &#x27;a&#x27;.</em></p>\n<p><em>Me: Can you write a sentence with a word ending in &#x27;a&#x27; at the end of the sentence?</em></p>\n<p><em>ChatGPT: The sky was clear and blue, not a cloud in sight, perfect for a day out at the parka.</em></p>\n<hr/>\n<p>While ChatGPT is great at forming sentences and even code, it seems like it has no understanding and hasn’t been trained on letters, syllables, or the concept of sentences. I&#x27;ve seen others get ChatGPT to create poems, but it has no concept of why words would rhyme. It can give great answers to questions, but doesn’t understand how to count how many words are in its response.</p>\n<p>One Redditor in the link above mentions that ChatGPT fails at ASCII art. I’ve tried getting the AI to print ASCII art before, and I’ll leave you with part of a conversation I’ve had with it. This appears to be the best ASCII art I could get it to print, even after having a long conversation where I provided different ASCII art examples:</p>\n<p><em>Me: Can you make ASCII art? Show me a picture of a cat.</em></p>\n<p><em>ChatGPT: Sure! Here is a picture of a cat using ASCII art:</em></p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code> /\\_/\\\n( o.o )\n &gt;^&lt;\n\n</code></pre></div>\n<p><em>I hope you like it! Is there anything else I can help with?</em></p>\n<p><em>Me: Can you make it more detailed</em></p>\n<p><em>ChatGPT: Certainly! Here is a more detailed version of an ASCII art cat:</em></p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code> /\\_/\\\n( o.o )\n  &gt;^&lt;\n  | |\n  || ||\n  \\\\ //\n  // \\\\\n  \\\\_//\n  /   \\\n /     \\\n\n</code></pre></div>\n<p>With new language models coming out, it&#x27;s important to recognize what the limitations\nof the AI are. Poor responses can be a result of poorly written prompts, but there\nare times, like with letters in words with ChatGPT, where the AI just doesn&#x27;t have\nthe capability to understand the question.</p>","contentCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\",\n    em: \"em\",\n    hr: \"hr\",\n    pre: \"pre\",\n    code: \"code\"\n  }, props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsxs(_components.p, {\n      children: [\"Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether \", _jsx(_components.a, {\n        href: \"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\",\n        children: \"ChatGPT can play 20 questions\"\n      }), \". The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I attempted to do 20 questions with ChatGPT using a different prompt:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: I would like to play a game. It's called twenty questions. You will ask me one question at a time and I will answer it. The goal is for you guess the thing I am thinking about.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Sure, I'd be happy to play \\\"Twenty Questions\\\" with you. Please go ahead and think of something, and I will start asking my first question.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: I am ready\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Great, here is my first question: Is the thing you are thinking of an object?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you can hold in your hand?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you would typically find in a kitchen?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you would use for transportation?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object something that you would use for entertainment or leisure?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a musical instrument?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a type of game or puzzle?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a piece of technology such as a phone or computer?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a book or magazine?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a novel or a collection of short stories?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object a specific book that is widely known and read?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object \\\"To Kill a Mockingbird\\\" by Harper Lee?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: No\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: I'm sorry, I'm running out of ideas. Can you give me a hint or tell me the answer?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Seems like we hit a wall here with twenty questions, but ChatGPT is very close, so I decided to give a hint.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: You are on the right track. It is by Walt Whitman\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Is the object \\\"Leaves of Grass\\\" by Walt Whitman?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Yes! Congratulations!\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Thank you! I'm glad I was able to guess the object you were thinking of. It was fun playing \\\"Twenty Questions\\\" with you. Let me know if you want to play again sometime.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsxs(_components.p, {\n      children: [\"I’ve been keeping an eye on how other people are using ChatGPT, and \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Prompt_engineering\",\n        children: \"prompt engineering\"\n      }), \" is one of the more fascinating aspects around how people are communicating with the AI. Prompt engineering plays a key role in communicating with models like ChatGPT. Carefully crafting prompts can help maximize the quality of the reponse. However, it is important to keep in mind that, like any AI model, ChatGPT has its own set of limitations.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So I was curious when I read that “\", _jsx(_components.a, {\n        href: \"https://www.reddit.com/r/ChatGPT/comments/101e454/chatgpt_cant_write_sentences_that_end_with_a/\",\n        children: \"ChatGPT can’t write sentences that end in a specific letter\"\n      }), \"”. Is this a real limitation of ChatGPT, or maybe this was just a poor prompt.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So let’s start with a very simple question to ChatGPT:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you write a sentence that ends with the letter \\\"a\\\"?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The cat sat on the mat.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: That sentence does not end in the letter \\\"a\\\". Can you write a sentence that ends in the letter \\\"a\\\"?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: I can't think of anything right now, but the word \\\"America\\\" ends with letter \\\"a\\\".\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Great, write a sentence that ends in that word. That will then satisfy the original question.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The land of the free, and the home of the brave, America.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Okay, that does technically end in the letter a, but the sentence seems very strange.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: That isn't a very coherent sentence. Can you write a sentence that ends in the letter \\\"a\\\"?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: I am sorry for the confusion, here is a sentence that ends with the letter \\\"a\\\" - \\\"He saw the drama unfold on the stage, it was quite the spectacle, a.”\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Looks like we are going off the rails here. Let’s try a different approach:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Write a sentence that ends in a word that ends with the letter \\\"a\\\".\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The sun was setting over the horizon, painting the sky with shades of orange and red, a spectacle to behold and end the day with.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"I’m going to ask ChatGPT to tell me a prompt to feed back to itself. I’ve found this useful for resetting context when having long conversations. Or if ChatGPT gets into weird states like the above response.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you tell me how to write a prompt for you that would actually get you to write a sentence that ends in the letter \\\"a\\\".\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Sure, to get me to write a sentence that ends in the letter \\\"a\\\" you could provide a prompt like: \\\"Write a sentence that ends with a word that ends with the letter 'a'\\\" or \\\"Can you write a sentence with a word ending in 'a' at the end of the sentence?\\\" . This makes it clear that the sentence should end in a word ending with the letter 'a'.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you write a sentence with a word ending in 'a' at the end of the sentence?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: The sky was clear and blue, not a cloud in sight, perfect for a day out at the parka.\"\n      })\n    }), \"\\n\", _jsx(_components.hr, {}), \"\\n\", _jsx(_components.p, {\n      children: \"While ChatGPT is great at forming sentences and even code, it seems like it has no understanding and hasn’t been trained on letters, syllables, or the concept of sentences. I've seen others get ChatGPT to create poems, but it has no concept of why words would rhyme. It can give great answers to questions, but doesn’t understand how to count how many words are in its response.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"One Redditor in the link above mentions that ChatGPT fails at ASCII art. I’ve tried getting the AI to print ASCII art before, and I’ll leave you with part of a conversation I’ve had with it. This appears to be the best ASCII art I could get it to print, even after having a long conversation where I provided different ASCII art examples:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you make ASCII art? Show me a picture of a cat.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Sure! Here is a picture of a cat using ASCII art:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \" /\\\\_/\\\\\\n( o.o )\\n >^<\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"I hope you like it! Is there anything else I can help with?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Me: Can you make it more detailed\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"ChatGPT: Certainly! Here is a more detailed version of an ASCII art cat:\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \" /\\\\_/\\\\\\n( o.o )\\n  >^<\\n  | |\\n  || ||\\n  \\\\\\\\ //\\n  // \\\\\\\\\\n  \\\\\\\\_//\\n  /   \\\\\\n /     \\\\\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With new language models coming out, it's important to recognize what the limitations\\nof the AI are. Poor responses can be a result of poorly written prompts, but there\\nare times, like with letters in words with ChatGPT, where the AI just doesn't have\\nthe capability to understand the question.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nLooks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether [ChatGPT can play 20 questions](https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff). The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.","excerptHTML":"<p>Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether <a href=\"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\">ChatGPT can play 20 questions</a>. The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.</p>","excerptCode":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    a: \"a\"\n  }, props.components);\n  return _jsxs(_components.p, {\n    children: [\"Looks like everyone is trying to discover ChatGPT’s limitations. In one article I read, the author asked whether \", _jsx(_components.a, {\n      href: \"https://medium.com/@theworldaccordingtocgpt/chatgpt-can-play-20-questions-7911405f7aff\",\n      children: \"ChatGPT can play 20 questions\"\n    }), \". The human in this scenario tried to play 20 questions with ChatGPT, and found that they needed to guide the AI to ask questions. From my perspective, it looked more like a failure to engineer the initial prompt correctly.\"]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["openai","chatgpt"]}],"hasNextPage":true,"hasPreviousPage":true},"__N_SSG":true}