"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createHtmlStringFromMarkdown = exports.createExcerpt = exports.rewriteMedias = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const react_1 = __importDefault(require("react"));
const server_1 = __importDefault(require("react-dom/server"));
/**
 * Rewrite all media images to public folder paths
 *
 * @ignore
 */
function rewriteMedias(baseFilePath, scope, markdown, mediaDirectory, relativeDirectory) {
    const mediaPaths = [];
    // Match images like `![alt](/path)` or `![alt](./path)`
    const regex = /!\[.*]\((\.\/|\/)(.*)\)/gm;
    let match;
    while ((match = regex.exec(markdown)) !== null) {
        const prefix = match[1];
        const mediaPath = match[2];
        mediaPaths.push({
            referencePath: mediaPath,
            oldAbsolutePath: path_1.join(baseFilePath, mediaPath),
            newPath: path_1.join(scope, mediaPath),
        });
        markdown = markdown.replace(`${prefix}${mediaPath}`, path_1.join(relativeDirectory, scope, mediaPath));
    }
    // Copy all media files to public folder
    for (const mediaPath of mediaPaths) {
        // Ensure the media scope folder exists
        const scopePath = path_1.join(mediaDirectory, scope);
        if (!fs_1.default.existsSync(scopePath)) {
            fs_1.default.mkdirSync(scopePath, { recursive: true });
        }
        const { oldAbsolutePath, newPath } = mediaPath;
        fs_1.default.copyFileSync(oldAbsolutePath, path_1.join(mediaDirectory, newPath));
    }
    return markdown;
}
exports.rewriteMedias = rewriteMedias;
/**
 * @ignore
 */
function createExcerpt(content, options) {
    var _a;
    const truncateIndex = content.indexOf(options.truncateMarker);
    if (truncateIndex !== -1) {
        return content.slice(0, truncateIndex);
    }
    // Find the first paragraph
    const firstParagraphIndex = (_a = content.match(/(.+)\n/gm)) === null || _a === void 0 ? void 0 : _a[0].length;
    if (firstParagraphIndex !== -1) {
        return content.slice(0, firstParagraphIndex);
    }
    return content.slice(0, options.truncateLength);
}
exports.createExcerpt = createExcerpt;
/**
 * Create a HTML string from a markdown string, and
 * support MDX syntax with imports. This is used to
 * generate server-side rendered HTML for blog posts.
 *
 * @ignore
 */
async function createHtmlStringFromMarkdown(markdown, options) {
    // Replace <!--.*--> with empty string
    markdown = markdown.replace(/<!--.*-->/g, "");
    const code = await options.mdx.compile(markdown);
    const Component = await toJsx(code, options);
    const rendered = String(server_1.default.renderToString(react_1.default.createElement(Component, { components: options.mdx.components })));
    return {
        rendered,
        code,
    };
}
exports.createHtmlStringFromMarkdown = createHtmlStringFromMarkdown;
/**
 * @ignore
 */
async function toJsx(code, options) {
    return options.mdx.run(code);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY29udGVudC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsNENBQW9CO0FBQ3BCLCtCQUE0QjtBQUU1QixrREFBMEI7QUFDMUIsOERBQThDO0FBSTlDOzs7O0dBSUc7QUFDSCxTQUFnQixhQUFhLENBQ3pCLFlBQW9CLEVBQ3BCLEtBQWEsRUFDYixRQUFnQixFQUNoQixjQUFzQixFQUN0QixpQkFBeUI7SUFFekIsTUFBTSxVQUFVLEdBSVYsRUFBRSxDQUFDO0lBRVQsd0RBQXdEO0lBQ3hELE1BQU0sS0FBSyxHQUFHLDJCQUEyQixDQUFDO0lBQzFDLElBQUksS0FBNkIsQ0FBQztJQUVsQyxPQUFPLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDNUMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3hCLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUUzQixVQUFVLENBQUMsSUFBSSxDQUFDO1lBQ1osYUFBYSxFQUFFLFNBQVM7WUFDeEIsZUFBZSxFQUFFLFdBQUksQ0FBQyxZQUFZLEVBQUUsU0FBUyxDQUFDO1lBQzlDLE9BQU8sRUFBRSxXQUFJLENBQUMsS0FBSyxFQUFFLFNBQVMsQ0FBQztTQUNsQyxDQUFDLENBQUM7UUFFSCxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FDdkIsR0FBRyxNQUFNLEdBQUcsU0FBUyxFQUFFLEVBQ3ZCLFdBQUksQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsU0FBUyxDQUFDLENBQzVDLENBQUM7S0FDTDtJQUVELHdDQUF3QztJQUN4QyxLQUFLLE1BQU0sU0FBUyxJQUFJLFVBQVUsRUFBRTtRQUNoQyx1Q0FBdUM7UUFDdkMsTUFBTSxTQUFTLEdBQUcsV0FBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsWUFBRSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMzQixZQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsTUFBTSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsR0FBRyxTQUFTLENBQUM7UUFFL0MsWUFBRSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsV0FBSSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDO0tBQ25FO0lBRUQsT0FBTyxRQUFRLENBQUM7QUFDcEIsQ0FBQztBQS9DRCxzQ0ErQ0M7QUFFRDs7R0FFRztBQUNILFNBQWdCLGFBQWEsQ0FBQyxPQUFlLEVBQUUsT0FBb0I7O0lBQy9ELE1BQU0sYUFBYSxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRTlELElBQUksYUFBYSxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ3RCLE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsYUFBYSxDQUFDLENBQUM7S0FDMUM7SUFFRCwyQkFBMkI7SUFDM0IsTUFBTSxtQkFBbUIsU0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQywwQ0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDO0lBRWxFLElBQUksbUJBQW1CLEtBQUssQ0FBQyxDQUFDLEVBQUU7UUFDNUIsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDcEQsQ0FBQztBQWZELHNDQWVDO0FBRUQ7Ozs7OztHQU1HO0FBQ0ksS0FBSyxVQUFVLDRCQUE0QixDQUM5QyxRQUFnQixFQUNoQixPQUFvQjtJQUVwQixzQ0FBc0M7SUFDdEMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBRTlDLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDakQsTUFBTSxTQUFTLEdBQUcsTUFBTSxLQUFLLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTdDLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FDbkIsZ0JBQWMsQ0FBQyxjQUFjLENBQ3pCLDhCQUFDLFNBQVMsSUFBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUksQ0FDcEQsQ0FDSixDQUFDO0lBRUYsT0FBTztRQUNILFFBQVE7UUFDUixJQUFJO0tBQ1AsQ0FBQztBQUNOLENBQUM7QUFwQkQsb0VBb0JDO0FBRUQ7O0dBRUc7QUFDSCxLQUFLLFVBQVUsS0FBSyxDQUFDLElBQVksRUFBRSxPQUFvQjtJQUNuRCxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ2pDLENBQUMifQ==