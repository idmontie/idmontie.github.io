"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupPostsByTags = exports.getPreviousPost = exports.getNextPost = exports.getAllPostsByDate = exports.getAllPosts = exports.getPostSlugs = exports.getPostBySlug = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = require("path");
const gray_matter_1 = __importDefault(require("gray-matter"));
const content_1 = require("./content");
const util_1 = require("./util");
/**
 * Get a post by its slug.
 *
 * @param slug
 * @param options
 */
exports.getPostBySlug = util_1.memoize(async function (slug, options) {
    var _a, _b;
    const folderPath = path_1.join(options.postsDirectory, slug);
    const fullPath = path_1.join(folderPath, "index.mdx");
    const backupPath = path_1.join(folderPath, "index.md");
    let filePath;
    // Check if path is a folder or a file
    if (fs_1.default.lstatSync(folderPath).isFile()) {
        filePath = folderPath;
    }
    else if (fs_1.default.existsSync(fullPath)) {
        filePath = fullPath;
    }
    else {
        filePath = backupPath;
    }
    const fileContents = fs_1.default.readFileSync(filePath, "utf8");
    const newContents = options.rewriteMediaUrls
        ? content_1.rewriteMedias(folderPath, slug, fileContents, options.rewriteMediaUrls.mediaDirectory, options.rewriteMediaUrls.relativeDirectory)
        : fileContents;
    const { data, content } = gray_matter_1.default(newContents);
    const excerpt = content_1.createExcerpt(content, options);
    const { rendered: excerptRendered, code: excerptCode } = await content_1.createHtmlStringFromMarkdown(excerpt || "", options);
    const { rendered: contentRendered, code: contentCode } = await content_1.createHtmlStringFromMarkdown(content || "", options);
    const item = {
        slug: slug,
        date: slug.split("-").slice(0, 3).join("-"),
        title: (_a = data["title"]) !== null && _a !== void 0 ? _a : slug,
        frontmatter: data,
        contentRaw: content,
        contentHTML: contentRendered,
        contentCode,
        excerptRaw: excerpt,
        excerptHTML: excerptRendered,
        excerptCode,
        tags: (_b = data["tags"]) !== null && _b !== void 0 ? _b : [],
    };
    return item;
});
/**
 * Get a list of all post slugs.
 */
function getPostSlugs(options) {
    const fileNames = fs_1.default.readdirSync(options.postsDirectory);
    // Exclude files that start with a dot
    return fileNames.filter((fileName) => !fileName.startsWith("."));
}
exports.getPostSlugs = getPostSlugs;
/**
 * Get a list of all posts.
 */
exports.getAllPosts = util_1.memoize(async function (options) {
    const slugs = getPostSlugs(options);
    return await Promise.all(slugs.map((slug) => exports.getPostBySlug(slug, options)));
});
async function getAllPostsByDate(options) {
    const result = await exports.getAllPosts(options);
    return result.sort((post1, post2) => (post1.date > post2.date ? -1 : 1));
}
exports.getAllPostsByDate = getAllPostsByDate;
async function getNextPost(slug, options) {
    const allPosts = await getAllPostsByDate(options);
    const index = allPosts.map((post) => post.slug).indexOf(slug);
    if (index === allPosts.length - 1 || index === -1)
        return null;
    return allPosts[index + 1];
}
exports.getNextPost = getNextPost;
async function getPreviousPost(slug, options) {
    const allPosts = await getAllPostsByDate(options);
    const index = allPosts.map((post) => post.slug).indexOf(slug);
    if (index === 0 || index === -1)
        return null;
    return allPosts[index - 1];
}
exports.getPreviousPost = getPreviousPost;
exports.groupPostsByTags = util_1.memoize(async function (options) {
    const allPosts = await exports.getAllPosts(options);
    const result = {};
    allPosts.forEach((post) => {
        post.tags.forEach((tag) => {
            if (!result[tag])
                result[tag] = [];
            result[tag].push(post);
        });
    });
    // Sort each key-value
    Object.keys(result).forEach((key) => {
        result[key].sort((post1, post2) => (post1.date > post2.date ? -1 : 1));
    });
    return result;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvbGliL3Bvc3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDRDQUFvQjtBQUNwQiwrQkFBNEI7QUFFNUIsOERBQWlDO0FBRWpDLHVDQUltQjtBQUVuQixpQ0FBaUM7QUFFakM7Ozs7O0dBS0c7QUFDVSxRQUFBLGFBQWEsR0FBRyxjQUFPLENBQUMsS0FBSyxXQUN0QyxJQUFZLEVBQ1osT0FBb0I7O0lBRXBCLE1BQU0sVUFBVSxHQUFHLFdBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RELE1BQU0sUUFBUSxHQUFHLFdBQUksQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDL0MsTUFBTSxVQUFVLEdBQUcsV0FBSSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUVoRCxJQUFJLFFBQVEsQ0FBQztJQUViLHNDQUFzQztJQUN0QyxJQUFJLFlBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDbkMsUUFBUSxHQUFHLFVBQVUsQ0FBQztLQUN6QjtTQUFNLElBQUksWUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtRQUNoQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0tBQ3ZCO1NBQU07UUFDSCxRQUFRLEdBQUcsVUFBVSxDQUFDO0tBQ3pCO0lBRUQsTUFBTSxZQUFZLEdBQUcsWUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFdkQsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLGdCQUFnQjtRQUN4QyxDQUFDLENBQUMsdUJBQWEsQ0FDVCxVQUFVLEVBQ1YsSUFBSSxFQUNKLFlBQVksRUFDWixPQUFPLENBQUMsZ0JBQWdCLENBQUMsY0FBYyxFQUN2QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQzdDO1FB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