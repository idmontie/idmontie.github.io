{"pageProps":{"headTitle":"Security - idmontie's Portfolio","headKeywords":"security","post":{"slug":"2015-01-03-security","date":"2015-01-03","title":"Security","frontmatter":{"title":"Security","tags":["security"]},"contentRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into security for web applications.\n\n## Prevent Against SQL Injection\n\nRead about [SQL injection](http://en.wikipedia.org/wiki/SQL_injection) and learn how to prevent it for the langauge and database you are using.\n\n## All User Input is Filtered\n\nNever trust user input.  This includes cookies and hidden form field values.\n\n## Read the Open Web Application Security Project\n\nRead [the Open Web Application Security Project](https://www.owasp.org/index.php/Category:OWASP_Guide_Project).\n\n## All Passwords are Hashed with a Salt\n\nHash all passwords using a [salt](http://security.stackexchange.com/q/21263/396) and all salts are different to prevent against [rainbow attacks](http://en.wikipedia.org/wiki/Rainbow_table).\n\nThe hashing algorithm should be bcrypt or scrypt for storing passwords.  Look into [How To Safely Sroe a Password](http://codahale.com/how-to-safely-store-a-password/).\n\nDo **not** use MD5 or any SHA algorithm.  SHA algorithms are meant to be fast, which should not be used for trying to securely store passwords.\n\n## Use a Standard Authentication System\n\nDo not role your own authentication system.\n\n## Process Credit Card Information Correctly\n\nLook into the [PCI Security Standards](https://www.pcisecuritystandards.org/) for financial security information.\n\n## Use HTTPS for Sensitive Data\n\nSet up your [SSL](http://www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt)/[HTTPS](http://en.wikipedia.org/wiki/Https) certs correctly and check it against [SSL Labs Server Test](https://www.ssllabs.com/ssltest/).\n\n## Prevent Session Hijacking\n\nBuilt in session systems are usually premade to handle these types of attacks. It is not recommended that you roll your own, but it should have the following features:\n\n- Encrypted data traffic.  The session key in particular should be encrypted, but ideally all traffic should be encrypted by using SSL/TLS.\n- Long random session key.  Attackers should not be able to guess valid session keys.\n- Regenerating the session id after a successful login.  Prevents [session fixation](http://en.wikipedia.org/wiki/Session_fixation].\n- Change the cookie value with each and every request.  This reduces the window for an attacker to hijack the session.\n\n## Prevent Cross Site Scripting (XSS)\n\nUnfiltered query parameters that are added to the DOM are an easy way for attackers to use cross site scripting to pull data from your users.  Filter all query parameters; see [Cross-site Scripting](http://en.wikipedia.org/wiki/Cross-site_scripting) for more information on common attacks and prevention methods.\n\n## Prevent Page Embedding\n\nYou can prevent page embedding with the following header:\n\n```\nX-Frame-Options: DENY\n```\n\nThis will cause browsers to refuse requests for framing in that page.\n\nYou can also prevent page embedding with JavaScript to prevent users from accessing your website in an iframe.  Look into this [StackOverflow solution](http://stackoverflow.com/questions/7776281/javascript-jquery-how-to-detect-if-a-page-is-embedded-by-others).\n\n## Prevent Cross Site Request Forgeries\n\nCross site request forgeries are attacks by a malicious user whereby they craft a link to a site which a user is know to have been authenticated.  For example, say your site is a bank website; the malicious user may craft a URL for you site that when a user clicks on it, deposits money into the attacker's account.  The attacker then sends the link to users who may have been logged into your bank website.\n\nAccording to [Wikipedia](http://en.wikipedia.org/wiki/Cross-site_request_forgery):\n\n> At risk are web applications that perform actions based on input from trusted and authenticated users without requiring the user to authorize the specific action. A user who is authenticated by a cookie saved in the user's web browser could unknowingly send an HTTP request to a site that trusts the user and thereby causes an unwanted action.\n\n## Prevent Click Jacking\n\nSimilar to [Page Embedding](#prevent-page-embedding), click jacking works by:\n\n> A user might receive an email with a link to a video about a news item, but another valid page, say a product page on Amazon.com, can be \"hidden\" on top or underneath the \"PLAY\" button of the news video. The user tries to \"play\" the video but actually \"buys\" the product from Amazon.\n\nOther known exploits include:\n\n- Tricking users into enabling their webcam and microphone through Flash\n- Tricking users into making their social networking profile information public\n- Making users follow someone on Twitter[8]\n- Sharing links on Facebook\n\nSee [Wikipedia](http://en.wikipedia.org/wiki/Clickjacking) for more information.\n\n## Verify That Server Software is Up to Date\n\nMake sure that the software on your system is up to date with the latest patches.\n\n## Verify That Packages, Modules, Plugins, etc are Up to Date\n\nMake sure that the latest software used by your projest is up to date with the latest patches.\n\n## Verify That Your Database is Secured\n\nMake sure that connections to the database are at least password protected.  Verify that only the least amount of permissions are being used.\n\nMake sure that confidential information is encrypted or hashed.\n\n## Attempt to Make Your App Run As Non-Root\n\nApply [the principle of least privilege](https://en.wikipedia.org/wiki/Principle_of_least_privilege) and try to have your app run as non-root as often as possible.\n\n## Use the Content-Security-Policy Header\n\nSpecify the following header to make the browser only run certain content depending on its origin:\n\n**example**\n\n```\nContent-Security-Policy: script-src 'self' https://apis.google.com\n```\n\nYou can also specify the following type of content:\n\n- script-src (JavaScript)\n- connect-src (XMLHttpRequest, WebSockets, and EventSource)\n- font-src (Fonts)\n- frame-src (Frame Urls)\n- img-src (Images)\n- media-src (Audio and Videos)\n- object-src (Flash)\n- style-src (CSS)\n\n## Do Not Allow Mime Sniffing with User Uploaded Content\n\nYou can tell browsers to not try to guess Mime Types of files with the following header:\n\n```\nX-CONTENT-TYPE-OPTIONS: nosniff\n```\n\nFor example, say a user uploads an HTML file. You intend to serve it to users as a text file, but the browser will attempt to serve it as an HTML page.  You can tell the browser that you know what you are doing and that the Mime Type you are providing is indeed correct by using the above header.\n\n## Force HTTPS Traffic\n\nYou can force HTTPS Traffic with the following header:\n\n```\nScrict-Transport-Security: max-age=31536000; includeSubDomains\n```\n\nThis will force `https://website.com` even when typing in `http://website.com`\n","contentHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into security for web applications.</p>\n<h2>Prevent Against SQL Injection</h2>\n<p>Read about <a href=\"http://en.wikipedia.org/wiki/SQL_injection\">SQL injection</a> and learn how to prevent it for the langauge and database you are using.</p>\n<h2>All User Input is Filtered</h2>\n<p>Never trust user input.  This includes cookies and hidden form field values.</p>\n<h2>Read the Open Web Application Security Project</h2>\n<p>Read <a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\">the Open Web Application Security Project</a>.</p>\n<h2>All Passwords are Hashed with a Salt</h2>\n<p>Hash all passwords using a <a href=\"http://security.stackexchange.com/q/21263/396\">salt</a> and all salts are different to prevent against <a href=\"http://en.wikipedia.org/wiki/Rainbow_table\">rainbow attacks</a>.</p>\n<p>The hashing algorithm should be bcrypt or scrypt for storing passwords.  Look into <a href=\"http://codahale.com/how-to-safely-store-a-password/\">How To Safely Sroe a Password</a>.</p>\n<p>Do <strong>not</strong> use MD5 or any SHA algorithm.  SHA algorithms are meant to be fast, which should not be used for trying to securely store passwords.</p>\n<h2>Use a Standard Authentication System</h2>\n<p>Do not role your own authentication system.</p>\n<h2>Process Credit Card Information Correctly</h2>\n<p>Look into the <a href=\"https://www.pcisecuritystandards.org/\">PCI Security Standards</a> for financial security information.</p>\n<h2>Use HTTPS for Sensitive Data</h2>\n<p>Set up your <a href=\"http://www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt\">SSL</a>/<a href=\"http://en.wikipedia.org/wiki/Https\">HTTPS</a> certs correctly and check it against <a href=\"https://www.ssllabs.com/ssltest/\">SSL Labs Server Test</a>.</p>\n<h2>Prevent Session Hijacking</h2>\n<p>Built in session systems are usually premade to handle these types of attacks. It is not recommended that you roll your own, but it should have the following features:</p>\n<ul>\n<li>Encrypted data traffic.  The session key in particular should be encrypted, but ideally all traffic should be encrypted by using SSL/TLS.</li>\n<li>Long random session key.  Attackers should not be able to guess valid session keys.</li>\n<li>Regenerating the session id after a successful login.  Prevents [session fixation](<a href=\"http://en.wikipedia.org/wiki/Session_fixation\">http://en.wikipedia.org/wiki/Session_fixation</a>].</li>\n<li>Change the cookie value with each and every request.  This reduces the window for an attacker to hijack the session.</li>\n</ul>\n<h2>Prevent Cross Site Scripting (XSS)</h2>\n<p>Unfiltered query parameters that are added to the DOM are an easy way for attackers to use cross site scripting to pull data from your users.  Filter all query parameters; see <a href=\"http://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-site Scripting</a> for more information on common attacks and prevention methods.</p>\n<h2>Prevent Page Embedding</h2>\n<p>You can prevent page embedding with the following header:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code>X-Frame-Options: DENY\n</code></pre></div>\n<p>This will cause browsers to refuse requests for framing in that page.</p>\n<p>You can also prevent page embedding with JavaScript to prevent users from accessing your website in an iframe.  Look into this <a href=\"http://stackoverflow.com/questions/7776281/javascript-jquery-how-to-detect-if-a-page-is-embedded-by-others\">StackOverflow solution</a>.</p>\n<h2>Prevent Cross Site Request Forgeries</h2>\n<p>Cross site request forgeries are attacks by a malicious user whereby they craft a link to a site which a user is know to have been authenticated.  For example, say your site is a bank website; the malicious user may craft a URL for you site that when a user clicks on it, deposits money into the attacker&#x27;s account.  The attacker then sends the link to users who may have been logged into your bank website.</p>\n<p>According to <a href=\"http://en.wikipedia.org/wiki/Cross-site_request_forgery\">Wikipedia</a>:</p>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>At risk are web applications that perform actions based on input from trusted and authenticated users without requiring the user to authorize the specific action. A user who is authenticated by a cookie saved in the user&#x27;s web browser could unknowingly send an HTTP request to a site that trusts the user and thereby causes an unwanted action.</p>\n</blockquote>\n<h2>Prevent Click Jacking</h2>\n<p>Similar to <a href=\"#prevent-page-embedding\">Page Embedding</a>, click jacking works by:</p>\n<blockquote class=\"border-l-4 border-gray-300 pl-4\">\n<p>A user might receive an email with a link to a video about a news item, but another valid page, say a product page on Amazon.com, can be &quot;hidden&quot; on top or underneath the &quot;PLAY&quot; button of the news video. The user tries to &quot;play&quot; the video but actually &quot;buys&quot; the product from Amazon.</p>\n</blockquote>\n<p>Other known exploits include:</p>\n<ul>\n<li>Tricking users into enabling their webcam and microphone through Flash</li>\n<li>Tricking users into making their social networking profile information public</li>\n<li>Making users follow someone on Twitter[8]</li>\n<li>Sharing links on Facebook</li>\n</ul>\n<p>See <a href=\"http://en.wikipedia.org/wiki/Clickjacking\">Wikipedia</a> for more information.</p>\n<h2>Verify That Server Software is Up to Date</h2>\n<p>Make sure that the software on your system is up to date with the latest patches.</p>\n<h2>Verify That Packages, Modules, Plugins, etc are Up to Date</h2>\n<p>Make sure that the latest software used by your projest is up to date with the latest patches.</p>\n<h2>Verify That Your Database is Secured</h2>\n<p>Make sure that connections to the database are at least password protected.  Verify that only the least amount of permissions are being used.</p>\n<p>Make sure that confidential information is encrypted or hashed.</p>\n<h2>Attempt to Make Your App Run As Non-Root</h2>\n<p>Apply <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a> and try to have your app run as non-root as often as possible.</p>\n<h2>Use the Content-Security-Policy Header</h2>\n<p>Specify the following header to make the browser only run certain content depending on its origin:</p>\n<p><strong>example</strong></p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code>Content-Security-Policy: script-src &#x27;self&#x27; https://apis.google.com\n</code></pre></div>\n<p>You can also specify the following type of content:</p>\n<ul>\n<li>script-src (JavaScript)</li>\n<li>connect-src (XMLHttpRequest, WebSockets, and EventSource)</li>\n<li>font-src (Fonts)</li>\n<li>frame-src (Frame Urls)</li>\n<li>img-src (Images)</li>\n<li>media-src (Audio and Videos)</li>\n<li>object-src (Flash)</li>\n<li>style-src (CSS)</li>\n</ul>\n<h2>Do Not Allow Mime Sniffing with User Uploaded Content</h2>\n<p>You can tell browsers to not try to guess Mime Types of files with the following header:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code>X-CONTENT-TYPE-OPTIONS: nosniff\n</code></pre></div>\n<p>For example, say a user uploads an HTML file. You intend to serve it to users as a text file, but the browser will attempt to serve it as an HTML page.  You can tell the browser that you know what you are doing and that the Mime Type you are providing is indeed correct by using the above header.</p>\n<h2>Force HTTPS Traffic</h2>\n<p>You can force HTTPS Traffic with the following header:</p>\n<div class=\"overflow-auto rounded bg-gray-200 p-4 font-mono text-sm dark:bg-gray-800 dark:text-gray-100\"><pre><code>Scrict-Transport-Security: max-age=31536000; includeSubDomains\n</code></pre></div>\n<p>This will force <code>https://website.com</code> even when typing in <code>http://website.com</code></p>","contentCode":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    blockquote: \"blockquote\",\n    code: \"code\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    strong: \"strong\",\n    ul: \"ul\",\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"This post was originally on a blog I started for creating web applications. This post goes into security for web applications.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Against SQL Injection\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read about \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/SQL_injection\",\n        children: \"SQL injection\"\n      }), \" and learn how to prevent it for the langauge and database you are using.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"All User Input is Filtered\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Never trust user input.  This includes cookies and hidden form field values.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Read the Open Web Application Security Project\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Read \", _jsx(_components.a, {\n        href: \"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\",\n        children: \"the Open Web Application Security Project\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"All Passwords are Hashed with a Salt\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hash all passwords using a \", _jsx(_components.a, {\n        href: \"http://security.stackexchange.com/q/21263/396\",\n        children: \"salt\"\n      }), \" and all salts are different to prevent against \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Rainbow_table\",\n        children: \"rainbow attacks\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The hashing algorithm should be bcrypt or scrypt for storing passwords.  Look into \", _jsx(_components.a, {\n        href: \"http://codahale.com/how-to-safely-store-a-password/\",\n        children: \"How To Safely Sroe a Password\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Do \", _jsx(_components.strong, {\n        children: \"not\"\n      }), \" use MD5 or any SHA algorithm.  SHA algorithms are meant to be fast, which should not be used for trying to securely store passwords.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use a Standard Authentication System\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Do not role your own authentication system.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Process Credit Card Information Correctly\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Look into the \", _jsx(_components.a, {\n        href: \"https://www.pcisecuritystandards.org/\",\n        children: \"PCI Security Standards\"\n      }), \" for financial security information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use HTTPS for Sensitive Data\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Set up your \", _jsx(_components.a, {\n        href: \"http://www.mozilla.org/projects/security/pki/nss/ssl/draft302.txt\",\n        children: \"SSL\"\n      }), \"/\", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Https\",\n        children: \"HTTPS\"\n      }), \" certs correctly and check it against \", _jsx(_components.a, {\n        href: \"https://www.ssllabs.com/ssltest/\",\n        children: \"SSL Labs Server Test\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Session Hijacking\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Built in session systems are usually premade to handle these types of attacks. It is not recommended that you roll your own, but it should have the following features:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Encrypted data traffic.  The session key in particular should be encrypted, but ideally all traffic should be encrypted by using SSL/TLS.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Long random session key.  Attackers should not be able to guess valid session keys.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Regenerating the session id after a successful login.  Prevents [session fixation](\", _jsx(_components.a, {\n          href: \"http://en.wikipedia.org/wiki/Session_fixation\",\n          children: \"http://en.wikipedia.org/wiki/Session_fixation\"\n        }), \"].\"]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Change the cookie value with each and every request.  This reduces the window for an attacker to hijack the session.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Cross Site Scripting (XSS)\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Unfiltered query parameters that are added to the DOM are an easy way for attackers to use cross site scripting to pull data from your users.  Filter all query parameters; see \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Cross-site_scripting\",\n        children: \"Cross-site Scripting\"\n      }), \" for more information on common attacks and prevention methods.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Page Embedding\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can prevent page embedding with the following header:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"X-Frame-Options: DENY\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This will cause browsers to refuse requests for framing in that page.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can also prevent page embedding with JavaScript to prevent users from accessing your website in an iframe.  Look into this \", _jsx(_components.a, {\n        href: \"http://stackoverflow.com/questions/7776281/javascript-jquery-how-to-detect-if-a-page-is-embedded-by-others\",\n        children: \"StackOverflow solution\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Cross Site Request Forgeries\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cross site request forgeries are attacks by a malicious user whereby they craft a link to a site which a user is know to have been authenticated.  For example, say your site is a bank website; the malicious user may craft a URL for you site that when a user clicks on it, deposits money into the attacker's account.  The attacker then sends the link to users who may have been logged into your bank website.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"According to \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Cross-site_request_forgery\",\n        children: \"Wikipedia\"\n      }), \":\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"At risk are web applications that perform actions based on input from trusted and authenticated users without requiring the user to authorize the specific action. A user who is authenticated by a cookie saved in the user's web browser could unknowingly send an HTTP request to a site that trusts the user and thereby causes an unwanted action.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Prevent Click Jacking\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Similar to \", _jsx(_components.a, {\n        href: \"#prevent-page-embedding\",\n        children: \"Page Embedding\"\n      }), \", click jacking works by:\"]\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"A user might receive an email with a link to a video about a news item, but another valid page, say a product page on Amazon.com, can be \\\"hidden\\\" on top or underneath the \\\"PLAY\\\" button of the news video. The user tries to \\\"play\\\" the video but actually \\\"buys\\\" the product from Amazon.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Other known exploits include:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Tricking users into enabling their webcam and microphone through Flash\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Tricking users into making their social networking profile information public\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Making users follow someone on Twitter[8]\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Sharing links on Facebook\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"See \", _jsx(_components.a, {\n        href: \"http://en.wikipedia.org/wiki/Clickjacking\",\n        children: \"Wikipedia\"\n      }), \" for more information.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Verify That Server Software is Up to Date\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that the software on your system is up to date with the latest patches.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Verify That Packages, Modules, Plugins, etc are Up to Date\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that the latest software used by your projest is up to date with the latest patches.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Verify That Your Database is Secured\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that connections to the database are at least password protected.  Verify that only the least amount of permissions are being used.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Make sure that confidential information is encrypted or hashed.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Attempt to Make Your App Run As Non-Root\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Apply \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/Principle_of_least_privilege\",\n        children: \"the principle of least privilege\"\n      }), \" and try to have your app run as non-root as often as possible.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Use the Content-Security-Policy Header\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Specify the following header to make the browser only run certain content depending on its origin:\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"example\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Content-Security-Policy: script-src 'self' https://apis.google.com\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can also specify the following type of content:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"script-src (JavaScript)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"connect-src (XMLHttpRequest, WebSockets, and EventSource)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"font-src (Fonts)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"frame-src (Frame Urls)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"img-src (Images)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"media-src (Audio and Videos)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"object-src (Flash)\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"style-src (CSS)\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Do Not Allow Mime Sniffing with User Uploaded Content\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can tell browsers to not try to guess Mime Types of files with the following header:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"X-CONTENT-TYPE-OPTIONS: nosniff\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, say a user uploads an HTML file. You intend to serve it to users as a text file, but the browser will attempt to serve it as an HTML page.  You can tell the browser that you know what you are doing and that the Mime Type you are providing is indeed correct by using the above header.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Force HTTPS Traffic\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can force HTTPS Traffic with the following header:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Scrict-Transport-Security: max-age=31536000; includeSubDomains\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This will force \", _jsx(_components.code, {\n        children: \"https://website.com\"\n      }), \" even when typing in \", _jsx(_components.code, {\n        children: \"http://website.com\"\n      })]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","excerptRaw":"\nThis post was originally on a blog I started for creating web applications. This post goes into security for web applications.","excerptHTML":"<p>This post was originally on a blog I started for creating web applications. This post goes into security for web applications.</p>","excerptCode":"\"use strict\";\nconst {jsx: _jsx} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    p: \"p\",\n    ...props.components\n  };\n  return _jsx(_components.p, {\n    children: \"This post was originally on a blog I started for creating web applications. This post goes into security for web applications.\"\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = props.components || ({});\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","tags":["security"]},"previous":{"slug":"2015-01-04-web-standards","title":"Web Standards"},"next":{"slug":"2015-01-03-seo","title":"SEO"}},"__N_SSG":true}